
Projekt - GR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d8c  08008d60  08008d60  00009d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaec  0800aaec  0000c054  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaec  0800aaec  0000baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaf4  0800aaf4  0000c054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf4  0800aaf4  0000baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaf8  0800aaf8  0000baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800aafc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c054  2**0
                  CONTENTS
 10 .bss          000005f0  20000054  20000054  0000c054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000644  20000644  0000c054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a97c  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e7  00000000  00000000  00026a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  0002a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001380  00000000  00000000  0002bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002722e  00000000  00000000  0002ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd14  00000000  00000000  00054096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef8e8  00000000  00000000  00070daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00160692  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c80  00000000  00000000  001606d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00167358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000054 	.word	0x20000054
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008d48 	.word	0x08008d48

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000058 	.word	0x20000058
 80001e8:	08008d48 	.word	0x08008d48

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2uiz>:
 80007b8:	004a      	lsls	r2, r1, #1
 80007ba:	d211      	bcs.n	80007e0 <__aeabi_d2uiz+0x28>
 80007bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007c0:	d211      	bcs.n	80007e6 <__aeabi_d2uiz+0x2e>
 80007c2:	d50d      	bpl.n	80007e0 <__aeabi_d2uiz+0x28>
 80007c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007cc:	d40e      	bmi.n	80007ec <__aeabi_d2uiz+0x34>
 80007ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007da:	fa23 f002 	lsr.w	r0, r3, r2
 80007de:	4770      	bx	lr
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	4770      	bx	lr
 80007e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ea:	d102      	bne.n	80007f2 <__aeabi_d2uiz+0x3a>
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	4770      	bx	lr
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b96a 	b.w	8000ae4 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f806 	bl	8000828 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__udivmoddi4>:
 8000828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800082c:	9d08      	ldr	r5, [sp, #32]
 800082e:	460c      	mov	r4, r1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d14e      	bne.n	80008d2 <__udivmoddi4+0xaa>
 8000834:	4694      	mov	ip, r2
 8000836:	458c      	cmp	ip, r1
 8000838:	4686      	mov	lr, r0
 800083a:	fab2 f282 	clz	r2, r2
 800083e:	d962      	bls.n	8000906 <__udivmoddi4+0xde>
 8000840:	b14a      	cbz	r2, 8000856 <__udivmoddi4+0x2e>
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	4091      	lsls	r1, r2
 8000848:	fa20 f303 	lsr.w	r3, r0, r3
 800084c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000850:	4319      	orrs	r1, r3
 8000852:	fa00 fe02 	lsl.w	lr, r0, r2
 8000856:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085a:	fa1f f68c 	uxth.w	r6, ip
 800085e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000862:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000866:	fb07 1114 	mls	r1, r7, r4, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb04 f106 	mul.w	r1, r4, r6
 8000872:	4299      	cmp	r1, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x64>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f104 30ff 	add.w	r0, r4, #4294967295
 800087e:	f080 8112 	bcs.w	8000aa6 <__udivmoddi4+0x27e>
 8000882:	4299      	cmp	r1, r3
 8000884:	f240 810f 	bls.w	8000aa6 <__udivmoddi4+0x27e>
 8000888:	3c02      	subs	r4, #2
 800088a:	4463      	add	r3, ip
 800088c:	1a59      	subs	r1, r3, r1
 800088e:	fa1f f38e 	uxth.w	r3, lr
 8000892:	fbb1 f0f7 	udiv	r0, r1, r7
 8000896:	fb07 1110 	mls	r1, r7, r0, r1
 800089a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089e:	fb00 f606 	mul.w	r6, r0, r6
 80008a2:	429e      	cmp	r6, r3
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x94>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ae:	f080 80fc 	bcs.w	8000aaa <__udivmoddi4+0x282>
 80008b2:	429e      	cmp	r6, r3
 80008b4:	f240 80f9 	bls.w	8000aaa <__udivmoddi4+0x282>
 80008b8:	4463      	add	r3, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	1b9b      	subs	r3, r3, r6
 80008be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11d      	cbz	r5, 80008ce <__udivmoddi4+0xa6>
 80008c6:	40d3      	lsrs	r3, r2
 80008c8:	2200      	movs	r2, #0
 80008ca:	e9c5 3200 	strd	r3, r2, [r5]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d905      	bls.n	80008e2 <__udivmoddi4+0xba>
 80008d6:	b10d      	cbz	r5, 80008dc <__udivmoddi4+0xb4>
 80008d8:	e9c5 0100 	strd	r0, r1, [r5]
 80008dc:	2100      	movs	r1, #0
 80008de:	4608      	mov	r0, r1
 80008e0:	e7f5      	b.n	80008ce <__udivmoddi4+0xa6>
 80008e2:	fab3 f183 	clz	r1, r3
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d146      	bne.n	8000978 <__udivmoddi4+0x150>
 80008ea:	42a3      	cmp	r3, r4
 80008ec:	d302      	bcc.n	80008f4 <__udivmoddi4+0xcc>
 80008ee:	4290      	cmp	r0, r2
 80008f0:	f0c0 80f0 	bcc.w	8000ad4 <__udivmoddi4+0x2ac>
 80008f4:	1a86      	subs	r6, r0, r2
 80008f6:	eb64 0303 	sbc.w	r3, r4, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d0e6      	beq.n	80008ce <__udivmoddi4+0xa6>
 8000900:	e9c5 6300 	strd	r6, r3, [r5]
 8000904:	e7e3      	b.n	80008ce <__udivmoddi4+0xa6>
 8000906:	2a00      	cmp	r2, #0
 8000908:	f040 8090 	bne.w	8000a2c <__udivmoddi4+0x204>
 800090c:	eba1 040c 	sub.w	r4, r1, ip
 8000910:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000914:	fa1f f78c 	uxth.w	r7, ip
 8000918:	2101      	movs	r1, #1
 800091a:	fbb4 f6f8 	udiv	r6, r4, r8
 800091e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000922:	fb08 4416 	mls	r4, r8, r6, r4
 8000926:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092a:	fb07 f006 	mul.w	r0, r7, r6
 800092e:	4298      	cmp	r0, r3
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x11c>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f106 34ff 	add.w	r4, r6, #4294967295
 800093a:	d202      	bcs.n	8000942 <__udivmoddi4+0x11a>
 800093c:	4298      	cmp	r0, r3
 800093e:	f200 80cd 	bhi.w	8000adc <__udivmoddi4+0x2b4>
 8000942:	4626      	mov	r6, r4
 8000944:	1a1c      	subs	r4, r3, r0
 8000946:	fa1f f38e 	uxth.w	r3, lr
 800094a:	fbb4 f0f8 	udiv	r0, r4, r8
 800094e:	fb08 4410 	mls	r4, r8, r0, r4
 8000952:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000956:	fb00 f707 	mul.w	r7, r0, r7
 800095a:	429f      	cmp	r7, r3
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x148>
 800095e:	eb1c 0303 	adds.w	r3, ip, r3
 8000962:	f100 34ff 	add.w	r4, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x146>
 8000968:	429f      	cmp	r7, r3
 800096a:	f200 80b0 	bhi.w	8000ace <__udivmoddi4+0x2a6>
 800096e:	4620      	mov	r0, r4
 8000970:	1bdb      	subs	r3, r3, r7
 8000972:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000976:	e7a5      	b.n	80008c4 <__udivmoddi4+0x9c>
 8000978:	f1c1 0620 	rsb	r6, r1, #32
 800097c:	408b      	lsls	r3, r1
 800097e:	fa22 f706 	lsr.w	r7, r2, r6
 8000982:	431f      	orrs	r7, r3
 8000984:	fa20 fc06 	lsr.w	ip, r0, r6
 8000988:	fa04 f301 	lsl.w	r3, r4, r1
 800098c:	ea43 030c 	orr.w	r3, r3, ip
 8000990:	40f4      	lsrs	r4, r6
 8000992:	fa00 f801 	lsl.w	r8, r0, r1
 8000996:	0c38      	lsrs	r0, r7, #16
 8000998:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800099c:	fbb4 fef0 	udiv	lr, r4, r0
 80009a0:	fa1f fc87 	uxth.w	ip, r7
 80009a4:	fb00 441e 	mls	r4, r0, lr, r4
 80009a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ac:	fb0e f90c 	mul.w	r9, lr, ip
 80009b0:	45a1      	cmp	r9, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x1a6>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009be:	f080 8084 	bcs.w	8000aca <__udivmoddi4+0x2a2>
 80009c2:	45a1      	cmp	r9, r4
 80009c4:	f240 8081 	bls.w	8000aca <__udivmoddi4+0x2a2>
 80009c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80009cc:	443c      	add	r4, r7
 80009ce:	eba4 0409 	sub.w	r4, r4, r9
 80009d2:	fa1f f983 	uxth.w	r9, r3
 80009d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009da:	fb00 4413 	mls	r4, r0, r3, r4
 80009de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009e6:	45a4      	cmp	ip, r4
 80009e8:	d907      	bls.n	80009fa <__udivmoddi4+0x1d2>
 80009ea:	193c      	adds	r4, r7, r4
 80009ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f0:	d267      	bcs.n	8000ac2 <__udivmoddi4+0x29a>
 80009f2:	45a4      	cmp	ip, r4
 80009f4:	d965      	bls.n	8000ac2 <__udivmoddi4+0x29a>
 80009f6:	3b02      	subs	r3, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000a02:	eba4 040c 	sub.w	r4, r4, ip
 8000a06:	429c      	cmp	r4, r3
 8000a08:	46ce      	mov	lr, r9
 8000a0a:	469c      	mov	ip, r3
 8000a0c:	d351      	bcc.n	8000ab2 <__udivmoddi4+0x28a>
 8000a0e:	d04e      	beq.n	8000aae <__udivmoddi4+0x286>
 8000a10:	b155      	cbz	r5, 8000a28 <__udivmoddi4+0x200>
 8000a12:	ebb8 030e 	subs.w	r3, r8, lr
 8000a16:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a1e:	40cb      	lsrs	r3, r1
 8000a20:	431e      	orrs	r6, r3
 8000a22:	40cc      	lsrs	r4, r1
 8000a24:	e9c5 6400 	strd	r6, r4, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	e750      	b.n	80008ce <__udivmoddi4+0xa6>
 8000a2c:	f1c2 0320 	rsb	r3, r2, #32
 8000a30:	fa20 f103 	lsr.w	r1, r0, r3
 8000a34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a38:	fa24 f303 	lsr.w	r3, r4, r3
 8000a3c:	4094      	lsls	r4, r2
 8000a3e:	430c      	orrs	r4, r1
 8000a40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a48:	fa1f f78c 	uxth.w	r7, ip
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3110 	mls	r1, r8, r0, r3
 8000a54:	0c23      	lsrs	r3, r4, #16
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f107 	mul.w	r1, r0, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x24c>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6a:	d22c      	bcs.n	8000ac6 <__udivmoddi4+0x29e>
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d92a      	bls.n	8000ac6 <__udivmoddi4+0x29e>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb01 f307 	mul.w	r3, r1, r7
 8000a88:	42a3      	cmp	r3, r4
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x276>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a94:	d213      	bcs.n	8000abe <__udivmoddi4+0x296>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d911      	bls.n	8000abe <__udivmoddi4+0x296>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4464      	add	r4, ip
 8000a9e:	1ae4      	subs	r4, r4, r3
 8000aa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa4:	e739      	b.n	800091a <__udivmoddi4+0xf2>
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	e6f0      	b.n	800088c <__udivmoddi4+0x64>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e706      	b.n	80008bc <__udivmoddi4+0x94>
 8000aae:	45c8      	cmp	r8, r9
 8000ab0:	d2ae      	bcs.n	8000a10 <__udivmoddi4+0x1e8>
 8000ab2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ab6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aba:	3801      	subs	r0, #1
 8000abc:	e7a8      	b.n	8000a10 <__udivmoddi4+0x1e8>
 8000abe:	4631      	mov	r1, r6
 8000ac0:	e7ed      	b.n	8000a9e <__udivmoddi4+0x276>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	e799      	b.n	80009fa <__udivmoddi4+0x1d2>
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	e7d4      	b.n	8000a74 <__udivmoddi4+0x24c>
 8000aca:	46d6      	mov	lr, sl
 8000acc:	e77f      	b.n	80009ce <__udivmoddi4+0x1a6>
 8000ace:	4463      	add	r3, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e74d      	b.n	8000970 <__udivmoddi4+0x148>
 8000ad4:	4606      	mov	r6, r0
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	4608      	mov	r0, r1
 8000ada:	e70f      	b.n	80008fc <__udivmoddi4+0xd4>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	e730      	b.n	8000944 <__udivmoddi4+0x11c>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <Action>:
struct Song {
	struct Note notes[1000];
	int length;
};

int Action(int *option, int *valuex, int *valuey, int *valueButton, int maxoption, int *freq_index, int *len_index) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
	if (*valuey == -1 && *option < 3 && *valuex==0) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afe:	d10c      	bne.n	8000b1a <Action+0x32>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dc08      	bgt.n	8000b1a <Action+0x32>
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d104      	bne.n	8000b1a <Action+0x32>
		*option += 1;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	601a      	str	r2, [r3, #0]
	}
	if (*valuey == 1 && *option > 0 && *valuex == 0) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10c      	bne.n	8000b3c <Action+0x54>
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	dd08      	ble.n	8000b3c <Action+0x54>
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <Action+0x54>
		*option -= 1;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	601a      	str	r2, [r3, #0]
	}
	if (*valuey == 0 && *option == 0 && *valuex == 1 && *freq_index<24) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d110      	bne.n	8000b66 <Action+0x7e>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10c      	bne.n	8000b66 <Action+0x7e>
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d108      	bne.n	8000b66 <Action+0x7e>
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b17      	cmp	r3, #23
 8000b5a:	dc04      	bgt.n	8000b66 <Action+0x7e>
		*freq_index += 1;
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	601a      	str	r2, [r3, #0]
	}
	if (*valuey == 0 && *option == 0 && *valuex == -1 && *freq_index>0) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d111      	bne.n	8000b92 <Action+0xaa>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10d      	bne.n	8000b92 <Action+0xaa>
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7e:	d108      	bne.n	8000b92 <Action+0xaa>
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dd04      	ble.n	8000b92 <Action+0xaa>
		*freq_index -= 1;
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	1e5a      	subs	r2, r3, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	601a      	str	r2, [r3, #0]
	}
	if (*valuey == 0 && *option == 1 && *valuex == 1 && *len_index < 4) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d110      	bne.n	8000bbc <Action+0xd4>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d10c      	bne.n	8000bbc <Action+0xd4>
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d108      	bne.n	8000bbc <Action+0xd4>
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	dc04      	bgt.n	8000bbc <Action+0xd4>
		*len_index += 1;
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	601a      	str	r2, [r3, #0]
	}
	if (*valuey == 0 && *option == 1 && *valuex == -1 && *len_index > 0) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d111      	bne.n	8000be8 <Action+0x100>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10d      	bne.n	8000be8 <Action+0x100>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d108      	bne.n	8000be8 <Action+0x100>
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dd04      	ble.n	8000be8 <Action+0x100>
		*len_index -= 1;
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1e5a      	subs	r2, r3, #1
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	601a      	str	r2, [r3, #0]
	}
	if (*valuey == 0 && *option == 3 && *valuex == 0 && *valueButton == 1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10d      	bne.n	8000c0c <Action+0x124>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d109      	bne.n	8000c0c <Action+0x124>
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <Action+0x124>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <Action+0x124>
		return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e01a      	b.n	8000c42 <Action+0x15a>
	}
	if (*valuey == 0 && *option == 0 && *valuex == 0 && *valueButton == 1) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10d      	bne.n	8000c30 <Action+0x148>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <Action+0x148>
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d105      	bne.n	8000c30 <Action+0x148>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d101      	bne.n	8000c30 <Action+0x148>
		return 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e008      	b.n	8000c42 <Action+0x15a>
	}
	if (*option > maxoption) {
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	da02      	bge.n	8000c40 <Action+0x158>
		*option = maxoption;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	601a      	str	r2, [r3, #0]
	}
	return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <Display>:

void Display(int mode, int* option, int* freq, float* dur) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
	if (mode == 0) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d122      	bne.n	8000caa <Display+0x5a>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"                     ");
 8000c64:	49a8      	ldr	r1, [pc, #672]	@ (8000f08 <Display+0x2b8>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f002 fd5e 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Playing a Song");
 8000c6c:	49a7      	ldr	r1, [pc, #668]	@ (8000f0c <Display+0x2bc>)
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f002 fd5a 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"                     ");
 8000c74:	49a4      	ldr	r1, [pc, #656]	@ (8000f08 <Display+0x2b8>)
 8000c76:	2001      	movs	r0, #1
 8000c78:	f002 fd56 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c7c:	48a4      	ldr	r0, [pc, #656]	@ (8000f10 <Display+0x2c0>)
 8000c7e:	f002 fbc7 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Record a Song");
 8000c82:	49a4      	ldr	r1, [pc, #656]	@ (8000f14 <Display+0x2c4>)
 8000c84:	2001      	movs	r0, #1
 8000c86:	f002 fd4f 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8e:	f002 fbbf 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(2, (uint8_t*)"                     ");
 8000c92:	499d      	ldr	r1, [pc, #628]	@ (8000f08 <Display+0x2b8>)
 8000c94:	2002      	movs	r0, #2
 8000c96:	f002 fd47 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"                     ");
 8000c9a:	499b      	ldr	r1, [pc, #620]	@ (8000f08 <Display+0x2b8>)
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f002 fd43 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(4, (uint8_t*)"                     ");
 8000ca2:	4999      	ldr	r1, [pc, #612]	@ (8000f08 <Display+0x2b8>)
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f002 fd3f 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
	}
	if (mode == 1) {
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	f040 81ad 	bne.w	800100c <Display+0x3bc>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb6:	f002 fbab 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"                  ");
 8000cba:	4997      	ldr	r1, [pc, #604]	@ (8000f18 <Display+0x2c8>)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f002 fd33 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Recording song");
 8000cc2:	4996      	ldr	r1, [pc, #600]	@ (8000f1c <Display+0x2cc>)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f002 fd2f 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"                  ");
 8000cca:	4993      	ldr	r1, [pc, #588]	@ (8000f18 <Display+0x2c8>)
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f002 fd2b 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		if (*option == 0) {
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d102      	bne.n	8000ce0 <Display+0x90>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <Display+0x2c0>)
 8000cdc:	f002 fb98 	bl	8003410 <BSP_LCD_SetTextColor>
		}
		if (*freq == 308) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8000ce8:	d103      	bne.n	8000cf2 <Display+0xa2>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: C1");
 8000cea:	498d      	ldr	r1, [pc, #564]	@ (8000f20 <Display+0x2d0>)
 8000cec:	2001      	movs	r0, #1
 8000cee:	f002 fd1b 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 290) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8000cfa:	d103      	bne.n	8000d04 <Display+0xb4>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: CIS1");
 8000cfc:	4989      	ldr	r1, [pc, #548]	@ (8000f24 <Display+0x2d4>)
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f002 fd12 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 274) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8000d0c:	d103      	bne.n	8000d16 <Display+0xc6>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: D1");
 8000d0e:	4986      	ldr	r1, [pc, #536]	@ (8000f28 <Display+0x2d8>)
 8000d10:	2001      	movs	r0, #1
 8000d12:	f002 fd09 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 256) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d1e:	d103      	bne.n	8000d28 <Display+0xd8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: DIS1");
 8000d20:	4982      	ldr	r1, [pc, #520]	@ (8000f2c <Display+0x2dc>)
 8000d22:	2001      	movs	r0, #1
 8000d24:	f002 fd00 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 244) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2bf4      	cmp	r3, #244	@ 0xf4
 8000d2e:	d103      	bne.n	8000d38 <Display+0xe8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: E1");
 8000d30:	497f      	ldr	r1, [pc, #508]	@ (8000f30 <Display+0x2e0>)
 8000d32:	2001      	movs	r0, #1
 8000d34:	f002 fcf8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 230) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2be6      	cmp	r3, #230	@ 0xe6
 8000d3e:	d103      	bne.n	8000d48 <Display+0xf8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: F1");
 8000d40:	497c      	ldr	r1, [pc, #496]	@ (8000f34 <Display+0x2e4>)
 8000d42:	2001      	movs	r0, #1
 8000d44:	f002 fcf0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 217) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2bd9      	cmp	r3, #217	@ 0xd9
 8000d4e:	d103      	bne.n	8000d58 <Display+0x108>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: FIS1");
 8000d50:	4979      	ldr	r1, [pc, #484]	@ (8000f38 <Display+0x2e8>)
 8000d52:	2001      	movs	r0, #1
 8000d54:	f002 fce8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 204) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2bcc      	cmp	r3, #204	@ 0xcc
 8000d5e:	d103      	bne.n	8000d68 <Display+0x118>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: G1");
 8000d60:	4976      	ldr	r1, [pc, #472]	@ (8000f3c <Display+0x2ec>)
 8000d62:	2001      	movs	r0, #1
 8000d64:	f002 fce0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 192) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d6e:	d103      	bne.n	8000d78 <Display+0x128>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: GIS1");
 8000d70:	4973      	ldr	r1, [pc, #460]	@ (8000f40 <Display+0x2f0>)
 8000d72:	2001      	movs	r0, #1
 8000d74:	f002 fcd8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 182) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2bb6      	cmp	r3, #182	@ 0xb6
 8000d7e:	d103      	bne.n	8000d88 <Display+0x138>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: A1");
 8000d80:	4970      	ldr	r1, [pc, #448]	@ (8000f44 <Display+0x2f4>)
 8000d82:	2001      	movs	r0, #1
 8000d84:	f002 fcd0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 171) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2bab      	cmp	r3, #171	@ 0xab
 8000d8e:	d103      	bne.n	8000d98 <Display+0x148>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: AIS1");
 8000d90:	496d      	ldr	r1, [pc, #436]	@ (8000f48 <Display+0x2f8>)
 8000d92:	2001      	movs	r0, #1
 8000d94:	f002 fcc8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 163) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2ba3      	cmp	r3, #163	@ 0xa3
 8000d9e:	d103      	bne.n	8000da8 <Display+0x158>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: B1");
 8000da0:	496a      	ldr	r1, [pc, #424]	@ (8000f4c <Display+0x2fc>)
 8000da2:	2001      	movs	r0, #1
 8000da4:	f002 fcc0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 153) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b99      	cmp	r3, #153	@ 0x99
 8000dae:	d103      	bne.n	8000db8 <Display+0x168>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: C2");
 8000db0:	4967      	ldr	r1, [pc, #412]	@ (8000f50 <Display+0x300>)
 8000db2:	2001      	movs	r0, #1
 8000db4:	f002 fcb8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 144) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b90      	cmp	r3, #144	@ 0x90
 8000dbe:	d103      	bne.n	8000dc8 <Display+0x178>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: CIS2");
 8000dc0:	4964      	ldr	r1, [pc, #400]	@ (8000f54 <Display+0x304>)
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f002 fcb0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 136) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b88      	cmp	r3, #136	@ 0x88
 8000dce:	d103      	bne.n	8000dd8 <Display+0x188>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: D2");
 8000dd0:	4961      	ldr	r1, [pc, #388]	@ (8000f58 <Display+0x308>)
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f002 fca8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 128) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b80      	cmp	r3, #128	@ 0x80
 8000dde:	d103      	bne.n	8000de8 <Display+0x198>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: DIS2");
 8000de0:	495e      	ldr	r1, [pc, #376]	@ (8000f5c <Display+0x30c>)
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 fca0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 121) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b79      	cmp	r3, #121	@ 0x79
 8000dee:	d103      	bne.n	8000df8 <Display+0x1a8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: E2");
 8000df0:	495b      	ldr	r1, [pc, #364]	@ (8000f60 <Display+0x310>)
 8000df2:	2001      	movs	r0, #1
 8000df4:	f002 fc98 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 114) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b72      	cmp	r3, #114	@ 0x72
 8000dfe:	d103      	bne.n	8000e08 <Display+0x1b8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: F2");
 8000e00:	4958      	ldr	r1, [pc, #352]	@ (8000f64 <Display+0x314>)
 8000e02:	2001      	movs	r0, #1
 8000e04:	f002 fc90 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 108) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e0e:	d103      	bne.n	8000e18 <Display+0x1c8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: FIS2");
 8000e10:	4955      	ldr	r1, [pc, #340]	@ (8000f68 <Display+0x318>)
 8000e12:	2001      	movs	r0, #1
 8000e14:	f002 fc88 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 102) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b66      	cmp	r3, #102	@ 0x66
 8000e1e:	d103      	bne.n	8000e28 <Display+0x1d8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: G2");
 8000e20:	4952      	ldr	r1, [pc, #328]	@ (8000f6c <Display+0x31c>)
 8000e22:	2001      	movs	r0, #1
 8000e24:	f002 fc80 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 96) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b60      	cmp	r3, #96	@ 0x60
 8000e2e:	d103      	bne.n	8000e38 <Display+0x1e8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: GIS2");
 8000e30:	494f      	ldr	r1, [pc, #316]	@ (8000f70 <Display+0x320>)
 8000e32:	2001      	movs	r0, #1
 8000e34:	f002 fc78 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 91) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b5b      	cmp	r3, #91	@ 0x5b
 8000e3e:	d103      	bne.n	8000e48 <Display+0x1f8>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: A2");
 8000e40:	494c      	ldr	r1, [pc, #304]	@ (8000f74 <Display+0x324>)
 8000e42:	2001      	movs	r0, #1
 8000e44:	f002 fc70 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 86) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b56      	cmp	r3, #86	@ 0x56
 8000e4e:	d103      	bne.n	8000e58 <Display+0x208>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: AIS2");
 8000e50:	4949      	ldr	r1, [pc, #292]	@ (8000f78 <Display+0x328>)
 8000e52:	2001      	movs	r0, #1
 8000e54:	f002 fc68 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 81) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b51      	cmp	r3, #81	@ 0x51
 8000e5e:	d103      	bne.n	8000e68 <Display+0x218>
			BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: B2");
 8000e60:	4946      	ldr	r1, [pc, #280]	@ (8000f7c <Display+0x32c>)
 8000e62:	2001      	movs	r0, #1
 8000e64:	f002 fc60 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*freq == 0) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <Display+0x228>
					BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Pitch: Pause");
 8000e70:	4943      	ldr	r1, [pc, #268]	@ (8000f80 <Display+0x330>)
 8000e72:	2001      	movs	r0, #1
 8000e74:	f002 fc58 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f002 fac8 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(2, (uint8_t*)"                         ");
 8000e80:	4940      	ldr	r1, [pc, #256]	@ (8000f84 <Display+0x334>)
 8000e82:	2002      	movs	r0, #2
 8000e84:	f002 fc50 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		if (*option == 1) {
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d102      	bne.n	8000e96 <Display+0x246>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000e90:	481f      	ldr	r0, [pc, #124]	@ (8000f10 <Display+0x2c0>)
 8000e92:	f002 fabd 	bl	8003410 <BSP_LCD_SetTextColor>
		}
		if (*dur == (float)1.0) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ea0:	eef4 7a47 	vcmp.f32	s15, s14
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	d103      	bne.n	8000eb2 <Display+0x262>
			BSP_LCD_DisplayStringAtLine(2, (uint8_t*)("Length: Full"));
 8000eaa:	4937      	ldr	r1, [pc, #220]	@ (8000f88 <Display+0x338>)
 8000eac:	2002      	movs	r0, #2
 8000eae:	f002 fc3b 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*dur == (float)0.5) {
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ebc:	eef4 7a47 	vcmp.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d103      	bne.n	8000ece <Display+0x27e>
			BSP_LCD_DisplayStringAtLine(2, (uint8_t*)("Length: Half"));
 8000ec6:	4931      	ldr	r1, [pc, #196]	@ (8000f8c <Display+0x33c>)
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f002 fc2d 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*dur == (float)0.25) {
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000ed8:	eef4 7a47 	vcmp.f32	s15, s14
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	d103      	bne.n	8000eea <Display+0x29a>
			BSP_LCD_DisplayStringAtLine(2, (uint8_t*)("Length: Quarter"));
 8000ee2:	492b      	ldr	r1, [pc, #172]	@ (8000f90 <Display+0x340>)
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f002 fc1f 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		if (*dur == (float)0.125) {
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000ef4:	eef4 7a47 	vcmp.f32	s15, s14
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	d14e      	bne.n	8000f9c <Display+0x34c>
			BSP_LCD_DisplayStringAtLine(2, (uint8_t*)("Length: Eighth"));
 8000efe:	4925      	ldr	r1, [pc, #148]	@ (8000f94 <Display+0x344>)
 8000f00:	2002      	movs	r0, #2
 8000f02:	f002 fc11 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
 8000f06:	e049      	b.n	8000f9c <Display+0x34c>
 8000f08:	08008d60 	.word	0x08008d60
 8000f0c:	08008d78 	.word	0x08008d78
 8000f10:	ffff0000 	.word	0xffff0000
 8000f14:	08008d88 	.word	0x08008d88
 8000f18:	08008d98 	.word	0x08008d98
 8000f1c:	08008dac 	.word	0x08008dac
 8000f20:	08008dbc 	.word	0x08008dbc
 8000f24:	08008dc8 	.word	0x08008dc8
 8000f28:	08008dd4 	.word	0x08008dd4
 8000f2c:	08008de0 	.word	0x08008de0
 8000f30:	08008dec 	.word	0x08008dec
 8000f34:	08008df8 	.word	0x08008df8
 8000f38:	08008e04 	.word	0x08008e04
 8000f3c:	08008e10 	.word	0x08008e10
 8000f40:	08008e1c 	.word	0x08008e1c
 8000f44:	08008e28 	.word	0x08008e28
 8000f48:	08008e34 	.word	0x08008e34
 8000f4c:	08008e40 	.word	0x08008e40
 8000f50:	08008e4c 	.word	0x08008e4c
 8000f54:	08008e58 	.word	0x08008e58
 8000f58:	08008e64 	.word	0x08008e64
 8000f5c:	08008e70 	.word	0x08008e70
 8000f60:	08008e7c 	.word	0x08008e7c
 8000f64:	08008e88 	.word	0x08008e88
 8000f68:	08008e94 	.word	0x08008e94
 8000f6c:	08008ea0 	.word	0x08008ea0
 8000f70:	08008eac 	.word	0x08008eac
 8000f74:	08008eb8 	.word	0x08008eb8
 8000f78:	08008ec4 	.word	0x08008ec4
 8000f7c:	08008ed0 	.word	0x08008ed0
 8000f80:	08008edc 	.word	0x08008edc
 8000f84:	08008eec 	.word	0x08008eec
 8000f88:	08008f08 	.word	0x08008f08
 8000f8c:	08008f18 	.word	0x08008f18
 8000f90:	08008f28 	.word	0x08008f28
 8000f94:	08008f38 	.word	0x08008f38
 8000f98:	3d800000 	.word	0x3d800000
		}
		if (*dur == (float)0.0625) {
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8000f98 <Display+0x348>
 8000fa6:	eef4 7a47 	vcmp.f32	s15, s14
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d103      	bne.n	8000fb8 <Display+0x368>
			BSP_LCD_DisplayStringAtLine(2, (uint8_t*)("Length: Sixteenth"));
 8000fb0:	492b      	ldr	r1, [pc, #172]	@ (8001060 <Display+0x410>)
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f002 fbb8 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f002 fa28 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"                     ");
 8000fc0:	4928      	ldr	r1, [pc, #160]	@ (8001064 <Display+0x414>)
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f002 fbb0 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		if (*option == 2) {
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d102      	bne.n	8000fd6 <Display+0x386>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000fd0:	4825      	ldr	r0, [pc, #148]	@ (8001068 <Display+0x418>)
 8000fd2:	f002 fa1d 	bl	8003410 <BSP_LCD_SetTextColor>
		}
		BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"Confirm");
 8000fd6:	4925      	ldr	r1, [pc, #148]	@ (800106c <Display+0x41c>)
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f002 fba5 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f002 fa15 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(4, (uint8_t*)"                     ");
 8000fe6:	491f      	ldr	r1, [pc, #124]	@ (8001064 <Display+0x414>)
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f002 fb9d 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		if (*option == 3) {
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d102      	bne.n	8000ffc <Display+0x3ac>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ff6:	481c      	ldr	r0, [pc, #112]	@ (8001068 <Display+0x418>)
 8000ff8:	f002 fa0a 	bl	8003410 <BSP_LCD_SetTextColor>
		}
		BSP_LCD_DisplayStringAtLine(4, (uint8_t*)"Finish");
 8000ffc:	491c      	ldr	r1, [pc, #112]	@ (8001070 <Display+0x420>)
 8000ffe:	2004      	movs	r0, #4
 8001000:	f002 fb92 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f002 fa02 	bl	8003410 <BSP_LCD_SetTextColor>
	}
	if (mode == 2) {
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d122      	bne.n	8001058 <Display+0x408>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"                     ");
 8001012:	4914      	ldr	r1, [pc, #80]	@ (8001064 <Display+0x414>)
 8001014:	2000      	movs	r0, #0
 8001016:	f002 fb87 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"Song paused");
 800101a:	4916      	ldr	r1, [pc, #88]	@ (8001074 <Display+0x424>)
 800101c:	2000      	movs	r0, #0
 800101e:	f002 fb83 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"                     ");
 8001022:	4910      	ldr	r1, [pc, #64]	@ (8001064 <Display+0x414>)
 8001024:	2001      	movs	r0, #1
 8001026:	f002 fb7f 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800102a:	480f      	ldr	r0, [pc, #60]	@ (8001068 <Display+0x418>)
 800102c:	f002 f9f0 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Register a Song");
 8001030:	4911      	ldr	r1, [pc, #68]	@ (8001078 <Display+0x428>)
 8001032:	2001      	movs	r0, #1
 8001034:	f002 fb78 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f002 f9e8 	bl	8003410 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(2, (uint8_t*)"                     ");
 8001040:	4908      	ldr	r1, [pc, #32]	@ (8001064 <Display+0x414>)
 8001042:	2002      	movs	r0, #2
 8001044:	f002 fb70 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(3, (uint8_t*)"                     ");
 8001048:	4906      	ldr	r1, [pc, #24]	@ (8001064 <Display+0x414>)
 800104a:	2003      	movs	r0, #3
 800104c:	f002 fb6c 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(4, (uint8_t*)"                     ");
 8001050:	4904      	ldr	r1, [pc, #16]	@ (8001064 <Display+0x414>)
 8001052:	2004      	movs	r0, #4
 8001054:	f002 fb68 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
	}
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	08008f48 	.word	0x08008f48
 8001064:	08008d60 	.word	0x08008d60
 8001068:	ffff0000 	.word	0xffff0000
 800106c:	08008f5c 	.word	0x08008f5c
 8001070:	08008f64 	.word	0x08008f64
 8001074:	08008f6c 	.word	0x08008f6c
 8001078:	08008f78 	.word	0x08008f78

0800107c <registerSong>:

struct Song registerSong(int *option, int *valuex, int *valuey, int *valueButton){
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	f5ad 5dff 	sub.w	sp, sp, #8160	@ 0x1fe0
 8001082:	b082      	sub	sp, #8
 8001084:	af04      	add	r7, sp, #16
 8001086:	f607 74d8 	addw	r4, r7, #4056	@ 0xfd8
 800108a:	f6a4 74cc 	subw	r4, r4, #4044	@ 0xfcc
 800108e:	6020      	str	r0, [r4, #0]
 8001090:	f607 70d8 	addw	r0, r7, #4056	@ 0xfd8
 8001094:	f5a0 607d 	sub.w	r0, r0, #4048	@ 0xfd0
 8001098:	6001      	str	r1, [r0, #0]
 800109a:	f607 71d8 	addw	r1, r7, #4056	@ 0xfd8
 800109e:	f6a1 71d4 	subw	r1, r1, #4052	@ 0xfd4
 80010a2:	600a      	str	r2, [r1, #0]
 80010a4:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 80010a8:	f6a2 72d8 	subw	r2, r2, #4056	@ 0xfd8
 80010ac:	6013      	str	r3, [r2, #0]
	struct Song nowa;
	int tmp = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 80010b4:	f102 0214 	add.w	r2, r2, #20
 80010b8:	6013      	str	r3, [r2, #0]
	nowa.length=0;
 80010ba:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80010be:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 80010c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010c6:	461a      	mov	r2, r3
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c2 3f40 	str.w	r3, [r2, #3904]	@ 0xf40
	int freq_index = 0;
 80010ce:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80010d2:	f6a3 734c 	subw	r3, r3, #3916	@ 0xf4c
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
	int len_index = 0;
 80010da:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80010de:	f5a3 6375 	sub.w	r3, r3, #3920	@ 0xf50
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
	int freq_table[] = { 308, 290, 274, 256, 244, 230, 217, 204, 192, 182, 171, 163, 153, 144, 136, 128, 121, 114, 108, 102, 96, 91, 86, 81, 0};
 80010e6:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80010ea:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80010ee:	4a9d      	ldr	r2, [pc, #628]	@ (8001364 <registerSong+0x2e8>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	4611      	mov	r1, r2
 80010f4:	2364      	movs	r3, #100	@ 0x64
 80010f6:	461a      	mov	r2, r3
 80010f8:	f007 fe18 	bl	8008d2c <memcpy>
	float len_table[] = { 1.0,0.5,0.25,0.125,0.0625 };
 80010fc:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001100:	f6a3 73c8 	subw	r3, r3, #4040	@ 0xfc8
 8001104:	4a98      	ldr	r2, [pc, #608]	@ (8001368 <registerSong+0x2ec>)
 8001106:	461c      	mov	r4, r3
 8001108:	4615      	mov	r5, r2
 800110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	6023      	str	r3, [r4, #0]
	Display(1, option, &freq_table[freq_index], &len_table[len_index]);
 8001112:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001116:	f6a3 734c 	subw	r3, r3, #3916	@ 0xf4c
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001120:	3b14      	subs	r3, #20
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	1898      	adds	r0, r3, r2
 8001126:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 800112a:	f5a3 6375 	sub.w	r3, r3, #3920	@ 0xf50
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	3b08      	subs	r3, #8
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4413      	add	r3, r2
 800113a:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 800113e:	f5a2 617d 	sub.w	r1, r2, #4048	@ 0xfd0
 8001142:	4602      	mov	r2, r0
 8001144:	6809      	ldr	r1, [r1, #0]
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fd82 	bl	8000c50 <Display>
	while (Action(option, valuex, valuey, valueButton,3, &freq_index, &len_index) > 0 || nowa.length==0) {
 800114c:	e0ba      	b.n	80012c4 <registerSong+0x248>
		if (tmp==1) Display(1, option, &freq_table[freq_index], &len_table[len_index]);
 800114e:	f507 53fe 	add.w	r3, r7, #8128	@ 0x1fc0
 8001152:	f103 0314 	add.w	r3, r3, #20
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d11c      	bne.n	8001196 <registerSong+0x11a>
 800115c:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001160:	f6a3 734c 	subw	r3, r3, #3916	@ 0xf4c
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800116a:	3b14      	subs	r3, #20
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	1898      	adds	r0, r3, r2
 8001170:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001174:	f5a3 6375 	sub.w	r3, r3, #3920	@ 0xf50
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	3b08      	subs	r3, #8
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4413      	add	r3, r2
 8001184:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 8001188:	f5a2 617d 	sub.w	r1, r2, #4048	@ 0xfd0
 800118c:	4602      	mov	r2, r0
 800118e:	6809      	ldr	r1, [r1, #0]
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff fd5d 	bl	8000c50 <Display>
		if (*valueButton == 1 && *option == 2) {
 8001196:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 800119a:	f103 0308 	add.w	r3, r3, #8
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d14d      	bne.n	8001242 <registerSong+0x1c6>
 80011a6:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011aa:	f5a3 637d 	sub.w	r3, r3, #4048	@ 0xfd0
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d145      	bne.n	8001242 <registerSong+0x1c6>
			nowa.notes[nowa.length].freq = freq_table[freq_index];
 80011b6:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011ba:	f6a3 734c 	subw	r3, r3, #3916	@ 0xf4c
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011c4:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 80011c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011cc:	f8d3 2f40 	ldr.w	r2, [r3, #3904]	@ 0xf40
 80011d0:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011d4:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80011d8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80011dc:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011e0:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 80011e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			nowa.notes[nowa.length].dur = len_table[len_index];
 80011e8:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011ec:	f5a3 6375 	sub.w	r3, r3, #3920	@ 0xf50
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80011f6:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 80011fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011fe:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
 8001202:	f607 71d8 	addw	r1, r7, #4056	@ 0xfd8
 8001206:	f6a1 71c8 	subw	r1, r1, #4040	@ 0xfc8
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	440a      	add	r2, r1
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	f607 71d8 	addw	r1, r7, #4056	@ 0xfd8
 8001214:	f6a1 7148 	subw	r1, r1, #3912	@ 0xf48
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	3304      	adds	r3, #4
 800121e:	601a      	str	r2, [r3, #0]
			nowa.length += 1;
 8001220:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001224:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 8001228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800122c:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
 8001230:	3301      	adds	r3, #1
 8001232:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 8001236:	f6a2 7248 	subw	r2, r2, #3912	@ 0xf48
 800123a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800123e:	f8c2 3f40 	str.w	r3, [r2, #3904]	@ 0xf40
		}
		HAL_ADC_Start(&hadc1);
 8001242:	484a      	ldr	r0, [pc, #296]	@ (800136c <registerSong+0x2f0>)
 8001244:	f002 ff1a 	bl	800407c <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8001248:	4849      	ldr	r0, [pc, #292]	@ (8001370 <registerSong+0x2f4>)
 800124a:	f002 ff17 	bl	800407c <HAL_ADC_Start>
		HAL_ADC_Start(&hadc3);
 800124e:	4849      	ldr	r0, [pc, #292]	@ (8001374 <registerSong+0x2f8>)
 8001250:	f002 ff14 	bl	800407c <HAL_ADC_Start>
		HAL_Delay(20);
 8001254:	2014      	movs	r0, #20
 8001256:	f002 fea9 	bl	8003fac <HAL_Delay>
		if (readAnalogStickx(HAL_ADC_GetValue(&hadc1), valuex) || readAnalogSticky(HAL_ADC_GetValue(&hadc2), valuey) || readButton(valueButton)) tmp = 1;
 800125a:	4844      	ldr	r0, [pc, #272]	@ (800136c <registerSong+0x2f0>)
 800125c:	f002 ffe0 	bl	8004220 <HAL_ADC_GetValue>
 8001260:	4602      	mov	r2, r0
 8001262:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001266:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 800126a:	6819      	ldr	r1, [r3, #0]
 800126c:	4610      	mov	r0, r2
 800126e:	f000 f8cd 	bl	800140c <readAnalogStickx>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d118      	bne.n	80012aa <registerSong+0x22e>
 8001278:	483d      	ldr	r0, [pc, #244]	@ (8001370 <registerSong+0x2f4>)
 800127a:	f002 ffd1 	bl	8004220 <HAL_ADC_GetValue>
 800127e:	4602      	mov	r2, r0
 8001280:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001284:	f6a3 73d8 	subw	r3, r3, #4056	@ 0xfd8
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	4610      	mov	r0, r2
 800128c:	f000 f8e6 	bl	800145c <readAnalogSticky>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <registerSong+0x22e>
 8001296:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 800129a:	f103 0308 	add.w	r3, r3, #8
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f000 f904 	bl	80014ac <readButton>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <registerSong+0x23c>
 80012aa:	2301      	movs	r3, #1
 80012ac:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 80012b0:	f102 0214 	add.w	r2, r2, #20
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e005      	b.n	80012c4 <registerSong+0x248>
		else tmp = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f507 52fe 	add.w	r2, r7, #8128	@ 0x1fc0
 80012be:	f102 0214 	add.w	r2, r2, #20
 80012c2:	6013      	str	r3, [r2, #0]
	while (Action(option, valuex, valuey, valueButton,3, &freq_index, &len_index) > 0 || nowa.length==0) {
 80012c4:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80012c8:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 80012cc:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80012d0:	f6a3 71d4 	subw	r1, r3, #4052	@ 0xfd4
 80012d4:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80012d8:	f5a3 607d 	sub.w	r0, r3, #4048	@ 0xfd0
 80012dc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012e0:	3b10      	subs	r3, #16
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012e8:	3b0c      	subs	r3, #12
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	2303      	movs	r3, #3
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f507 53ff 	add.w	r3, r7, #8160	@ 0x1fe0
 80012f4:	f103 0308 	add.w	r3, r3, #8
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	6809      	ldr	r1, [r1, #0]
 80012fe:	6800      	ldr	r0, [r0, #0]
 8001300:	f7ff fbf2 	bl	8000ae8 <Action>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	f73f af21 	bgt.w	800114e <registerSong+0xd2>
 800130c:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001310:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 8001314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001318:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
 800131c:	2b00      	cmp	r3, #0
 800131e:	f43f af16 	beq.w	800114e <registerSong+0xd2>
	}
	*option=0;
 8001322:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001326:	f5a3 637d 	sub.w	r3, r3, #4048	@ 0xfd0
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
	return nowa;
 8001330:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001334:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 800133e:	f6a3 7348 	subw	r3, r3, #3912	@ 0xf48
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f641 7344 	movw	r3, #8004	@ 0x1f44
 800134a:	461a      	mov	r2, r3
 800134c:	f007 fcee 	bl	8008d2c <memcpy>
}
 8001350:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8001354:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f507 57fe 	add.w	r7, r7, #8128	@ 0x1fc0
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bdb0      	pop	{r4, r5, r7, pc}
 8001364:	08008f88 	.word	0x08008f88
 8001368:	08008fec 	.word	0x08008fec
 800136c:	20000070 	.word	0x20000070
 8001370:	200000b8 	.word	0x200000b8
 8001374:	20000100 	.word	0x20000100

08001378 <playNote>:

void playNote(struct Note note, float basespeed) {
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	e883 0003 	stmia.w	r3, {r0, r1}
 8001386:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(100);
 800138a:	2064      	movs	r0, #100	@ 0x64
 800138c:	f002 fe0e 	bl	8003fac <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001390:	2100      	movs	r1, #0
 8001392:	481a      	ldr	r0, [pc, #104]	@ (80013fc <playNote+0x84>)
 8001394:	f006 fcbc 	bl	8007d10 <HAL_TIM_PWM_Stop>
	if (note.freq!=0) HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <playNote+0x2e>
 800139e:	2100      	movs	r1, #0
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <playNote+0x84>)
 80013a2:	f006 fbed 	bl	8007b80 <HAL_TIM_PWM_Start>
	TIM3->ARR = note.freq;
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <playNote+0x88>)
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR1 = TIM3->ARR * 0.5;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <playNote+0x88>)
 80013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f987 	bl	80006c4 <__aeabi_ui2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <playNote+0x8c>)
 80013bc:	f7fe ff16 	bl	80001ec <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4c0e      	ldr	r4, [pc, #56]	@ (8001400 <playNote+0x88>)
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff f9f5 	bl	80007b8 <__aeabi_d2uiz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	6363      	str	r3, [r4, #52]	@ 0x34
	HAL_Delay((int)1000*basespeed * note.dur);
 80013d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001408 <playNote+0x90>
 80013da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013de:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ea:	ee17 0a90 	vmov	r0, s15
 80013ee:	f002 fddd 	bl	8003fac <HAL_Delay>
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002dc 	.word	0x200002dc
 8001400:	40000400 	.word	0x40000400
 8001404:	3fe00000 	.word	0x3fe00000
 8001408:	447a0000 	.word	0x447a0000

0800140c <readAnalogStickx>:

int readAnalogStickx(uint32_t value, int* val) {
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	int new_val;
	if (value > 3200) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 800141c:	d902      	bls.n	8001424 <readAnalogStickx+0x18>
		new_val = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e00a      	b.n	800143a <readAnalogStickx+0x2e>
	}
	else if (value < 3000) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800142a:	4293      	cmp	r3, r2
 800142c:	d803      	bhi.n	8001436 <readAnalogStickx+0x2a>
		new_val = -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e001      	b.n	800143a <readAnalogStickx+0x2e>
	}
	else new_val = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
	if (*val!=new_val){
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d004      	beq.n	800144e <readAnalogStickx+0x42>
		*val=new_val;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]
		return 1;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <readAnalogStickx+0x44>
	}
	return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <readAnalogSticky>:

int readAnalogSticky(uint32_t value, int* val) {
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	int new_val;
	if (value > 3400) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f640 5248 	movw	r2, #3400	@ 0xd48
 800146c:	4293      	cmp	r3, r2
 800146e:	d903      	bls.n	8001478 <readAnalogSticky+0x1c>
		new_val = -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e008      	b.n	800148a <readAnalogSticky+0x2e>
	}
	else if (value < 2800) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800147e:	d202      	bcs.n	8001486 <readAnalogSticky+0x2a>
		new_val = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e001      	b.n	800148a <readAnalogSticky+0x2e>
	}
	else new_val = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
	if (*val!=new_val){
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d004      	beq.n	800149e <readAnalogSticky+0x42>
		*val=new_val;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]
		return 1;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <readAnalogSticky+0x44>
	}
	return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <readButton>:

int readButton(int *val) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	int new_val;
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 80014b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b8:	4810      	ldr	r0, [pc, #64]	@ (80014fc <readButton+0x50>)
 80014ba:	f004 f901 	bl	80056c0 <HAL_GPIO_ReadPin>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d102      	bne.n	80014ca <readButton+0x1e>
		new_val = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e009      	b.n	80014de <readButton+0x32>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80014ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ce:	480b      	ldr	r0, [pc, #44]	@ (80014fc <readButton+0x50>)
 80014d0:	f004 f8f6 	bl	80056c0 <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <readButton+0x32>
		new_val = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
	}
	if (*val != new_val) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d004      	beq.n	80014f2 <readButton+0x46>
		*val = new_val;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	601a      	str	r2, [r3, #0]
		return 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <readButton+0x48>
	}
	return 0;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020400 	.word	0x40020400

08001500 <readPotentiometer>:

int readPotentiometer(int *val) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint32_t value = HAL_ADC_GetValue(&hadc3);
 8001508:	4815      	ldr	r0, [pc, #84]	@ (8001560 <readPotentiometer+0x60>)
 800150a:	f002 fe89 	bl	8004220 <HAL_ADC_GetValue>
 800150e:	60b8      	str	r0, [r7, #8]
	int new_val;
	if (value > 3200) {
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8001516:	d902      	bls.n	800151e <readPotentiometer+0x1e>
		new_val = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e010      	b.n	8001540 <readPotentiometer+0x40>
	}
	else if (value < 3200 && value > 700) {
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8001524:	d206      	bcs.n	8001534 <readPotentiometer+0x34>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800152c:	d902      	bls.n	8001534 <readPotentiometer+0x34>
		new_val = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e005      	b.n	8001540 <readPotentiometer+0x40>
	}
	else if (value < 700) {
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800153a:	d201      	bcs.n	8001540 <readPotentiometer+0x40>
		new_val = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
	}
	if (*val != new_val) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d004      	beq.n	8001554 <readPotentiometer+0x54>
		*val = new_val;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]
		return 1;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <readPotentiometer+0x56>
	}
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000100 	.word	0x20000100

08001564 <playSong>:

void playSong(struct Song song, float speed) {
 8001564:	b084      	sub	sp, #16
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	f107 0c18 	add.w	ip, r7, #24
 8001570:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001574:	ed87 0a01 	vstr	s0, [r7, #4]
	float basespeed;
	if (speed == 0) {
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	d102      	bne.n	800158c <playSong+0x28>
		basespeed = 0.5;
 8001586:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800158a:	60fb      	str	r3, [r7, #12]
	}
	if (speed == 1) {
 800158c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001594:	eef4 7a47 	vcmp.f32	s15, s14
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d102      	bne.n	80015a4 <playSong+0x40>
		basespeed = 1.0;
 800159e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80015a2:	60fb      	str	r3, [r7, #12]
	}
	if (speed == 2) {
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015ac:	eef4 7a47 	vcmp.f32	s15, s14
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	d102      	bne.n	80015bc <playSong+0x58>
		basespeed = 2.0;
 80015b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ba:	60fb      	str	r3, [r7, #12]
	}
	for (int i = 0; i < song.length; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	e00c      	b.n	80015dc <playSong+0x78>
		playNote(song.notes[i], basespeed);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	ed97 0a03 	vldr	s0, [r7, #12]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	3318      	adds	r3, #24
 80015cc:	443b      	add	r3, r7
 80015ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015d2:	f7ff fed1 	bl	8001378 <playNote>
	for (int i = 0; i < song.length; i++) {
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3301      	adds	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80015e0:	f103 0318 	add.w	r3, r3, #24
 80015e4:	f8d3 3f40 	ldr.w	r3, [r3, #3904]	@ 0xf40
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbe9      	blt.n	80015c2 <playSong+0x5e>
	}
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015fa:	b004      	add	sp, #16
 80015fc:	4770      	bx	lr
	...

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	ed2d 8b02 	vpush	{d8}
 8001606:	f5ad 5d7a 	sub.w	sp, sp, #16000	@ 0x3e80
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	f641 7738 	movw	r7, #7992	@ 0x1f38
 8001610:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f002 fc59 	bl	8003ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f94f 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161a:	f000 fd31 	bl	8002080 <MX_GPIO_Init>
  MX_ADC2_Init();
 800161e:	f000 fa09 	bl	8001a34 <MX_ADC2_Init>
  MX_TIM6_Init();
 8001622:	f000 fcab 	bl	8001f7c <MX_TIM6_Init>
  MX_TIM4_Init();
 8001626:	f000 fc5d 	bl	8001ee4 <MX_TIM4_Init>
  MX_FMC_Init();
 800162a:	f000 fcdb 	bl	8001fe4 <MX_FMC_Init>
  MX_LTDC_Init();
 800162e:	f000 fb17 	bl	8001c60 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001632:	f000 faa3 	bl	8001b7c <MX_DMA2D_Init>
  MX_I2C3_Init();
 8001636:	f000 fad3 	bl	8001be0 <MX_I2C3_Init>
  MX_SPI5_Init();
 800163a:	f000 fbc3 	bl	8001dc4 <MX_SPI5_Init>
  MX_ADC1_Init();
 800163e:	f000 f9a7 	bl	8001990 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001642:	f000 fa49 	bl	8001ad8 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001646:	f000 fbf3 	bl	8001e30 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int on=0; // Zmienna przechowująca stan przycisku włączania
 800164a:	2300      	movs	r3, #0
 800164c:	f507 52fb 	add.w	r2, r7, #8032	@ 0x1f60
 8001650:	f102 0204 	add.w	r2, r2, #4
 8001654:	6013      	str	r3, [r2, #0]
  // Glosnik: PB4
  int valuex; // PA5
  int valuey; // PA7
  int option=0;
 8001656:	2300      	movs	r3, #0
 8001658:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 800165c:	f102 0214 	add.w	r2, r2, #20
 8001660:	6013      	str	r3, [r2, #0]
  int potval=0; // PF6
 8001662:	2300      	movs	r3, #0
 8001664:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8001668:	f102 0210 	add.w	r2, r2, #16
 800166c:	6013      	str	r3, [r2, #0]
  int valueButton = 0; // PB13
 800166e:	2300      	movs	r3, #0
 8001670:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8001674:	f102 020c 	add.w	r2, r2, #12
 8001678:	6013      	str	r3, [r2, #0]
  int phvi =0;
 800167a:	2300      	movs	r3, #0
 800167c:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8001680:	f102 0208 	add.w	r2, r2, #8
 8001684:	6013      	str	r3, [r2, #0]
  float phvf =0;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 800168e:	f102 0204 	add.w	r2, r2, #4
 8001692:	6013      	str	r3, [r2, #0]
  struct Song song;
  int x = 25;
 8001694:	2319      	movs	r3, #25
 8001696:	f507 52fb 	add.w	r2, r7, #8032	@ 0x1f60
 800169a:	6013      	str	r3, [r2, #0]

  BSP_LCD_Init();
 800169c:	f001 fdd2 	bl	8003244 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80016a0:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80016a4:	2000      	movs	r0, #0
 80016a6:	f001 fe4f 	bl	8003348 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80016aa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80016ae:	f001 ff11 	bl	80034d4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80016b2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80016b6:	f001 fec3 	bl	8003440 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295
 80016be:	f001 fea7 	bl	8003410 <BSP_LCD_SetTextColor>
  Display(0, &option,&phvi,&phvf);
 80016c2:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 80016c6:	f103 0304 	add.w	r3, r3, #4
 80016ca:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 80016ce:	f102 0208 	add.w	r2, r2, #8
 80016d2:	f507 51fa 	add.w	r1, r7, #8000	@ 0x1f40
 80016d6:	f101 0114 	add.w	r1, r1, #20
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fab8 	bl	8000c50 <Display>
  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"                  ");
 80016e0:	496e      	ldr	r1, [pc, #440]	@ (800189c <main+0x29c>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f002 f820 	bl	8003728 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(0, (uint8_t*)"No song recorded");
 80016e8:	496d      	ldr	r1, [pc, #436]	@ (80018a0 <main+0x2a0>)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f002 f81c 	bl	8003728 <BSP_LCD_DisplayStringAtLine>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //wartosc zegara prc: 79 counter_period: 999 pulse: 499
 80016f0:	2100      	movs	r1, #0
 80016f2:	486c      	ldr	r0, [pc, #432]	@ (80018a4 <main+0x2a4>)
 80016f4:	f006 fa44 	bl	8007b80 <HAL_TIM_PWM_Start>
  while (1)
  {
	 if (HAL_GPIO_ReadPin(GPIOG,  GPIO_PIN_14)==GPIO_PIN_SET) {
 80016f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016fc:	486a      	ldr	r0, [pc, #424]	@ (80018a8 <main+0x2a8>)
 80016fe:	f003 ffdf 	bl	80056c0 <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	2b01      	cmp	r3, #1
 8001706:	d12b      	bne.n	8001760 <main+0x160>
		 if (on) {
 8001708:	f507 53fb 	add.w	r3, r7, #8032	@ 0x1f60
 800170c:	f103 0304 	add.w	r3, r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <main+0x136>
			 on = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f507 52fb 	add.w	r2, r7, #8032	@ 0x1f60
 800171c:	f102 0204 	add.w	r2, r2, #4
 8001720:	6013      	str	r3, [r2, #0]
			 Display(2, &option,0,0);
 8001722:	f507 51fa 	add.w	r1, r7, #8000	@ 0x1f40
 8001726:	f101 0114 	add.w	r1, r1, #20
 800172a:	2300      	movs	r3, #0
 800172c:	2200      	movs	r2, #0
 800172e:	2002      	movs	r0, #2
 8001730:	f7ff fa8e 	bl	8000c50 <Display>
 8001734:	e00e      	b.n	8001754 <main+0x154>
		 }
		 else {
			 on = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	f507 52fb 	add.w	r2, r7, #8032	@ 0x1f60
 800173c:	f102 0204 	add.w	r2, r2, #4
 8001740:	6013      	str	r3, [r2, #0]
			 Display(0, &option,0,0);
 8001742:	f507 51fa 	add.w	r1, r7, #8000	@ 0x1f40
 8001746:	f101 0114 	add.w	r1, r1, #20
 800174a:	2300      	movs	r3, #0
 800174c:	2200      	movs	r2, #0
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fa7e 	bl	8000c50 <Display>
		 }
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800175a:	4853      	ldr	r0, [pc, #332]	@ (80018a8 <main+0x2a8>)
 800175c:	f003 ffc8 	bl	80056f0 <HAL_GPIO_WritePin>
	 }
	 if (on) {
 8001760:	f507 53fb 	add.w	r3, r7, #8032	@ 0x1f60
 8001764:	f103 0304 	add.w	r3, r3, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01f      	beq.n	80017ae <main+0x1ae>
		 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800176e:	2100      	movs	r1, #0
 8001770:	484c      	ldr	r0, [pc, #304]	@ (80018a4 <main+0x2a4>)
 8001772:	f006 fa05 	bl	8007b80 <HAL_TIM_PWM_Start>
		 playSong(song, potval);
 8001776:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 800177a:	f103 0310 	add.w	r3, r3, #16
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001788:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 800178c:	f6a3 7468 	subw	r4, r3, #3944	@ 0xf68
 8001790:	4668      	mov	r0, sp
 8001792:	f104 0310 	add.w	r3, r4, #16
 8001796:	f641 7234 	movw	r2, #7988	@ 0x1f34
 800179a:	4619      	mov	r1, r3
 800179c:	f007 fac6 	bl	8008d2c <memcpy>
 80017a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017a4:	eeb0 0a48 	vmov.f32	s0, s16
 80017a8:	f7ff fedc 	bl	8001564 <playSong>
 80017ac:	e003      	b.n	80017b6 <main+0x1b6>
	 }
	 else {
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80017ae:	2100      	movs	r1, #0
 80017b0:	483c      	ldr	r0, [pc, #240]	@ (80018a4 <main+0x2a4>)
 80017b2:	f006 faad 	bl	8007d10 <HAL_TIM_PWM_Stop>
	 }
	 HAL_ADC_Start(&hadc1);
 80017b6:	483d      	ldr	r0, [pc, #244]	@ (80018ac <main+0x2ac>)
 80017b8:	f002 fc60 	bl	800407c <HAL_ADC_Start>
	 HAL_ADC_Start(&hadc2);
 80017bc:	483c      	ldr	r0, [pc, #240]	@ (80018b0 <main+0x2b0>)
 80017be:	f002 fc5d 	bl	800407c <HAL_ADC_Start>
	 HAL_ADC_Start(&hadc3);
 80017c2:	483c      	ldr	r0, [pc, #240]	@ (80018b4 <main+0x2b4>)
 80017c4:	f002 fc5a 	bl	800407c <HAL_ADC_Start>
	 readAnalogStickx(HAL_ADC_GetValue(&hadc1), &valuex);
 80017c8:	4838      	ldr	r0, [pc, #224]	@ (80018ac <main+0x2ac>)
 80017ca:	f002 fd29 	bl	8004220 <HAL_ADC_GetValue>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 80017d4:	f103 031c 	add.w	r3, r3, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f7ff fe16 	bl	800140c <readAnalogStickx>
	 readAnalogSticky(HAL_ADC_GetValue(&hadc2), &valuey);
 80017e0:	4833      	ldr	r0, [pc, #204]	@ (80018b0 <main+0x2b0>)
 80017e2:	f002 fd1d 	bl	8004220 <HAL_ADC_GetValue>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 80017ec:	f103 0318 	add.w	r3, r3, #24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f7ff fe32 	bl	800145c <readAnalogSticky>
	 readButton(&valueButton);
 80017f8:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 80017fc:	f103 030c 	add.w	r3, r3, #12
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe53 	bl	80014ac <readButton>
	 if (Action(&option, &valuex, &valuey, &valueButton, 0,0,0) == 2) {
 8001806:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 800180a:	f103 030c 	add.w	r3, r3, #12
 800180e:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8001812:	f102 0218 	add.w	r2, r2, #24
 8001816:	f507 51fa 	add.w	r1, r7, #8000	@ 0x1f40
 800181a:	f101 011c 	add.w	r1, r1, #28
 800181e:	f507 50fa 	add.w	r0, r7, #8000	@ 0x1f40
 8001822:	f100 0014 	add.w	r0, r0, #20
 8001826:	2400      	movs	r4, #0
 8001828:	9402      	str	r4, [sp, #8]
 800182a:	2400      	movs	r4, #0
 800182c:	9401      	str	r4, [sp, #4]
 800182e:	2400      	movs	r4, #0
 8001830:	9400      	str	r4, [sp, #0]
 8001832:	f7ff f959 	bl	8000ae8 <Action>
 8001836:	4603      	mov	r3, r0
 8001838:	2b02      	cmp	r3, #2
 800183a:	d126      	bne.n	800188a <main+0x28a>
		 song = registerSong(&option, &valuex, &valuey, &valueButton);
 800183c:	f607 7368 	addw	r3, r7, #3944	@ 0xf68
 8001840:	f6a3 7068 	subw	r0, r3, #3944	@ 0xf68
 8001844:	f507 54fa 	add.w	r4, r7, #8000	@ 0x1f40
 8001848:	f104 0418 	add.w	r4, r4, #24
 800184c:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8001850:	f102 021c 	add.w	r2, r2, #28
 8001854:	f507 51fa 	add.w	r1, r7, #8000	@ 0x1f40
 8001858:	f101 0114 	add.w	r1, r1, #20
 800185c:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8001860:	f103 030c 	add.w	r3, r3, #12
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4623      	mov	r3, r4
 8001868:	f7ff fc08 	bl	800107c <registerSong>
		 on = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	f507 52fb 	add.w	r2, r7, #8032	@ 0x1f60
 8001872:	f102 0204 	add.w	r2, r2, #4
 8001876:	6013      	str	r3, [r2, #0]
		 Display(0, &option,0,0);
 8001878:	f507 51fa 	add.w	r1, r7, #8000	@ 0x1f40
 800187c:	f101 0114 	add.w	r1, r1, #20
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff f9e3 	bl	8000c50 <Display>
	 }
	 readPotentiometer(&potval);
 800188a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 800188e:	f103 0310 	add.w	r3, r3, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe34 	bl	8001500 <readPotentiometer>
	 if (HAL_GPIO_ReadPin(GPIOG,  GPIO_PIN_14)==GPIO_PIN_SET) {
 8001898:	e72e      	b.n	80016f8 <main+0xf8>
 800189a:	bf00      	nop
 800189c:	08008d98 	.word	0x08008d98
 80018a0:	08009000 	.word	0x08009000
 80018a4:	200002dc 	.word	0x200002dc
 80018a8:	40021800 	.word	0x40021800
 80018ac:	20000070 	.word	0x20000070
 80018b0:	200000b8 	.word	0x200000b8
 80018b4:	20000100 	.word	0x20000100

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b094      	sub	sp, #80	@ 0x50
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	2230      	movs	r2, #48	@ 0x30
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f007 fa04 	bl	8008cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <SystemClock_Config+0xd0>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <SystemClock_Config+0xd0>)
 80018e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ec:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <SystemClock_Config+0xd0>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <SystemClock_Config+0xd4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001904:	4a21      	ldr	r2, [pc, #132]	@ (800198c <SystemClock_Config+0xd4>)
 8001906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <SystemClock_Config+0xd4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001922:	2302      	movs	r3, #2
 8001924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800192c:	2310      	movs	r3, #16
 800192e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001930:	23b4      	movs	r3, #180	@ 0xb4
 8001932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001938:	2304      	movs	r3, #4
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fba3 	bl	800608c <HAL_RCC_OscConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800194c:	f000 fc64 	bl	8002218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001950:	230f      	movs	r3, #15
 8001952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800195c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2101      	movs	r1, #1
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fe04 	bl	800657c <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800197a:	f000 fc4d 	bl	8002218 <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3750      	adds	r7, #80	@ 0x50
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019a4:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <MX_ADC1_Init+0x9c>)
 80019a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019d0:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <MX_ADC1_Init+0xa0>)
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019dc:	2201      	movs	r2, #1
 80019de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ee:	480e      	ldr	r0, [pc, #56]	@ (8001a28 <MX_ADC1_Init+0x98>)
 80019f0:	f002 fb00 	bl	8003ff4 <HAL_ADC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019fa:	f000 fc0d 	bl	8002218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019fe:	2305      	movs	r3, #5
 8001a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <MX_ADC1_Init+0x98>)
 8001a10:	f002 fc14 	bl	800423c <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a1a:	f000 fbfd 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000070 	.word	0x20000070
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	0f000001 	.word	0x0f000001

08001a34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a46:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a48:	4a21      	ldr	r2, [pc, #132]	@ (8001ad0 <MX_ADC2_Init+0x9c>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a74:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <MX_ADC2_Init+0xa0>)
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001a94:	f002 faae 	bl	8003ff4 <HAL_ADC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001a9e:	f000 fbbb 	bl	8002218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	@ (8001acc <MX_ADC2_Init+0x98>)
 8001ab4:	f002 fbc2 	bl	800423c <HAL_ADC_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001abe:	f000 fbab 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200000b8 	.word	0x200000b8
 8001ad0:	40012100 	.word	0x40012100
 8001ad4:	0f000001 	.word	0x0f000001

08001ad8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001aec:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <MX_ADC3_Init+0x9c>)
 8001aee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <MX_ADC3_Init+0xa0>)
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b22:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b38:	f002 fa5c 	bl	8003ff4 <HAL_ADC_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fb69 	bl	8002218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b46:	2304      	movs	r3, #4
 8001b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <MX_ADC3_Init+0x98>)
 8001b58:	f002 fb70 	bl	800423c <HAL_ADC_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f000 fb59 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000100 	.word	0x20000100
 8001b74:	40012200 	.word	0x40012200
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001b82:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <MX_DMA2D_Init+0x60>)
 8001b84:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001b8e:	2202      	movs	r2, #2
 8001b90:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001bb0:	4809      	ldr	r0, [pc, #36]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001bb2:	f003 f841 	bl	8004c38 <HAL_DMA2D_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001bbc:	f000 fb2c 	bl	8002218 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_DMA2D_Init+0x5c>)
 8001bc4:	f003 f996 	bl	8004ef4 <HAL_DMA2D_ConfigLayer>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001bce:	f000 fb23 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000148 	.word	0x20000148
 8001bdc:	4002b000 	.word	0x4002b000

08001be0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <MX_I2C3_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <MX_I2C3_Init+0x7c>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c1e:	f003 fda5 	bl	800576c <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 faf6 	bl	8002218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c30:	f003 fee0 	bl	80059f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3a:	f000 faed 	bl	8002218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <MX_I2C3_Init+0x74>)
 8001c42:	f003 ff13 	bl	8005a6c <HAL_I2CEx_ConfigDigitalFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c4c:	f000 fae4 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000188 	.word	0x20000188
 8001c58:	40005c00 	.word	0x40005c00
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09a      	sub	sp, #104	@ 0x68
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001c66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c6a:	2234      	movs	r2, #52	@ 0x34
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 f830 	bl	8008cd4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2234      	movs	r2, #52	@ 0x34
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f007 f82a 	bl	8008cd4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001c80:	4b4e      	ldr	r3, [pc, #312]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001c82:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc0 <MX_LTDC_Init+0x160>)
 8001c84:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c86:	4b4d      	ldr	r3, [pc, #308]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c92:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c98:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001ca4:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001caa:	4b44      	ldr	r3, [pc, #272]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cac:	220e      	movs	r2, #14
 8001cae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001cb0:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cb8:	f240 228e 	movw	r2, #654	@ 0x28e
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cc0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cc8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cd0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001cde:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ce6:	4b35      	ldr	r3, [pc, #212]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001cee:	4833      	ldr	r0, [pc, #204]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001cf0:	f003 fefc 	bl	8005aec <HAL_LTDC_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001cfa:	f000 fa8d 	bl	8002218 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d20:	2305      	movs	r3, #5
 8001d22:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d46:	2200      	movs	r2, #0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481c      	ldr	r0, [pc, #112]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001d4c:	f003 ff9e 	bl	8005c8c <HAL_LTDC_ConfigLayer>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001d56:	f000 fa5f 	bl	8002218 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d7a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_LTDC_Init+0x15c>)
 8001da6:	f003 ff71 	bl	8005c8c <HAL_LTDC_ConfigLayer>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001db0:	f000 fa32 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3768      	adds	r7, #104	@ 0x68
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200001dc 	.word	0x200001dc
 8001dc0:	40016800 	.word	0x40016800

08001dc4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001dca:	4a18      	ldr	r2, [pc, #96]	@ (8001e2c <MX_SPI5_Init+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001dd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dd4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001e10:	220a      	movs	r2, #10
 8001e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e14:	4804      	ldr	r0, [pc, #16]	@ (8001e28 <MX_SPI5_Init+0x64>)
 8001e16:	f005 f80e 	bl	8006e36 <HAL_SPI_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e20:	f000 f9fa 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000284 	.word	0x20000284
 8001e2c:	40015000 	.word	0x40015000

08001e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e52:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e54:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <MX_TIM3_Init+0xb0>)
 8001e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001e58:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e5a:	224f      	movs	r2, #79	@ 0x4f
 8001e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e78:	4818      	ldr	r0, [pc, #96]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e7a:	f005 fe32 	bl	8007ae2 <HAL_TIM_PWM_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001e84:	f000 f9c8 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	4619      	mov	r1, r3
 8001e96:	4811      	ldr	r0, [pc, #68]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001e98:	f006 fd72 	bl	8008980 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ea2:	f000 f9b9 	bl	8002218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	@ 0x60
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001eaa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001ec0:	f006 f886 	bl	8007fd0 <HAL_TIM_PWM_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001eca:	f000 f9a5 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ece:	4803      	ldr	r0, [pc, #12]	@ (8001edc <MX_TIM3_Init+0xac>)
 8001ed0:	f000 fcf8 	bl	80028c4 <HAL_TIM_MspPostInit>

}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	@ 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200002dc 	.word	0x200002dc
 8001ee0:	40000400 	.word	0x40000400

08001ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f02:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <MX_TIM4_Init+0x94>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f08:	220f      	movs	r2, #15
 8001f0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f24:	4813      	ldr	r0, [pc, #76]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f26:	f005 fd8d 	bl	8007a44 <HAL_TIM_Base_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001f30:	f000 f972 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f42:	f006 f907 	bl	8008154 <HAL_TIM_ConfigClockSource>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001f4c:	f000 f964 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_TIM4_Init+0x90>)
 8001f5e:	f006 fd0f 	bl	8008980 <HAL_TIMEx_MasterConfigSynchronization>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001f68:	f000 f956 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000324 	.word	0x20000324
 8001f78:	40000800 	.word	0x40000800

08001f7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f82:	463b      	mov	r3, r7
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <MX_TIM6_Init+0x64>)
 8001f8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001faa:	f005 fd4b 	bl	8007a44 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001fb4:	f000 f930 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_TIM6_Init+0x60>)
 8001fc6:	f006 fcdb 	bl	8008980 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001fd0:	f000 f922 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	2000036c 	.word	0x2000036c
 8001fe0:	40001000 	.word	0x40001000

08001fe4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_FMC_Init+0x94>)
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <MX_FMC_Init+0x98>)
 8002000:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002002:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <MX_FMC_Init+0x94>)
 8002004:	2201      	movs	r2, #1
 8002006:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_FMC_Init+0x94>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_FMC_Init+0x94>)
 8002010:	2204      	movs	r2, #4
 8002012:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_FMC_Init+0x94>)
 8002016:	2210      	movs	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <MX_FMC_Init+0x94>)
 800201c:	2240      	movs	r2, #64	@ 0x40
 800201e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_FMC_Init+0x94>)
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_FMC_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <MX_FMC_Init+0x94>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_FMC_Init+0x94>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_FMC_Init+0x94>)
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800203e:	2310      	movs	r3, #16
 8002040:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002042:	2310      	movs	r3, #16
 8002044:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002046:	2310      	movs	r3, #16
 8002048:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800204a:	2310      	movs	r3, #16
 800204c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800204e:	2310      	movs	r3, #16
 8002050:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002052:	2310      	movs	r3, #16
 8002054:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002056:	2310      	movs	r3, #16
 8002058:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	@ (8002078 <MX_FMC_Init+0x94>)
 8002060:	f004 fe58 	bl	8006d14 <HAL_SDRAM_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800206a:	f000 f8d5 	bl	8002218 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003b4 	.word	0x200003b4
 800207c:	a0000140 	.word	0xa0000140

08002080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08e      	sub	sp, #56	@ 0x38
 8002084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <MX_GPIO_Init+0x188>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a5a      	ldr	r2, [pc, #360]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b58      	ldr	r3, [pc, #352]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	623b      	str	r3, [r7, #32]
 80020b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	4b54      	ldr	r3, [pc, #336]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a53      	ldr	r2, [pc, #332]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b51      	ldr	r3, [pc, #324]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b4a      	ldr	r3, [pc, #296]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a45      	ldr	r2, [pc, #276]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <MX_GPIO_Init+0x188>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <MX_GPIO_Init+0x188>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a3e      	ldr	r2, [pc, #248]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a37      	ldr	r2, [pc, #220]	@ (8002208 <MX_GPIO_Init+0x188>)
 800212c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a30      	ldr	r2, [pc, #192]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002148:	f043 0310 	orr.w	r3, r3, #16
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <MX_GPIO_Init+0x188>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <MX_GPIO_Init+0x188>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800217c:	4823      	ldr	r0, [pc, #140]	@ (800220c <MX_GPIO_Init+0x18c>)
 800217e:	f003 fab7 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002186:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002194:	4619      	mov	r1, r3
 8002196:	481e      	ldr	r0, [pc, #120]	@ (8002210 <MX_GPIO_Init+0x190>)
 8002198:	f002 ffda 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800219c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4818      	ldr	r0, [pc, #96]	@ (8002214 <MX_GPIO_Init+0x194>)
 80021b2:	f002 ffcd 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021bc:	2303      	movs	r3, #3
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4812      	ldr	r0, [pc, #72]	@ (8002214 <MX_GPIO_Init+0x194>)
 80021cc:	f002 ffc0 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4808      	ldr	r0, [pc, #32]	@ (800220c <MX_GPIO_Init+0x18c>)
 80021ea:	f002 ffb1 	bl	8005150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	2006      	movs	r0, #6
 80021f4:	f002 fb2b 	bl	800484e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021f8:	2006      	movs	r0, #6
 80021fa:	f002 fb44 	bl	8004886 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021fe:	bf00      	nop
 8002200:	3738      	adds	r7, #56	@ 0x38
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40021800 	.word	0x40021800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020400 	.word	0x40020400

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <Error_Handler+0x8>

08002224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_MspInit+0x4c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_MspInit+0x4c>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002238:	6453      	str	r3, [r2, #68]	@ 0x44
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <HAL_MspInit+0x4c>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	@ 0x40
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08e      	sub	sp, #56	@ 0x38
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a45      	ldr	r2, [pc, #276]	@ (80023a8 <HAL_ADC_MspInit+0x134>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d128      	bne.n	80022e8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	4b44      	ldr	r3, [pc, #272]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	4a43      	ldr	r2, [pc, #268]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a6:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a3c      	ldr	r2, [pc, #240]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022ce:	2320      	movs	r3, #32
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d2:	2303      	movs	r3, #3
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	4833      	ldr	r0, [pc, #204]	@ (80023b0 <HAL_ADC_MspInit+0x13c>)
 80022e2:	f002 ff35 	bl	8005150 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80022e6:	e05a      	b.n	800239e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a31      	ldr	r2, [pc, #196]	@ (80023b4 <HAL_ADC_MspInit+0x140>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d128      	bne.n	8002344 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4a2c      	ldr	r2, [pc, #176]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 80022fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002300:	6453      	str	r3, [r2, #68]	@ 0x44
 8002302:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a25      	ldr	r2, [pc, #148]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800233a:	4619      	mov	r1, r3
 800233c:	481c      	ldr	r0, [pc, #112]	@ (80023b0 <HAL_ADC_MspInit+0x13c>)
 800233e:	f002 ff07 	bl	8005150 <HAL_GPIO_Init>
}
 8002342:	e02c      	b.n	800239e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_ADC_MspInit+0x144>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d127      	bne.n	800239e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4a15      	ldr	r2, [pc, #84]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235c:	6453      	str	r3, [r2, #68]	@ 0x44
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a0e      	ldr	r2, [pc, #56]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <HAL_ADC_MspInit+0x138>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002386:	2340      	movs	r3, #64	@ 0x40
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	4808      	ldr	r0, [pc, #32]	@ (80023bc <HAL_ADC_MspInit+0x148>)
 800239a:	f002 fed9 	bl	8005150 <HAL_GPIO_Init>
}
 800239e:	bf00      	nop
 80023a0:	3738      	adds	r7, #56	@ 0x38
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40012000 	.word	0x40012000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40012100 	.word	0x40012100
 80023b8:	40012200 	.word	0x40012200
 80023bc:	40021400 	.word	0x40021400

080023c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0b      	ldr	r2, [pc, #44]	@ (80023fc <HAL_DMA2D_MspInit+0x3c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10d      	bne.n	80023ee <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_DMA2D_MspInit+0x40>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a09      	ldr	r2, [pc, #36]	@ (8002400 <HAL_DMA2D_MspInit+0x40>)
 80023dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_DMA2D_MspInit+0x40>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	4002b000 	.word	0x4002b000
 8002400:	40023800 	.word	0x40023800

08002404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a29      	ldr	r2, [pc, #164]	@ (80024c8 <HAL_I2C_MspInit+0xc4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d14b      	bne.n	80024be <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b28      	ldr	r3, [pc, #160]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a20      	ldr	r2, [pc, #128]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800245e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002464:	2312      	movs	r3, #18
 8002466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002470:	2304      	movs	r3, #4
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4815      	ldr	r0, [pc, #84]	@ (80024d0 <HAL_I2C_MspInit+0xcc>)
 800247c:	f002 fe68 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002486:	2312      	movs	r3, #18
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002492:	2304      	movs	r3, #4
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	480d      	ldr	r0, [pc, #52]	@ (80024d4 <HAL_I2C_MspInit+0xd0>)
 800249e:	f002 fe57 	bl	8005150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a08      	ldr	r2, [pc, #32]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 80024ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_I2C_MspInit+0xc8>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	@ 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40005c00 	.word	0x40005c00
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b09a      	sub	sp, #104	@ 0x68
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f4:	2230      	movs	r2, #48	@ 0x30
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f006 fbeb 	bl	8008cd4 <memset>
  if(hltdc->Instance==LTDC)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a81      	ldr	r2, [pc, #516]	@ (8002708 <HAL_LTDC_MspInit+0x230>)
 8002504:	4293      	cmp	r3, r2
 8002506:	f040 80fa 	bne.w	80026fe <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800250a:	2308      	movs	r3, #8
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 800250e:	2331      	movs	r3, #49	@ 0x31
 8002510:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002512:	2302      	movs	r3, #2
 8002514:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002516:	2300      	movs	r3, #0
 8002518:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fa38 	bl	8006994 <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800252a:	f7ff fe75 	bl	8002218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	4b76      	ldr	r3, [pc, #472]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a75      	ldr	r2, [pc, #468]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002538:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b73      	ldr	r3, [pc, #460]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a6e      	ldr	r2, [pc, #440]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b6c      	ldr	r3, [pc, #432]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	4b68      	ldr	r3, [pc, #416]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a67      	ldr	r2, [pc, #412]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b65      	ldr	r3, [pc, #404]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	4b61      	ldr	r3, [pc, #388]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	4a60      	ldr	r2, [pc, #384]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	@ 0x30
 8002592:	4b5e      	ldr	r3, [pc, #376]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b5a      	ldr	r3, [pc, #360]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a59      	ldr	r2, [pc, #356]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b57      	ldr	r3, [pc, #348]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b50      	ldr	r3, [pc, #320]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b4c      	ldr	r3, [pc, #304]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	4a4b      	ldr	r2, [pc, #300]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e6:	4b49      	ldr	r3, [pc, #292]	@ (800270c <HAL_LTDC_MspInit+0x234>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002604:	230e      	movs	r3, #14
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002608:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800260c:	4619      	mov	r1, r3
 800260e:	4840      	ldr	r0, [pc, #256]	@ (8002710 <HAL_LTDC_MspInit+0x238>)
 8002610:	f002 fd9e 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002614:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002618:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002626:	230e      	movs	r3, #14
 8002628:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800262e:	4619      	mov	r1, r3
 8002630:	4838      	ldr	r0, [pc, #224]	@ (8002714 <HAL_LTDC_MspInit+0x23c>)
 8002632:	f002 fd8d 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002636:	2303      	movs	r3, #3
 8002638:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002646:	2309      	movs	r3, #9
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800264e:	4619      	mov	r1, r3
 8002650:	4831      	ldr	r0, [pc, #196]	@ (8002718 <HAL_LTDC_MspInit+0x240>)
 8002652:	f002 fd7d 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002656:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800265a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002668:	230e      	movs	r3, #14
 800266a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002670:	4619      	mov	r1, r3
 8002672:	4829      	ldr	r0, [pc, #164]	@ (8002718 <HAL_LTDC_MspInit+0x240>)
 8002674:	f002 fd6c 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002678:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800267c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800268a:	230e      	movs	r3, #14
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800268e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002692:	4619      	mov	r1, r3
 8002694:	4821      	ldr	r0, [pc, #132]	@ (800271c <HAL_LTDC_MspInit+0x244>)
 8002696:	f002 fd5b 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800269a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800269e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026ac:	230e      	movs	r3, #14
 80026ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026b4:	4619      	mov	r1, r3
 80026b6:	481a      	ldr	r0, [pc, #104]	@ (8002720 <HAL_LTDC_MspInit+0x248>)
 80026b8:	f002 fd4a 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80026bc:	2348      	movs	r3, #72	@ 0x48
 80026be:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026cc:	230e      	movs	r3, #14
 80026ce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026d4:	4619      	mov	r1, r3
 80026d6:	4813      	ldr	r0, [pc, #76]	@ (8002724 <HAL_LTDC_MspInit+0x24c>)
 80026d8:	f002 fd3a 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80026dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026ee:	2309      	movs	r3, #9
 80026f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026f6:	4619      	mov	r1, r3
 80026f8:	4808      	ldr	r0, [pc, #32]	@ (800271c <HAL_LTDC_MspInit+0x244>)
 80026fa:	f002 fd29 	bl	8005150 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80026fe:	bf00      	nop
 8002700:	3768      	adds	r7, #104	@ 0x68
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40016800 	.word	0x40016800
 800270c:	40023800 	.word	0x40023800
 8002710:	40021400 	.word	0x40021400
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400
 800271c:	40021800 	.word	0x40021800
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00

08002728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_SPI_MspInit+0x84>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12c      	bne.n	80027a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <HAL_SPI_MspInit+0x88>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	4a17      	ldr	r2, [pc, #92]	@ (80027b0 <HAL_SPI_MspInit+0x88>)
 8002754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002758:	6453      	str	r3, [r2, #68]	@ 0x44
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <HAL_SPI_MspInit+0x88>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <HAL_SPI_MspInit+0x88>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a10      	ldr	r2, [pc, #64]	@ (80027b0 <HAL_SPI_MspInit+0x88>)
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <HAL_SPI_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002782:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002794:	2305      	movs	r3, #5
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <HAL_SPI_MspInit+0x8c>)
 80027a0:	f002 fcd6 	bl	8005150 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	@ 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40015000 	.word	0x40015000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40021400 	.word	0x40021400

080027b8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <HAL_SPI_MspDeInit+0x30>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10a      	bne.n	80027e0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_SPI_MspDeInit+0x34>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_SPI_MspDeInit+0x34>)
 80027d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027d4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80027d6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <HAL_SPI_MspDeInit+0x38>)
 80027dc:	f002 fe64 	bl	80054a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40015000 	.word	0x40015000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40021400 	.word	0x40021400

080027f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <HAL_TIM_PWM_MspInit+0x3c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10d      	bne.n	8002822 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_TIM_PWM_MspInit+0x40>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_TIM_PWM_MspInit+0x40>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	6413      	str	r3, [r2, #64]	@ 0x40
 8002816:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_TIM_PWM_MspInit+0x40>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40000400 	.word	0x40000400
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_TIM_Base_MspInit+0x80>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d116      	bne.n	8002878 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_TIM_Base_MspInit+0x84>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a1a      	ldr	r2, [pc, #104]	@ (80028bc <HAL_TIM_Base_MspInit+0x84>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <HAL_TIM_Base_MspInit+0x84>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201e      	movs	r0, #30
 800286c:	f001 ffef 	bl	800484e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002870:	201e      	movs	r0, #30
 8002872:	f002 f808 	bl	8004886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002876:	e01a      	b.n	80028ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <HAL_TIM_Base_MspInit+0x88>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d115      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_TIM_Base_MspInit+0x84>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a0c      	ldr	r2, [pc, #48]	@ (80028bc <HAL_TIM_Base_MspInit+0x84>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
 8002892:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <HAL_TIM_Base_MspInit+0x84>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	2036      	movs	r0, #54	@ 0x36
 80028a4:	f001 ffd3 	bl	800484e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028a8:	2036      	movs	r0, #54	@ 0x36
 80028aa:	f001 ffec 	bl	8004886 <HAL_NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40000800 	.word	0x40000800
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40001000 	.word	0x40001000

080028c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_TIM_MspPostInit+0x68>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d11d      	bne.n	8002922 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <HAL_TIM_MspPostInit+0x6c>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <HAL_TIM_MspPostInit+0x6c>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_TIM_MspPostInit+0x6c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002902:	2310      	movs	r3, #16
 8002904:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002912:	2302      	movs	r3, #2
 8002914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4619      	mov	r1, r3
 800291c:	4805      	ldr	r0, [pc, #20]	@ (8002934 <HAL_TIM_MspPostInit+0x70>)
 800291e:	f002 fc17 	bl	8005150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40000400 	.word	0x40000400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020400 	.word	0x40020400

08002938 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800294c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a3c <HAL_FMC_MspInit+0x104>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d16f      	bne.n	8002a34 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_FMC_MspInit+0x104>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4b38      	ldr	r3, [pc, #224]	@ (8002a40 <HAL_FMC_MspInit+0x108>)
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	4a37      	ldr	r2, [pc, #220]	@ (8002a40 <HAL_FMC_MspInit+0x108>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6393      	str	r3, [r2, #56]	@ 0x38
 800296a:	4b35      	ldr	r3, [pc, #212]	@ (8002a40 <HAL_FMC_MspInit+0x108>)
 800296c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002976:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800297a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002988:	230c      	movs	r3, #12
 800298a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	482c      	ldr	r0, [pc, #176]	@ (8002a44 <HAL_FMC_MspInit+0x10c>)
 8002992:	f002 fbdd 	bl	8005150 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002996:	2301      	movs	r3, #1
 8002998:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029a6:	230c      	movs	r3, #12
 80029a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4826      	ldr	r0, [pc, #152]	@ (8002a48 <HAL_FMC_MspInit+0x110>)
 80029b0:	f002 fbce 	bl	8005150 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80029b4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80029b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029c6:	230c      	movs	r3, #12
 80029c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	481f      	ldr	r0, [pc, #124]	@ (8002a4c <HAL_FMC_MspInit+0x114>)
 80029d0:	f002 fbbe 	bl	8005150 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80029d4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e2:	2303      	movs	r3, #3
 80029e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e6:	230c      	movs	r3, #12
 80029e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4818      	ldr	r0, [pc, #96]	@ (8002a50 <HAL_FMC_MspInit+0x118>)
 80029f0:	f002 fbae 	bl	8005150 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80029f4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80029f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a06:	230c      	movs	r3, #12
 8002a08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4811      	ldr	r0, [pc, #68]	@ (8002a54 <HAL_FMC_MspInit+0x11c>)
 8002a10:	f002 fb9e 	bl	8005150 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a14:	2360      	movs	r3, #96	@ 0x60
 8002a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a24:	230c      	movs	r3, #12
 8002a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480a      	ldr	r0, [pc, #40]	@ (8002a58 <HAL_FMC_MspInit+0x120>)
 8002a2e:	f002 fb8f 	bl	8005150 <HAL_GPIO_Init>
 8002a32:	e000      	b.n	8002a36 <HAL_FMC_MspInit+0xfe>
    return;
 8002a34:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200003e8 	.word	0x200003e8
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40021400 	.word	0x40021400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40020400 	.word	0x40020400

08002a5c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a64:	f7ff ff68 	bl	8002938 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <NMI_Handler+0x4>

08002a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <HardFault_Handler+0x4>

08002a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <MemManage_Handler+0x4>

08002a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac6:	f001 fa51 	bl	8003f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ada:	4804      	ldr	r0, [pc, #16]	@ (8002aec <EXTI0_IRQHandler+0x1c>)
 8002adc:	f002 fe08 	bl	80056f0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f002 fe1f 	bl	8005724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021800 	.word	0x40021800

08002af0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <TIM4_IRQHandler+0x10>)
 8002af6:	f005 f97b 	bl	8007df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000324 	.word	0x20000324

08002b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <TIM6_DAC_IRQHandler+0x10>)
 8002b0a:	f005 f971 	bl	8007df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000036c 	.word	0x2000036c

08002b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <SystemInit+0x20>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <SystemInit+0x20>)
 8002b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
   ldr   sp, =_estack       /* set stack pointer */
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b40:	f7ff ffea 	bl	8002b18 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b44:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b46:	490d      	ldr	r1, [pc, #52]	@ (8002b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f006 f8bb 	bl	8008ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6e:	f7fe fd47 	bl	8001600 <main>
  bx  lr    
 8002b72:	4770      	bx	lr
   ldr   sp, =_estack       /* set stack pointer */
 8002b74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b7c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002b80:	0800aafc 	.word	0x0800aafc
  ldr r2, =_sbss
 8002b84:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002b88:	20000644 	.word	0x20000644

08002b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC_IRQHandler>

08002b8e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002b92:	f000 fa5d 	bl	8003050 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002b96:	20ca      	movs	r0, #202	@ 0xca
 8002b98:	f000 f95d 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002b9c:	20c3      	movs	r0, #195	@ 0xc3
 8002b9e:	f000 f967 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002ba2:	2008      	movs	r0, #8
 8002ba4:	f000 f964 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002ba8:	2050      	movs	r0, #80	@ 0x50
 8002baa:	f000 f961 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002bae:	20cf      	movs	r0, #207	@ 0xcf
 8002bb0:	f000 f951 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f000 f95b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002bba:	20c1      	movs	r0, #193	@ 0xc1
 8002bbc:	f000 f958 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002bc0:	2030      	movs	r0, #48	@ 0x30
 8002bc2:	f000 f955 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002bc6:	20ed      	movs	r0, #237	@ 0xed
 8002bc8:	f000 f945 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002bcc:	2064      	movs	r0, #100	@ 0x64
 8002bce:	f000 f94f 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f000 f94c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002bd8:	2012      	movs	r0, #18
 8002bda:	f000 f949 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002bde:	2081      	movs	r0, #129	@ 0x81
 8002be0:	f000 f946 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002be4:	20e8      	movs	r0, #232	@ 0xe8
 8002be6:	f000 f936 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002bea:	2085      	movs	r0, #133	@ 0x85
 8002bec:	f000 f940 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f000 f93d 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002bf6:	2078      	movs	r0, #120	@ 0x78
 8002bf8:	f000 f93a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002bfc:	20cb      	movs	r0, #203	@ 0xcb
 8002bfe:	f000 f92a 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002c02:	2039      	movs	r0, #57	@ 0x39
 8002c04:	f000 f934 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002c08:	202c      	movs	r0, #44	@ 0x2c
 8002c0a:	f000 f931 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f000 f92e 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002c14:	2034      	movs	r0, #52	@ 0x34
 8002c16:	f000 f92b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f000 f928 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002c20:	20f7      	movs	r0, #247	@ 0xf7
 8002c22:	f000 f918 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002c26:	2020      	movs	r0, #32
 8002c28:	f000 f922 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002c2c:	20ea      	movs	r0, #234	@ 0xea
 8002c2e:	f000 f912 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f91c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f000 f919 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002c3e:	20b1      	movs	r0, #177	@ 0xb1
 8002c40:	f000 f909 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f000 f913 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002c4a:	201b      	movs	r0, #27
 8002c4c:	f000 f910 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c50:	20b6      	movs	r0, #182	@ 0xb6
 8002c52:	f000 f900 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c56:	200a      	movs	r0, #10
 8002c58:	f000 f90a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002c5c:	20a2      	movs	r0, #162	@ 0xa2
 8002c5e:	f000 f907 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002c62:	20c0      	movs	r0, #192	@ 0xc0
 8002c64:	f000 f8f7 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c68:	2010      	movs	r0, #16
 8002c6a:	f000 f901 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002c6e:	20c1      	movs	r0, #193	@ 0xc1
 8002c70:	f000 f8f1 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c74:	2010      	movs	r0, #16
 8002c76:	f000 f8fb 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002c7a:	20c5      	movs	r0, #197	@ 0xc5
 8002c7c:	f000 f8eb 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002c80:	2045      	movs	r0, #69	@ 0x45
 8002c82:	f000 f8f5 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002c86:	2015      	movs	r0, #21
 8002c88:	f000 f8f2 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002c8c:	20c7      	movs	r0, #199	@ 0xc7
 8002c8e:	f000 f8e2 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002c92:	2090      	movs	r0, #144	@ 0x90
 8002c94:	f000 f8ec 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002c98:	2036      	movs	r0, #54	@ 0x36
 8002c9a:	f000 f8dc 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002c9e:	20c8      	movs	r0, #200	@ 0xc8
 8002ca0:	f000 f8e6 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002ca4:	20f2      	movs	r0, #242	@ 0xf2
 8002ca6:	f000 f8d6 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f000 f8e0 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002cb0:	20b0      	movs	r0, #176	@ 0xb0
 8002cb2:	f000 f8d0 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002cb6:	20c2      	movs	r0, #194	@ 0xc2
 8002cb8:	f000 f8da 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002cbc:	20b6      	movs	r0, #182	@ 0xb6
 8002cbe:	f000 f8ca 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f000 f8d4 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002cc8:	20a7      	movs	r0, #167	@ 0xa7
 8002cca:	f000 f8d1 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002cce:	2027      	movs	r0, #39	@ 0x27
 8002cd0:	f000 f8ce 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002cd4:	2004      	movs	r0, #4
 8002cd6:	f000 f8cb 	bl	8002e70 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002cda:	202a      	movs	r0, #42	@ 0x2a
 8002cdc:	f000 f8bb 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f000 f8c5 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f8c2 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f000 f8bf 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002cf2:	20ef      	movs	r0, #239	@ 0xef
 8002cf4:	f000 f8bc 	bl	8002e70 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002cf8:	202b      	movs	r0, #43	@ 0x2b
 8002cfa:	f000 f8ac 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f000 f8b6 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f000 f8b3 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f000 f8b0 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002d10:	203f      	movs	r0, #63	@ 0x3f
 8002d12:	f000 f8ad 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002d16:	20f6      	movs	r0, #246	@ 0xf6
 8002d18:	f000 f89d 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f000 f8a7 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 f8a4 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002d28:	2006      	movs	r0, #6
 8002d2a:	f000 f8a1 	bl	8002e70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002d2e:	202c      	movs	r0, #44	@ 0x2c
 8002d30:	f000 f891 	bl	8002e56 <ili9341_WriteReg>
  LCD_Delay(200);
 8002d34:	20c8      	movs	r0, #200	@ 0xc8
 8002d36:	f000 fa79 	bl	800322c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002d3a:	2026      	movs	r0, #38	@ 0x26
 8002d3c:	f000 f88b 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f000 f895 	bl	8002e70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002d46:	20e0      	movs	r0, #224	@ 0xe0
 8002d48:	f000 f885 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002d4c:	200f      	movs	r0, #15
 8002d4e:	f000 f88f 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002d52:	2029      	movs	r0, #41	@ 0x29
 8002d54:	f000 f88c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002d58:	2024      	movs	r0, #36	@ 0x24
 8002d5a:	f000 f889 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002d5e:	200c      	movs	r0, #12
 8002d60:	f000 f886 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002d64:	200e      	movs	r0, #14
 8002d66:	f000 f883 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d6a:	2009      	movs	r0, #9
 8002d6c:	f000 f880 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002d70:	204e      	movs	r0, #78	@ 0x4e
 8002d72:	f000 f87d 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002d76:	2078      	movs	r0, #120	@ 0x78
 8002d78:	f000 f87a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002d7c:	203c      	movs	r0, #60	@ 0x3c
 8002d7e:	f000 f877 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d82:	2009      	movs	r0, #9
 8002d84:	f000 f874 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002d88:	2013      	movs	r0, #19
 8002d8a:	f000 f871 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f000 f86e 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002d94:	2017      	movs	r0, #23
 8002d96:	f000 f86b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d9a:	2011      	movs	r0, #17
 8002d9c:	f000 f868 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 f865 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002da6:	20e1      	movs	r0, #225	@ 0xe1
 8002da8:	f000 f855 	bl	8002e56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 f85f 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002db2:	2016      	movs	r0, #22
 8002db4:	f000 f85c 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002db8:	201b      	movs	r0, #27
 8002dba:	f000 f859 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002dbe:	2004      	movs	r0, #4
 8002dc0:	f000 f856 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002dc4:	2011      	movs	r0, #17
 8002dc6:	f000 f853 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f000 f850 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002dd0:	2031      	movs	r0, #49	@ 0x31
 8002dd2:	f000 f84d 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002dd6:	2033      	movs	r0, #51	@ 0x33
 8002dd8:	f000 f84a 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002ddc:	2042      	movs	r0, #66	@ 0x42
 8002dde:	f000 f847 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002de2:	2005      	movs	r0, #5
 8002de4:	f000 f844 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002de8:	200c      	movs	r0, #12
 8002dea:	f000 f841 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002dee:	200a      	movs	r0, #10
 8002df0:	f000 f83e 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002df4:	2028      	movs	r0, #40	@ 0x28
 8002df6:	f000 f83b 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002dfa:	202f      	movs	r0, #47	@ 0x2f
 8002dfc:	f000 f838 	bl	8002e70 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002e00:	200f      	movs	r0, #15
 8002e02:	f000 f835 	bl	8002e70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002e06:	2011      	movs	r0, #17
 8002e08:	f000 f825 	bl	8002e56 <ili9341_WriteReg>
  LCD_Delay(200);
 8002e0c:	20c8      	movs	r0, #200	@ 0xc8
 8002e0e:	f000 fa0d 	bl	800322c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002e12:	2029      	movs	r0, #41	@ 0x29
 8002e14:	f000 f81f 	bl	8002e56 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002e18:	202c      	movs	r0, #44	@ 0x2c
 8002e1a:	f000 f81c 	bl	8002e56 <ili9341_WriteReg>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002e26:	f000 f913 	bl	8003050 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	20d3      	movs	r0, #211	@ 0xd3
 8002e2e:	f000 f82c 	bl	8002e8a <ili9341_ReadData>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b29b      	uxth	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002e3e:	2029      	movs	r0, #41	@ 0x29
 8002e40:	f000 f809 	bl	8002e56 <ili9341_WriteReg>
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002e4c:	2028      	movs	r0, #40	@ 0x28
 8002e4e:	f000 f802 	bl	8002e56 <ili9341_WriteReg>
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f98e 	bl	8003184 <LCD_IO_WriteReg>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 f95f 	bl	8003140 <LCD_IO_WriteData>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	460a      	mov	r2, r1
 8002e94:	80fb      	strh	r3, [r7, #6]
 8002e96:	4613      	mov	r3, r2
 8002e98:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002e9a:	797a      	ldrb	r2, [r7, #5]
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f991 	bl	80031c8 <LCD_IO_ReadData>
 8002ea6:	4603      	mov	r3, r0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002eb4:	23f0      	movs	r3, #240	@ 0xf0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002ec4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002ed8:	4819      	ldr	r0, [pc, #100]	@ (8002f40 <SPIx_Init+0x6c>)
 8002eda:	f004 fc63 	bl	80077a4 <HAL_SPI_GetState>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d12b      	bne.n	8002f3c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <SPIx_Init+0x6c>)
 8002ee6:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <SPIx_Init+0x70>)
 8002ee8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <SPIx_Init+0x6c>)
 8002eec:	2218      	movs	r2, #24
 8002eee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <SPIx_Init+0x6c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <SPIx_Init+0x6c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <SPIx_Init+0x6c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002f02:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002f08:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002f14:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002f1a:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002f22:	4b07      	ldr	r3, [pc, #28]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f2a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f2e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002f30:	4803      	ldr	r0, [pc, #12]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f32:	f000 f853 	bl	8002fdc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002f36:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <SPIx_Init+0x6c>)
 8002f38:	f003 ff7d 	bl	8006e36 <HAL_SPI_Init>
  } 
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200003ec 	.word	0x200003ec
 8002f44:	40015000 	.word	0x40015000

08002f48 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <SPIx_Read+0x38>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f107 0108 	add.w	r1, r7, #8
 8002f62:	4808      	ldr	r0, [pc, #32]	@ (8002f84 <SPIx_Read+0x3c>)
 8002f64:	f004 f95c 	bl	8007220 <HAL_SPI_Receive>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f72:	f000 f827 	bl	8002fc4 <SPIx_Error>
  }
  
  return readvalue;
 8002f76:	68bb      	ldr	r3, [r7, #8]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	2000003c 	.word	0x2000003c
 8002f84:	200003ec 	.word	0x200003ec

08002f88 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <SPIx_Write+0x34>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1db9      	adds	r1, r7, #6
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4808      	ldr	r0, [pc, #32]	@ (8002fc0 <SPIx_Write+0x38>)
 8002fa0:	f003 fffa 	bl	8006f98 <HAL_SPI_Transmit>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002fae:	f000 f809 	bl	8002fc4 <SPIx_Error>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000003c 	.word	0x2000003c
 8002fc0:	200003ec 	.word	0x200003ec

08002fc4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002fc8:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <SPIx_Error+0x14>)
 8002fca:	f003 ffbd 	bl	8006f48 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002fce:	f7ff ff81 	bl	8002ed4 <SPIx_Init>
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200003ec 	.word	0x200003ec

08002fdc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <SPIx_MspInit+0x6c>)
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <SPIx_MspInit+0x6c>)
 8002fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ff2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <SPIx_MspInit+0x6c>)
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <SPIx_MspInit+0x6c>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	4a0f      	ldr	r2, [pc, #60]	@ (8003048 <SPIx_MspInit+0x6c>)
 800300a:	f043 0320 	orr.w	r3, r3, #32
 800300e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003010:	4b0d      	ldr	r3, [pc, #52]	@ (8003048 <SPIx_MspInit+0x6c>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800301c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003020:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003026:	2302      	movs	r3, #2
 8003028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800302a:	2301      	movs	r3, #1
 800302c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800302e:	2305      	movs	r3, #5
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	4804      	ldr	r0, [pc, #16]	@ (800304c <SPIx_MspInit+0x70>)
 800303a:	f002 f889 	bl	8005150 <HAL_GPIO_Init>
}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	@ 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40021400 	.word	0x40021400

08003050 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003056:	4b36      	ldr	r3, [pc, #216]	@ (8003130 <LCD_IO_Init+0xe0>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d164      	bne.n	8003128 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800305e:	4b34      	ldr	r3, [pc, #208]	@ (8003130 <LCD_IO_Init+0xe0>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	4b32      	ldr	r3, [pc, #200]	@ (8003134 <LCD_IO_Init+0xe4>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <LCD_IO_Init+0xe4>)
 800306e:	f043 0308 	orr.w	r3, r3, #8
 8003072:	6313      	str	r3, [r2, #48]	@ 0x30
 8003074:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <LCD_IO_Init+0xe4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003080:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003084:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003086:	2301      	movs	r3, #1
 8003088:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800308e:	2302      	movs	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	4619      	mov	r1, r3
 8003098:	4827      	ldr	r0, [pc, #156]	@ (8003138 <LCD_IO_Init+0xe8>)
 800309a:	f002 f859 	bl	8005150 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <LCD_IO_Init+0xe4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	4a23      	ldr	r2, [pc, #140]	@ (8003134 <LCD_IO_Init+0xe4>)
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ae:	4b21      	ldr	r3, [pc, #132]	@ (8003134 <LCD_IO_Init+0xe4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80030ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030c8:	2302      	movs	r3, #2
 80030ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4619      	mov	r1, r3
 80030d2:	4819      	ldr	r0, [pc, #100]	@ (8003138 <LCD_IO_Init+0xe8>)
 80030d4:	f002 f83c 	bl	8005150 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <LCD_IO_Init+0xe4>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	4a14      	ldr	r2, [pc, #80]	@ (8003134 <LCD_IO_Init+0xe4>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e8:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <LCD_IO_Init+0xe4>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80030f4:	2304      	movs	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003100:	2302      	movs	r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	4619      	mov	r1, r3
 800310a:	480c      	ldr	r0, [pc, #48]	@ (800313c <LCD_IO_Init+0xec>)
 800310c:	f002 f820 	bl	8005150 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003110:	2200      	movs	r2, #0
 8003112:	2104      	movs	r1, #4
 8003114:	4809      	ldr	r0, [pc, #36]	@ (800313c <LCD_IO_Init+0xec>)
 8003116:	f002 faeb 	bl	80056f0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800311a:	2201      	movs	r2, #1
 800311c:	2104      	movs	r1, #4
 800311e:	4807      	ldr	r0, [pc, #28]	@ (800313c <LCD_IO_Init+0xec>)
 8003120:	f002 fae6 	bl	80056f0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003124:	f7ff fed6 	bl	8002ed4 <SPIx_Init>
  }
}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000444 	.word	0x20000444
 8003134:	40023800 	.word	0x40023800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40020800 	.word	0x40020800

08003140 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800314a:	2201      	movs	r2, #1
 800314c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003150:	480a      	ldr	r0, [pc, #40]	@ (800317c <LCD_IO_WriteData+0x3c>)
 8003152:	f002 facd 	bl	80056f0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003156:	2200      	movs	r2, #0
 8003158:	2104      	movs	r1, #4
 800315a:	4809      	ldr	r0, [pc, #36]	@ (8003180 <LCD_IO_WriteData+0x40>)
 800315c:	f002 fac8 	bl	80056f0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff10 	bl	8002f88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003168:	2201      	movs	r2, #1
 800316a:	2104      	movs	r1, #4
 800316c:	4804      	ldr	r0, [pc, #16]	@ (8003180 <LCD_IO_WriteData+0x40>)
 800316e:	f002 fabf 	bl	80056f0 <HAL_GPIO_WritePin>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40020800 	.word	0x40020800

08003184 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800318e:	2200      	movs	r2, #0
 8003190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003194:	480a      	ldr	r0, [pc, #40]	@ (80031c0 <LCD_IO_WriteReg+0x3c>)
 8003196:	f002 faab 	bl	80056f0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800319a:	2200      	movs	r2, #0
 800319c:	2104      	movs	r1, #4
 800319e:	4809      	ldr	r0, [pc, #36]	@ (80031c4 <LCD_IO_WriteReg+0x40>)
 80031a0:	f002 faa6 	bl	80056f0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff feed 	bl	8002f88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80031ae:	2201      	movs	r2, #1
 80031b0:	2104      	movs	r1, #4
 80031b2:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <LCD_IO_WriteReg+0x40>)
 80031b4:	f002 fa9c 	bl	80056f0 <HAL_GPIO_WritePin>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40020800 	.word	0x40020800

080031c8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	460a      	mov	r2, r1
 80031d2:	80fb      	strh	r3, [r7, #6]
 80031d4:	4613      	mov	r3, r2
 80031d6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80031dc:	2200      	movs	r2, #0
 80031de:	2104      	movs	r1, #4
 80031e0:	4810      	ldr	r0, [pc, #64]	@ (8003224 <LCD_IO_ReadData+0x5c>)
 80031e2:	f002 fa85 	bl	80056f0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80031e6:	2200      	movs	r2, #0
 80031e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031ec:	480e      	ldr	r0, [pc, #56]	@ (8003228 <LCD_IO_ReadData+0x60>)
 80031ee:	f002 fa7f 	bl	80056f0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fec7 	bl	8002f88 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80031fa:	797b      	ldrb	r3, [r7, #5]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fea3 	bl	8002f48 <SPIx_Read>
 8003202:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003204:	2201      	movs	r2, #1
 8003206:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800320a:	4807      	ldr	r0, [pc, #28]	@ (8003228 <LCD_IO_ReadData+0x60>)
 800320c:	f002 fa70 	bl	80056f0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003210:	2201      	movs	r2, #1
 8003212:	2104      	movs	r1, #4
 8003214:	4803      	ldr	r0, [pc, #12]	@ (8003224 <LCD_IO_ReadData+0x5c>)
 8003216:	f002 fa6b 	bl	80056f0 <HAL_GPIO_WritePin>
  
  return readvalue;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00

0800322c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 feb9 	bl	8003fac <HAL_Delay>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003248:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <BSP_LCD_Init+0xbc>)
 800324a:	4a2e      	ldr	r2, [pc, #184]	@ (8003304 <BSP_LCD_Init+0xc0>)
 800324c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800324e:	4b2c      	ldr	r3, [pc, #176]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003250:	2209      	movs	r2, #9
 8003252:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003254:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003256:	2201      	movs	r2, #1
 8003258:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800325a:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <BSP_LCD_Init+0xbc>)
 800325c:	221d      	movs	r2, #29
 800325e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003260:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003262:	2203      	movs	r2, #3
 8003264:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003266:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003268:	f240 120d 	movw	r2, #269	@ 0x10d
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800326e:	4b24      	ldr	r3, [pc, #144]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003270:	f240 1243 	movw	r2, #323	@ 0x143
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003276:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003278:	f240 1217 	movw	r2, #279	@ 0x117
 800327c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003280:	f240 1247 	movw	r2, #327	@ 0x147
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003286:	4b1e      	ldr	r3, [pc, #120]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800328e:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003296:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <BSP_LCD_Init+0xbc>)
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <BSP_LCD_Init+0xc4>)
 80032a0:	2208      	movs	r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80032a4:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <BSP_LCD_Init+0xc4>)
 80032a6:	22c0      	movs	r2, #192	@ 0xc0
 80032a8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80032aa:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <BSP_LCD_Init+0xc4>)
 80032ac:	2204      	movs	r2, #4
 80032ae:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80032b0:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <BSP_LCD_Init+0xc4>)
 80032b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80032b8:	4813      	ldr	r0, [pc, #76]	@ (8003308 <BSP_LCD_Init+0xc4>)
 80032ba:	f003 fb6b 	bl	8006994 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <BSP_LCD_Init+0xbc>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80032c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <BSP_LCD_Init+0xbc>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <BSP_LCD_Init+0xbc>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <BSP_LCD_Init+0xbc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80032d6:	f000 fa3f 	bl	8003758 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80032da:	4809      	ldr	r0, [pc, #36]	@ (8003300 <BSP_LCD_Init+0xbc>)
 80032dc:	f002 fc06 	bl	8005aec <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80032e0:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <BSP_LCD_Init+0xc8>)
 80032e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <BSP_LCD_Init+0xcc>)
 80032e4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80032e6:	4b09      	ldr	r3, [pc, #36]	@ (800330c <BSP_LCD_Init+0xc8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80032ee:	f000 fc21 	bl	8003b34 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80032f2:	4808      	ldr	r0, [pc, #32]	@ (8003314 <BSP_LCD_Init+0xd0>)
 80032f4:	f000 f8be 	bl	8003474 <BSP_LCD_SetFont>

  return LCD_OK;
 80032f8:	2300      	movs	r3, #0
}  
 80032fa:	4618      	mov	r0, r3
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000448 	.word	0x20000448
 8003304:	40016800 	.word	0x40016800
 8003308:	20000530 	.word	0x20000530
 800330c:	2000057c 	.word	0x2000057c
 8003310:	20000004 	.word	0x20000004
 8003314:	20000040 	.word	0x20000040

08003318 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <BSP_LCD_GetXSize+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	4798      	blx	r3
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000057c 	.word	0x2000057c

08003330 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <BSP_LCD_GetYSize+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	4798      	blx	r3
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	2000057c 	.word	0x2000057c

08003348 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003348:	b580      	push	{r7, lr}
 800334a:	b090      	sub	sp, #64	@ 0x40
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003358:	f7ff ffde 	bl	8003318 <BSP_LCD_GetXSize>
 800335c:	4603      	mov	r3, r0
 800335e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003364:	f7ff ffe4 	bl	8003330 <BSP_LCD_GetYSize>
 8003368:	4603      	mov	r3, r0
 800336a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8003374:	23ff      	movs	r3, #255	@ 0xff
 8003376:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800338e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003392:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003394:	2307      	movs	r3, #7
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003398:	f7ff ffbe 	bl	8003318 <BSP_LCD_GetXSize>
 800339c:	4603      	mov	r3, r0
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80033a0:	f7ff ffc6 	bl	8003330 <BSP_LCD_GetYSize>
 80033a4:	4603      	mov	r3, r0
 80033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	f107 030c 	add.w	r3, r7, #12
 80033ae:	4619      	mov	r1, r3
 80033b0:	4814      	ldr	r0, [pc, #80]	@ (8003404 <BSP_LCD_LayerDefaultInit+0xbc>)
 80033b2:	f002 fc6b 	bl	8005c8c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	4913      	ldr	r1, [pc, #76]	@ (8003408 <BSP_LCD_LayerDefaultInit+0xc0>)
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3304      	adds	r3, #4
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	490e      	ldr	r1, [pc, #56]	@ (8003408 <BSP_LCD_LayerDefaultInit+0xc0>)
 80033d0:	4613      	mov	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3308      	adds	r3, #8
 80033dc:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <BSP_LCD_LayerDefaultInit+0xc4>)
 80033de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	4909      	ldr	r1, [pc, #36]	@ (8003408 <BSP_LCD_LayerDefaultInit+0xc0>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80033f2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80033f4:	4803      	ldr	r0, [pc, #12]	@ (8003404 <BSP_LCD_LayerDefaultInit+0xbc>)
 80033f6:	f002 fc87 	bl	8005d08 <HAL_LTDC_EnableDither>
}
 80033fa:	bf00      	nop
 80033fc:	3740      	adds	r7, #64	@ 0x40
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000448 	.word	0x20000448
 8003408:	20000564 	.word	0x20000564
 800340c:	20000040 	.word	0x20000040

08003410 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003418:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <BSP_LCD_SetTextColor+0x28>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4907      	ldr	r1, [pc, #28]	@ (800343c <BSP_LCD_SetTextColor+0x2c>)
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	20000560 	.word	0x20000560
 800343c:	20000564 	.word	0x20000564

08003440 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <BSP_LCD_SetBackColor+0x2c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4908      	ldr	r1, [pc, #32]	@ (8003470 <BSP_LCD_SetBackColor+0x30>)
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3304      	adds	r3, #4
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000560 	.word	0x20000560
 8003470:	20000564 	.word	0x20000564

08003474 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <BSP_LCD_SetFont+0x2c>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <BSP_LCD_SetFont+0x30>)
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3308      	adds	r3, #8
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000560 	.word	0x20000560
 80034a4:	20000564 	.word	0x20000564

080034a8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <BSP_LCD_GetFont+0x24>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4907      	ldr	r1, [pc, #28]	@ (80034d0 <BSP_LCD_GetFont+0x28>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3308      	adds	r3, #8
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000560 	.word	0x20000560
 80034d0:	20000564 	.word	0x20000564

080034d4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <BSP_LCD_Clear+0x48>)
 80034de:	681c      	ldr	r4, [r3, #0]
 80034e0:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <BSP_LCD_Clear+0x48>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003520 <BSP_LCD_Clear+0x4c>)
 80034e6:	2134      	movs	r1, #52	@ 0x34
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	335c      	adds	r3, #92	@ 0x5c
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461e      	mov	r6, r3
 80034f4:	f7ff ff10 	bl	8003318 <BSP_LCD_GetXSize>
 80034f8:	4605      	mov	r5, r0
 80034fa:	f7ff ff19 	bl	8003330 <BSP_LCD_GetYSize>
 80034fe:	4602      	mov	r2, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2300      	movs	r3, #0
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	462a      	mov	r2, r5
 800350c:	4631      	mov	r1, r6
 800350e:	4620      	mov	r0, r4
 8003510:	f000 fad8 	bl	8003ac4 <FillBuffer>
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351c:	20000560 	.word	0x20000560
 8003520:	20000448 	.word	0x20000448

08003524 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
 800352e:	460b      	mov	r3, r1
 8003530:	80bb      	strh	r3, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003536:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <BSP_LCD_DisplayChar+0x80>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	491b      	ldr	r1, [pc, #108]	@ (80035a8 <BSP_LCD_DisplayChar+0x84>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3308      	adds	r3, #8
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003552:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <BSP_LCD_DisplayChar+0x80>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4c14      	ldr	r4, [pc, #80]	@ (80035a8 <BSP_LCD_DisplayChar+0x84>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4423      	add	r3, r4
 8003562:	3308      	adds	r3, #8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003568:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800356c:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <BSP_LCD_DisplayChar+0x80>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4c0d      	ldr	r4, [pc, #52]	@ (80035a8 <BSP_LCD_DisplayChar+0x84>)
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4423      	add	r3, r4
 800357c:	3308      	adds	r3, #8
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	889b      	ldrh	r3, [r3, #4]
 8003582:	3307      	adds	r3, #7
 8003584:	2b00      	cmp	r3, #0
 8003586:	da00      	bge.n	800358a <BSP_LCD_DisplayChar+0x66>
 8003588:	3307      	adds	r3, #7
 800358a:	10db      	asrs	r3, r3, #3
 800358c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003590:	18ca      	adds	r2, r1, r3
 8003592:	88b9      	ldrh	r1, [r7, #4]
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f9da 	bl	8003950 <DrawChar>
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}
 80035a4:	20000560 	.word	0x20000560
 80035a8:	20000564 	.word	0x20000564

080035ac <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60ba      	str	r2, [r7, #8]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	81fb      	strh	r3, [r7, #14]
 80035ba:	460b      	mov	r3, r1
 80035bc:	81bb      	strh	r3, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80035c2:	2301      	movs	r3, #1
 80035c4:	83fb      	strh	r3, [r7, #30]
 80035c6:	2300      	movs	r3, #0
 80035c8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80035d6:	e002      	b.n	80035de <BSP_LCD_DisplayStringAt+0x32>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	3301      	adds	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	617a      	str	r2, [r7, #20]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f6      	bne.n	80035d8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80035ea:	f7ff fe95 	bl	8003318 <BSP_LCD_GetXSize>
 80035ee:	4601      	mov	r1, r0
 80035f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <BSP_LCD_DisplayStringAt+0x174>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	484b      	ldr	r0, [pc, #300]	@ (8003724 <BSP_LCD_DisplayStringAt+0x178>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4403      	add	r3, r0
 8003600:	3308      	adds	r3, #8
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	889b      	ldrh	r3, [r3, #4]
 8003606:	fbb1 f3f3 	udiv	r3, r1, r3
 800360a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d01c      	beq.n	800364c <BSP_LCD_DisplayStringAt+0xa0>
 8003612:	2b03      	cmp	r3, #3
 8003614:	dc33      	bgt.n	800367e <BSP_LCD_DisplayStringAt+0xd2>
 8003616:	2b01      	cmp	r3, #1
 8003618:	d002      	beq.n	8003620 <BSP_LCD_DisplayStringAt+0x74>
 800361a:	2b02      	cmp	r3, #2
 800361c:	d019      	beq.n	8003652 <BSP_LCD_DisplayStringAt+0xa6>
 800361e:	e02e      	b.n	800367e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1ad1      	subs	r1, r2, r3
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <BSP_LCD_DisplayStringAt+0x174>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	483e      	ldr	r0, [pc, #248]	@ (8003724 <BSP_LCD_DisplayStringAt+0x178>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	3308      	adds	r3, #8
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	889b      	ldrh	r3, [r3, #4]
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	4413      	add	r3, r2
 8003648:	83fb      	strh	r3, [r7, #30]
      break;
 800364a:	e01b      	b.n	8003684 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	83fb      	strh	r3, [r7, #30]
      break;
 8003650:	e018      	b.n	8003684 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	b299      	uxth	r1, r3
 800365a:	4b31      	ldr	r3, [pc, #196]	@ (8003720 <BSP_LCD_DisplayStringAt+0x174>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4831      	ldr	r0, [pc, #196]	@ (8003724 <BSP_LCD_DisplayStringAt+0x178>)
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4403      	add	r3, r0
 800366a:	3308      	adds	r3, #8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	889b      	ldrh	r3, [r3, #4]
 8003670:	fb11 f303 	smulbb	r3, r1, r3
 8003674:	b29a      	uxth	r2, r3
 8003676:	89fb      	ldrh	r3, [r7, #14]
 8003678:	4413      	add	r3, r2
 800367a:	83fb      	strh	r3, [r7, #30]
      break;
 800367c:	e002      	b.n	8003684 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	83fb      	strh	r3, [r7, #30]
      break;
 8003682:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003684:	e01a      	b.n	80036bc <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	89b9      	ldrh	r1, [r7, #12]
 800368c:	8bfb      	ldrh	r3, [r7, #30]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff48 	bl	8003524 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003694:	4b22      	ldr	r3, [pc, #136]	@ (8003720 <BSP_LCD_DisplayStringAt+0x174>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4922      	ldr	r1, [pc, #136]	@ (8003724 <BSP_LCD_DisplayStringAt+0x178>)
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3308      	adds	r3, #8
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	889a      	ldrh	r2, [r3, #4]
 80036aa:	8bfb      	ldrh	r3, [r7, #30]
 80036ac:	4413      	add	r3, r2
 80036ae:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
    i++;
 80036b6:	8bbb      	ldrh	r3, [r7, #28]
 80036b8:	3301      	adds	r3, #1
 80036ba:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2dc      	uxtb	r4, r3
 80036ca:	f7ff fe25 	bl	8003318 <BSP_LCD_GetXSize>
 80036ce:	8bb9      	ldrh	r1, [r7, #28]
 80036d0:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <BSP_LCD_DisplayStringAt+0x174>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4d13      	ldr	r5, [pc, #76]	@ (8003724 <BSP_LCD_DisplayStringAt+0x178>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	442b      	add	r3, r5
 80036e0:	3308      	adds	r3, #8
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	889b      	ldrh	r3, [r3, #4]
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	1ac3      	subs	r3, r0, r3
 80036ec:	b299      	uxth	r1, r3
 80036ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <BSP_LCD_DisplayStringAt+0x174>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	480c      	ldr	r0, [pc, #48]	@ (8003724 <BSP_LCD_DisplayStringAt+0x178>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4403      	add	r3, r0
 80036fe:	3308      	adds	r3, #8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	4299      	cmp	r1, r3
 8003706:	bf2c      	ite	cs
 8003708:	2301      	movcs	r3, #1
 800370a:	2300      	movcc	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4023      	ands	r3, r4
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1b7      	bne.n	8003686 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bdb0      	pop	{r4, r5, r7, pc}
 8003720:	20000560 	.word	0x20000560
 8003724:	20000564 	.word	0x20000564

08003728 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003734:	f7ff feb8 	bl	80034a8 <BSP_LCD_GetFont>
 8003738:	4603      	mov	r3, r0
 800373a:	88db      	ldrh	r3, [r3, #6]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	fb12 f303 	smulbb	r3, r2, r3
 8003742:	b299      	uxth	r1, r3
 8003744:	2303      	movs	r3, #3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	2000      	movs	r0, #0
 800374a:	f7ff ff2f 	bl	80035ac <BSP_LCD_DisplayStringAt>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	@ 0x38
 800375c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	4b61      	ldr	r3, [pc, #388]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	4a60      	ldr	r2, [pc, #384]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003768:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800376c:	6453      	str	r3, [r2, #68]	@ 0x44
 800376e:	4b5e      	ldr	r3, [pc, #376]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003776:	623b      	str	r3, [r7, #32]
 8003778:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	4b5a      	ldr	r3, [pc, #360]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	4a59      	ldr	r2, [pc, #356]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003784:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003788:	6313      	str	r3, [r2, #48]	@ 0x30
 800378a:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	4b53      	ldr	r3, [pc, #332]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	4a52      	ldr	r2, [pc, #328]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a6:	4b50      	ldr	r3, [pc, #320]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	4b4c      	ldr	r3, [pc, #304]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	4a4b      	ldr	r2, [pc, #300]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c2:	4b49      	ldr	r3, [pc, #292]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b45      	ldr	r3, [pc, #276]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a44      	ldr	r2, [pc, #272]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b42      	ldr	r3, [pc, #264]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b3e      	ldr	r3, [pc, #248]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	4a3d      	ldr	r2, [pc, #244]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fa:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	4b37      	ldr	r3, [pc, #220]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4a36      	ldr	r2, [pc, #216]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	6313      	str	r3, [r2, #48]	@ 0x30
 8003816:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	4b30      	ldr	r3, [pc, #192]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a2f      	ldr	r2, [pc, #188]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 800382c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b2d      	ldr	r3, [pc, #180]	@ (80038e8 <BSP_LCD_MspInit+0x190>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800383e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800384c:	2302      	movs	r3, #2
 800384e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003850:	230e      	movs	r3, #14
 8003852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003858:	4619      	mov	r1, r3
 800385a:	4824      	ldr	r0, [pc, #144]	@ (80038ec <BSP_LCD_MspInit+0x194>)
 800385c:	f001 fc78 	bl	8005150 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003860:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800386a:	4619      	mov	r1, r3
 800386c:	4820      	ldr	r0, [pc, #128]	@ (80038f0 <BSP_LCD_MspInit+0x198>)
 800386e:	f001 fc6f 	bl	8005150 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003872:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800387c:	4619      	mov	r1, r3
 800387e:	481d      	ldr	r0, [pc, #116]	@ (80038f4 <BSP_LCD_MspInit+0x19c>)
 8003880:	f001 fc66 	bl	8005150 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003884:	2348      	movs	r3, #72	@ 0x48
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800388c:	4619      	mov	r1, r3
 800388e:	481a      	ldr	r0, [pc, #104]	@ (80038f8 <BSP_LCD_MspInit+0x1a0>)
 8003890:	f001 fc5e 	bl	8005150 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800389a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800389e:	4619      	mov	r1, r3
 80038a0:	4816      	ldr	r0, [pc, #88]	@ (80038fc <BSP_LCD_MspInit+0x1a4>)
 80038a2:	f001 fc55 	bl	8005150 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80038a6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80038ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b0:	4619      	mov	r1, r3
 80038b2:	4813      	ldr	r0, [pc, #76]	@ (8003900 <BSP_LCD_MspInit+0x1a8>)
 80038b4:	f001 fc4c 	bl	8005150 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80038b8:	2303      	movs	r3, #3
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80038bc:	2309      	movs	r3, #9
 80038be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80038c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038c4:	4619      	mov	r1, r3
 80038c6:	480a      	ldr	r0, [pc, #40]	@ (80038f0 <BSP_LCD_MspInit+0x198>)
 80038c8:	f001 fc42 	bl	8005150 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80038cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80038d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d6:	4619      	mov	r1, r3
 80038d8:	4809      	ldr	r0, [pc, #36]	@ (8003900 <BSP_LCD_MspInit+0x1a8>)
 80038da:	f001 fc39 	bl	8005150 <HAL_GPIO_Init>
}
 80038de:	bf00      	nop
 80038e0:	3738      	adds	r7, #56	@ 0x38
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40020400 	.word	0x40020400
 80038f4:	40020800 	.word	0x40020800
 80038f8:	40020c00 	.word	0x40020c00
 80038fc:	40021400 	.word	0x40021400
 8003900:	40021800 	.word	0x40021800

08003904 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003904:	b5b0      	push	{r4, r5, r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	603a      	str	r2, [r7, #0]
 800390e:	80fb      	strh	r3, [r7, #6]
 8003910:	460b      	mov	r3, r1
 8003912:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <BSP_LCD_DrawPixel+0x44>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0c      	ldr	r2, [pc, #48]	@ (800394c <BSP_LCD_DrawPixel+0x48>)
 800391a:	2134      	movs	r1, #52	@ 0x34
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	335c      	adds	r3, #92	@ 0x5c
 8003924:	681c      	ldr	r4, [r3, #0]
 8003926:	88bd      	ldrh	r5, [r7, #4]
 8003928:	f7ff fcf6 	bl	8003318 <BSP_LCD_GetXSize>
 800392c:	4603      	mov	r3, r0
 800392e:	fb03 f205 	mul.w	r2, r3, r5
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4423      	add	r3, r4
 800393a:	461a      	mov	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bdb0      	pop	{r4, r5, r7, pc}
 8003948:	20000560 	.word	0x20000560
 800394c:	20000448 	.word	0x20000448

08003950 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	603a      	str	r2, [r7, #0]
 800395a:	80fb      	strh	r3, [r7, #6]
 800395c:	460b      	mov	r3, r1
 800395e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800396c:	4b53      	ldr	r3, [pc, #332]	@ (8003abc <DrawChar+0x16c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4953      	ldr	r1, [pc, #332]	@ (8003ac0 <DrawChar+0x170>)
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3308      	adds	r3, #8
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	88db      	ldrh	r3, [r3, #6]
 8003982:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003984:	4b4d      	ldr	r3, [pc, #308]	@ (8003abc <DrawChar+0x16c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	494d      	ldr	r1, [pc, #308]	@ (8003ac0 <DrawChar+0x170>)
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3308      	adds	r3, #8
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	889b      	ldrh	r3, [r3, #4]
 800399a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800399c:	8a3b      	ldrh	r3, [r7, #16]
 800399e:	3307      	adds	r3, #7
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da00      	bge.n	80039a6 <DrawChar+0x56>
 80039a4:	3307      	adds	r3, #7
 80039a6:	10db      	asrs	r3, r3, #3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	8a3b      	ldrh	r3, [r7, #16]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e076      	b.n	8003aaa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80039bc:	8a3b      	ldrh	r3, [r7, #16]
 80039be:	3307      	adds	r3, #7
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da00      	bge.n	80039c6 <DrawChar+0x76>
 80039c4:	3307      	adds	r3, #7
 80039c6:	10db      	asrs	r3, r3, #3
 80039c8:	461a      	mov	r2, r3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80039d6:	8a3b      	ldrh	r3, [r7, #16]
 80039d8:	3307      	adds	r3, #7
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da00      	bge.n	80039e0 <DrawChar+0x90>
 80039de:	3307      	adds	r3, #7
 80039e0:	10db      	asrs	r3, r3, #3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d002      	beq.n	80039ec <DrawChar+0x9c>
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d004      	beq.n	80039f4 <DrawChar+0xa4>
 80039ea:	e00c      	b.n	8003a06 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	e016      	b.n	8003a22 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	3201      	adds	r2, #1
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
      break;
 8003a04:	e00d      	b.n	8003a22 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	041a      	lsls	r2, r3, #16
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	4313      	orrs	r3, r2
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	3202      	adds	r2, #2
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
      break;
 8003a20:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e036      	b.n	8003a96 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a28:	8a3a      	ldrh	r2, [r7, #16]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad2      	subs	r2, r2, r3
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	4413      	add	r3, r2
 8003a32:	3b01      	subs	r3, #1
 8003a34:	2201      	movs	r2, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d012      	beq.n	8003a6a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b298      	uxth	r0, r3
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <DrawChar+0x16c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	491b      	ldr	r1, [pc, #108]	@ (8003ac0 <DrawChar+0x170>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	88bb      	ldrh	r3, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7ff ff4e 	bl	8003904 <BSP_LCD_DrawPixel>
 8003a68:	e012      	b.n	8003a90 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	4413      	add	r3, r2
 8003a72:	b298      	uxth	r0, r3
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <DrawChar+0x16c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4911      	ldr	r1, [pc, #68]	@ (8003ac0 <DrawChar+0x170>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3304      	adds	r3, #4
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	88bb      	ldrh	r3, [r7, #4]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7ff ff3a 	bl	8003904 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	8a3b      	ldrh	r3, [r7, #16]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3c4      	bcc.n	8003a28 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003a9e:	88bb      	ldrh	r3, [r7, #4]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	8a7b      	ldrh	r3, [r7, #18]
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d384      	bcc.n	80039bc <DrawChar+0x6c>
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000560 	.word	0x20000560
 8003ac0:	20000564 	.word	0x20000564

08003ac4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003ad2:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <FillBuffer+0x68>)
 8003ad4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ad8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003ada:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <FillBuffer+0x68>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003ae0:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <FillBuffer+0x68>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003ae6:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <FillBuffer+0x68>)
 8003ae8:	4a11      	ldr	r2, [pc, #68]	@ (8003b30 <FillBuffer+0x6c>)
 8003aea:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003aec:	480f      	ldr	r0, [pc, #60]	@ (8003b2c <FillBuffer+0x68>)
 8003aee:	f001 f8a3 	bl	8004c38 <HAL_DMA2D_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d115      	bne.n	8003b24 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003af8:	68f9      	ldr	r1, [r7, #12]
 8003afa:	480c      	ldr	r0, [pc, #48]	@ (8003b2c <FillBuffer+0x68>)
 8003afc:	f001 f9fa 	bl	8004ef4 <HAL_DMA2D_ConfigLayer>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69f9      	ldr	r1, [r7, #28]
 8003b10:	4806      	ldr	r0, [pc, #24]	@ (8003b2c <FillBuffer+0x68>)
 8003b12:	f001 f8da 	bl	8004cca <HAL_DMA2D_Start>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003b1c:	210a      	movs	r1, #10
 8003b1e:	4803      	ldr	r0, [pc, #12]	@ (8003b2c <FillBuffer+0x68>)
 8003b20:	f001 f8fe 	bl	8004d20 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200004f0 	.word	0x200004f0
 8003b30:	4002b000 	.word	0x4002b000

08003b34 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b38:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003be4 <BSP_SDRAM_Init+0xb0>)
 8003b3c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b40:	2202      	movs	r2, #2
 8003b42:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003b44:	4b28      	ldr	r3, [pc, #160]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b46:	2207      	movs	r2, #7
 8003b48:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003b4a:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003b50:	4b25      	ldr	r3, [pc, #148]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b52:	2207      	movs	r2, #7
 8003b54:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003b56:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b58:	2202      	movs	r2, #2
 8003b5a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003b5c:	4b22      	ldr	r3, [pc, #136]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b5e:	2202      	movs	r2, #2
 8003b60:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003b62:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003b64:	2202      	movs	r2, #2
 8003b66:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b76:	2204      	movs	r2, #4
 8003b78:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003b7a:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b80:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003b86:	4b16      	ldr	r3, [pc, #88]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b88:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003b8c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b8e:	4b14      	ldr	r3, [pc, #80]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b94:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b9a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003b9c:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003baa:	2100      	movs	r1, #0
 8003bac:	480c      	ldr	r0, [pc, #48]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003bae:	f000 f87f 	bl	8003cb0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003bb2:	490d      	ldr	r1, [pc, #52]	@ (8003be8 <BSP_SDRAM_Init+0xb4>)
 8003bb4:	480a      	ldr	r0, [pc, #40]	@ (8003be0 <BSP_SDRAM_Init+0xac>)
 8003bb6:	f003 f8ad 	bl	8006d14 <HAL_SDRAM_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <BSP_SDRAM_Init+0xb8>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e002      	b.n	8003bce <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003bc8:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <BSP_SDRAM_Init+0xb8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003bce:	f240 506a 	movw	r0, #1386	@ 0x56a
 8003bd2:	f000 f80d 	bl	8003bf0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <BSP_SDRAM_Init+0xb8>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000580 	.word	0x20000580
 8003be4:	a0000140 	.word	0xa0000140
 8003be8:	200005b4 	.word	0x200005b4
 8003bec:	20000048 	.word	0x20000048

08003bf0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c02:	4b29      	ldr	r3, [pc, #164]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c04:	2208      	movs	r2, #8
 8003c06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c18:	4923      	ldr	r1, [pc, #140]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c1a:	4824      	ldr	r0, [pc, #144]	@ (8003cac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c1c:	f003 f8ae 	bl	8006d7c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f000 f9c3 	bl	8003fac <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c28:	2202      	movs	r2, #2
 8003c2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c2e:	2208      	movs	r2, #8
 8003c30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c42:	4919      	ldr	r1, [pc, #100]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c44:	4819      	ldr	r0, [pc, #100]	@ (8003cac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c46:	f003 f899 	bl	8006d7c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c4a:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c50:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c52:	2208      	movs	r2, #8
 8003c54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c58:	2204      	movs	r2, #4
 8003c5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003c5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c66:	4910      	ldr	r1, [pc, #64]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c68:	4810      	ldr	r0, [pc, #64]	@ (8003cac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c6a:	f003 f887 	bl	8006d7c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003c6e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003c72:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003c74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c76:	2204      	movs	r2, #4
 8003c78:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003c80:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a07      	ldr	r2, [pc, #28]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c8a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c90:	4905      	ldr	r1, [pc, #20]	@ (8003ca8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c92:	4806      	ldr	r0, [pc, #24]	@ (8003cac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c94:	f003 f872 	bl	8006d7c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4804      	ldr	r0, [pc, #16]	@ (8003cac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c9c:	f003 f8a3 	bl	8006de6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200005d0 	.word	0x200005d0
 8003cac:	20000580 	.word	0x20000580

08003cb0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b090      	sub	sp, #64	@ 0x40
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80ec 	beq.w	8003e9a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc6:	4b77      	ldr	r3, [pc, #476]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cca:	4a76      	ldr	r2, [pc, #472]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6393      	str	r3, [r2, #56]	@ 0x38
 8003cd2:	4b74      	ldr	r3, [pc, #464]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce2:	4b70      	ldr	r3, [pc, #448]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ce8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	4b69      	ldr	r3, [pc, #420]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	4a68      	ldr	r2, [pc, #416]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0a:	4b66      	ldr	r3, [pc, #408]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	4b62      	ldr	r3, [pc, #392]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a61      	ldr	r2, [pc, #388]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d42:	4b58      	ldr	r3, [pc, #352]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	4b54      	ldr	r3, [pc, #336]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	4a53      	ldr	r2, [pc, #332]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d58:	f043 0310 	orr.w	r3, r3, #16
 8003d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5e:	4b51      	ldr	r3, [pc, #324]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d74:	f043 0320 	orr.w	r3, r3, #32
 8003d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	4a45      	ldr	r2, [pc, #276]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d96:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <BSP_SDRAM_MspInit+0x1f4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003da6:	2302      	movs	r3, #2
 8003da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003dae:	230c      	movs	r3, #12
 8003db0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003db2:	2360      	movs	r3, #96	@ 0x60
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	483a      	ldr	r0, [pc, #232]	@ (8003ea8 <BSP_SDRAM_MspInit+0x1f8>)
 8003dbe:	f001 f9c7 	bl	8005150 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4837      	ldr	r0, [pc, #220]	@ (8003eac <BSP_SDRAM_MspInit+0x1fc>)
 8003dce:	f001 f9bf 	bl	8005150 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003dd2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4834      	ldr	r0, [pc, #208]	@ (8003eb0 <BSP_SDRAM_MspInit+0x200>)
 8003de0:	f001 f9b6 	bl	8005150 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003de4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dee:	4619      	mov	r1, r3
 8003df0:	4830      	ldr	r0, [pc, #192]	@ (8003eb4 <BSP_SDRAM_MspInit+0x204>)
 8003df2:	f001 f9ad 	bl	8005150 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003df6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e00:	4619      	mov	r1, r3
 8003e02:	482d      	ldr	r0, [pc, #180]	@ (8003eb8 <BSP_SDRAM_MspInit+0x208>)
 8003e04:	f001 f9a4 	bl	8005150 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003e08:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003e0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e12:	4619      	mov	r1, r3
 8003e14:	4829      	ldr	r0, [pc, #164]	@ (8003ebc <BSP_SDRAM_MspInit+0x20c>)
 8003e16:	f001 f99b 	bl	8005150 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e1a:	4b29      	ldr	r3, [pc, #164]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e20:	4b27      	ldr	r3, [pc, #156]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e26:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e2c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e34:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e36:	4b22      	ldr	r3, [pc, #136]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e3c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e3e:	4b20      	ldr	r3, [pc, #128]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e44:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e52:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e5a:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e60:	4b17      	ldr	r3, [pc, #92]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e6e:	4a15      	ldr	r2, [pc, #84]	@ (8003ec4 <BSP_SDRAM_MspInit+0x214>)
 8003e70:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e78:	4a11      	ldr	r2, [pc, #68]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003e7e:	4810      	ldr	r0, [pc, #64]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e80:	f000 fdca 	bl	8004a18 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003e84:	480e      	ldr	r0, [pc, #56]	@ (8003ec0 <BSP_SDRAM_MspInit+0x210>)
 8003e86:	f000 fd19 	bl	80048bc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	2038      	movs	r0, #56	@ 0x38
 8003e90:	f000 fcdd 	bl	800484e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003e94:	2038      	movs	r0, #56	@ 0x38
 8003e96:	f000 fcf6 	bl	8004886 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003e9a:	bf00      	nop
 8003e9c:	3740      	adds	r7, #64	@ 0x40
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40021400 	.word	0x40021400
 8003ebc:	40021800 	.word	0x40021800
 8003ec0:	200005e0 	.word	0x200005e0
 8003ec4:	40026410 	.word	0x40026410

08003ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <HAL_Init+0x40>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <HAL_Init+0x40>)
 8003ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_Init+0x40>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <HAL_Init+0x40>)
 8003ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ee4:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <HAL_Init+0x40>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a07      	ldr	r2, [pc, #28]	@ (8003f08 <HAL_Init+0x40>)
 8003eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	f000 fca1 	bl	8004838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ef6:	200f      	movs	r0, #15
 8003ef8:	f000 f808 	bl	8003f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003efc:	f7fe f992 	bl	8002224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023c00 	.word	0x40023c00

08003f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f14:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_InitTick+0x54>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <HAL_InitTick+0x58>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fcb9 	bl	80048a2 <HAL_SYSTICK_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00e      	b.n	8003f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b0f      	cmp	r3, #15
 8003f3e:	d80a      	bhi.n	8003f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f40:	2200      	movs	r2, #0
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	f000 fc81 	bl	800484e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f4c:	4a06      	ldr	r2, [pc, #24]	@ (8003f68 <HAL_InitTick+0x5c>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000050 	.word	0x20000050
 8003f68:	2000004c 	.word	0x2000004c

08003f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_IncTick+0x20>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <HAL_IncTick+0x24>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <HAL_IncTick+0x24>)
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000050 	.word	0x20000050
 8003f90:	20000640 	.word	0x20000640

08003f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return uwTick;
 8003f98:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_GetTick+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000640 	.word	0x20000640

08003fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7ff ffee 	bl	8003f94 <HAL_GetTick>
 8003fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d005      	beq.n	8003fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <HAL_Delay+0x44>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fd2:	bf00      	nop
 8003fd4:	f7ff ffde 	bl	8003f94 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d8f7      	bhi.n	8003fd4 <HAL_Delay+0x28>
  {
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000050 	.word	0x20000050

08003ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e033      	b.n	8004072 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe f92e 	bl	8002274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d118      	bne.n	8004064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800403a:	f023 0302 	bic.w	r3, r3, #2
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa2a 	bl	80044a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40
 8004062:	e001      	b.n	8004068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_ADC_Start+0x1a>
 8004092:	2302      	movs	r3, #2
 8004094:	e0b2      	b.n	80041fc <HAL_ADC_Start+0x180>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d018      	beq.n	80040de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040bc:	4b52      	ldr	r3, [pc, #328]	@ (8004208 <HAL_ADC_Start+0x18c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a52      	ldr	r2, [pc, #328]	@ (800420c <HAL_ADC_Start+0x190>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9a      	lsrs	r2, r3, #18
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80040d0:	e002      	b.n	80040d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f9      	bne.n	80040d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d17a      	bne.n	80041e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004116:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412a:	d106      	bne.n	800413a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004130:	f023 0206 	bic.w	r2, r3, #6
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	645a      	str	r2, [r3, #68]	@ 0x44
 8004138:	e002      	b.n	8004140 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004148:	4b31      	ldr	r3, [pc, #196]	@ (8004210 <HAL_ADC_Start+0x194>)
 800414a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004154:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2b00      	cmp	r3, #0
 8004160:	d12a      	bne.n	80041b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2b      	ldr	r2, [pc, #172]	@ (8004214 <HAL_ADC_Start+0x198>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d015      	beq.n	8004198 <HAL_ADC_Start+0x11c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a29      	ldr	r2, [pc, #164]	@ (8004218 <HAL_ADC_Start+0x19c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d105      	bne.n	8004182 <HAL_ADC_Start+0x106>
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <HAL_ADC_Start+0x194>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a25      	ldr	r2, [pc, #148]	@ (800421c <HAL_ADC_Start+0x1a0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d136      	bne.n	80041fa <HAL_ADC_Start+0x17e>
 800418c:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_ADC_Start+0x194>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d130      	bne.n	80041fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d129      	bne.n	80041fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80041b4:	609a      	str	r2, [r3, #8]
 80041b6:	e020      	b.n	80041fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a15      	ldr	r2, [pc, #84]	@ (8004214 <HAL_ADC_Start+0x198>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d11b      	bne.n	80041fa <HAL_ADC_Start+0x17e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d114      	bne.n	80041fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	e00b      	b.n	80041fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f043 0210 	orr.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	20000000 	.word	0x20000000
 800420c:	431bde83 	.word	0x431bde83
 8004210:	40012300 	.word	0x40012300
 8004214:	40012000 	.word	0x40012000
 8004218:	40012100 	.word	0x40012100
 800421c:	40012200 	.word	0x40012200

08004220 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x1c>
 8004254:	2302      	movs	r3, #2
 8004256:	e113      	b.n	8004480 <HAL_ADC_ConfigChannel+0x244>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b09      	cmp	r3, #9
 8004266:	d925      	bls.n	80042b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	3b1e      	subs	r3, #30
 800427e:	2207      	movs	r2, #7
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43da      	mvns	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	400a      	ands	r2, r1
 800428c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68d9      	ldr	r1, [r3, #12]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	4618      	mov	r0, r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4403      	add	r3, r0
 80042a6:	3b1e      	subs	r3, #30
 80042a8:	409a      	lsls	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	e022      	b.n	80042fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6919      	ldr	r1, [r3, #16]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	2207      	movs	r2, #7
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	400a      	ands	r2, r1
 80042d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6919      	ldr	r1, [r3, #16]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4618      	mov	r0, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4403      	add	r3, r0
 80042f0:	409a      	lsls	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d824      	bhi.n	800434c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	3b05      	subs	r3, #5
 8004314:	221f      	movs	r2, #31
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43da      	mvns	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	400a      	ands	r2, r1
 8004322:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4618      	mov	r0, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	3b05      	subs	r3, #5
 800433e:	fa00 f203 	lsl.w	r2, r0, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34
 800434a:	e04c      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d824      	bhi.n	800439e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	3b23      	subs	r3, #35	@ 0x23
 8004366:	221f      	movs	r2, #31
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43da      	mvns	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	400a      	ands	r2, r1
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	4618      	mov	r0, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	3b23      	subs	r3, #35	@ 0x23
 8004390:	fa00 f203 	lsl.w	r2, r0, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
 800439c:	e023      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	3b41      	subs	r3, #65	@ 0x41
 80043b0:	221f      	movs	r2, #31
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	400a      	ands	r2, r1
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	4618      	mov	r0, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	3b41      	subs	r3, #65	@ 0x41
 80043da:	fa00 f203 	lsl.w	r2, r0, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043e6:	4b29      	ldr	r3, [pc, #164]	@ (800448c <HAL_ADC_ConfigChannel+0x250>)
 80043e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a28      	ldr	r2, [pc, #160]	@ (8004490 <HAL_ADC_ConfigChannel+0x254>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10f      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x1d8>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b12      	cmp	r3, #18
 80043fa:	d10b      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1d      	ldr	r2, [pc, #116]	@ (8004490 <HAL_ADC_ConfigChannel+0x254>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d12b      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x23a>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1c      	ldr	r2, [pc, #112]	@ (8004494 <HAL_ADC_ConfigChannel+0x258>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x1f4>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b11      	cmp	r3, #17
 800442e:	d122      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <HAL_ADC_ConfigChannel+0x258>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d111      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004452:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <HAL_ADC_ConfigChannel+0x25c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a11      	ldr	r2, [pc, #68]	@ (800449c <HAL_ADC_ConfigChannel+0x260>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	0c9a      	lsrs	r2, r3, #18
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004468:	e002      	b.n	8004470 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3b01      	subs	r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f9      	bne.n	800446a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40012300 	.word	0x40012300
 8004490:	40012000 	.word	0x40012000
 8004494:	10000012 	.word	0x10000012
 8004498:	20000000 	.word	0x20000000
 800449c:	431bde83 	.word	0x431bde83

080044a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044a8:	4b79      	ldr	r3, [pc, #484]	@ (8004690 <ADC_Init+0x1f0>)
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80044f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800451a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6899      	ldr	r1, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	4a58      	ldr	r2, [pc, #352]	@ (8004694 <ADC_Init+0x1f4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004546:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6899      	ldr	r1, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	e00f      	b.n	800459e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800458c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800459c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0202 	bic.w	r2, r2, #2
 80045ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7e1b      	ldrb	r3, [r3, #24]
 80045b8:	005a      	lsls	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80045ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	3b01      	subs	r3, #1
 80045f8:	035a      	lsls	r2, r3, #13
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	e007      	b.n	8004614 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004612:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	3b01      	subs	r3, #1
 8004630:	051a      	lsls	r2, r3, #20
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004656:	025a      	lsls	r2, r3, #9
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	029a      	lsls	r2, r3, #10
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40012300 	.word	0x40012300
 8004694:	0f000001 	.word	0x0f000001

08004698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a8:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <__NVIC_SetPriorityGrouping+0x44>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ca:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <__NVIC_SetPriorityGrouping+0x44>)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	60d3      	str	r3, [r2, #12]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e4:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <__NVIC_GetPriorityGrouping+0x18>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	f003 0307 	and.w	r3, r3, #7
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	db0b      	blt.n	8004726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	f003 021f 	and.w	r2, r3, #31
 8004714:	4907      	ldr	r1, [pc, #28]	@ (8004734 <__NVIC_EnableIRQ+0x38>)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2001      	movs	r0, #1
 800471e:	fa00 f202 	lsl.w	r2, r0, r2
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	e000e100 	.word	0xe000e100

08004738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004748:	2b00      	cmp	r3, #0
 800474a:	db0a      	blt.n	8004762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	490c      	ldr	r1, [pc, #48]	@ (8004784 <__NVIC_SetPriority+0x4c>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	0112      	lsls	r2, r2, #4
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	440b      	add	r3, r1
 800475c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004760:	e00a      	b.n	8004778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4908      	ldr	r1, [pc, #32]	@ (8004788 <__NVIC_SetPriority+0x50>)
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	3b04      	subs	r3, #4
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	440b      	add	r3, r1
 8004776:	761a      	strb	r2, [r3, #24]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000e100 	.word	0xe000e100
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800478c:	b480      	push	{r7}
 800478e:	b089      	sub	sp, #36	@ 0x24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f1c3 0307 	rsb	r3, r3, #7
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	bf28      	it	cs
 80047aa:	2304      	movcs	r3, #4
 80047ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d902      	bls.n	80047bc <NVIC_EncodePriority+0x30>
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3b03      	subs	r3, #3
 80047ba:	e000      	b.n	80047be <NVIC_EncodePriority+0x32>
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	401a      	ands	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047d4:	f04f 31ff 	mov.w	r1, #4294967295
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	43d9      	mvns	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e4:	4313      	orrs	r3, r2
         );
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	@ 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004804:	d301      	bcc.n	800480a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004806:	2301      	movs	r3, #1
 8004808:	e00f      	b.n	800482a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <SysTick_Config+0x40>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004812:	210f      	movs	r1, #15
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	f7ff ff8e 	bl	8004738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <SysTick_Config+0x40>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004822:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <SysTick_Config+0x40>)
 8004824:	2207      	movs	r2, #7
 8004826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	e000e010 	.word	0xe000e010

08004838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff29 	bl	8004698 <__NVIC_SetPriorityGrouping>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004860:	f7ff ff3e 	bl	80046e0 <__NVIC_GetPriorityGrouping>
 8004864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	6978      	ldr	r0, [r7, #20]
 800486c:	f7ff ff8e 	bl	800478c <NVIC_EncodePriority>
 8004870:	4602      	mov	r2, r0
 8004872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ff5d 	bl	8004738 <__NVIC_SetPriority>
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	4603      	mov	r3, r0
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff ff31 	bl	80046fc <__NVIC_EnableIRQ>
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ffa2 	bl	80047f4 <SysTick_Config>
 80048b0:	4603      	mov	r3, r0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048c8:	f7ff fb64 	bl	8003f94 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e099      	b.n	8004a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f8:	e00f      	b.n	800491a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048fa:	f7ff fb4b 	bl	8003f94 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b05      	cmp	r3, #5
 8004906:	d908      	bls.n	800491a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e078      	b.n	8004a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e8      	bne.n	80048fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4b38      	ldr	r3, [pc, #224]	@ (8004a14 <HAL_DMA_Init+0x158>)
 8004934:	4013      	ands	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800495e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	2b04      	cmp	r3, #4
 8004972:	d107      	bne.n	8004984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	4313      	orrs	r3, r2
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d117      	bne.n	80049de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8bd 	bl	8004b40 <DMA_CheckFifoParam>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2240      	movs	r2, #64	@ 0x40
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80049da:	2301      	movs	r3, #1
 80049dc:	e016      	b.n	8004a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f874 	bl	8004ad4 <DMA_CalcBaseAndBitshift>
 80049ec:	4603      	mov	r3, r0
 80049ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	223f      	movs	r2, #63	@ 0x3f
 80049f6:	409a      	lsls	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	f010803f 	.word	0xf010803f

08004a18 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e050      	b.n	8004acc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	e048      	b.n	8004acc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2221      	movs	r2, #33	@ 0x21
 8004a78:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f82a 	bl	8004ad4 <DMA_CalcBaseAndBitshift>
 8004a80:	4603      	mov	r3, r0
 8004a82:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	223f      	movs	r2, #63	@ 0x3f
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	3b10      	subs	r3, #16
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <DMA_CalcBaseAndBitshift+0x64>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <DMA_CalcBaseAndBitshift+0x68>)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d909      	bls.n	8004b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b14:	e007      	b.n	8004b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	aaaaaaab 	.word	0xaaaaaaab
 8004b3c:	0800aae4 	.word	0x0800aae4

08004b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11f      	bne.n	8004b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d856      	bhi.n	8004c0e <DMA_CheckFifoParam+0xce>
 8004b60:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <DMA_CheckFifoParam+0x28>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b8b 	.word	0x08004b8b
 8004b70:	08004b79 	.word	0x08004b79
 8004b74:	08004c0f 	.word	0x08004c0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d046      	beq.n	8004c12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e043      	b.n	8004c12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b92:	d140      	bne.n	8004c16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b98:	e03d      	b.n	8004c16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba2:	d121      	bne.n	8004be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d837      	bhi.n	8004c1a <DMA_CheckFifoParam+0xda>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <DMA_CheckFifoParam+0x70>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc7 	.word	0x08004bc7
 8004bb8:	08004bc1 	.word	0x08004bc1
 8004bbc:	08004bd9 	.word	0x08004bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc4:	e030      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d025      	beq.n	8004c1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd6:	e022      	b.n	8004c1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004be0:	d11f      	bne.n	8004c22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004be6:	e01c      	b.n	8004c22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d903      	bls.n	8004bf6 <DMA_CheckFifoParam+0xb6>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d003      	beq.n	8004bfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bf4:	e018      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfa:	e015      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0c:	e00b      	b.n	8004c26 <DMA_CheckFifoParam+0xe6>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e00a      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c12:	bf00      	nop
 8004c14:	e008      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c16:	bf00      	nop
 8004c18:	e006      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e004      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c26:	bf00      	nop
    }
  } 
  
  return status; 
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e03b      	b.n	8004cc2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fbae 	bl	80023c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	f023 0107 	bic.w	r1, r3, #7
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ca2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68d1      	ldr	r1, [r2, #12]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af02      	add	r7, sp, #8
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_DMA2D_Start+0x1c>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e018      	b.n	8004d18 <HAL_DMA2D_Start+0x4e>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f989 	bl	8005018 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d056      	beq.n	8004dea <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3c:	f7ff f92a 	bl	8003f94 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d42:	e04b      	b.n	8004ddc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d023      	beq.n	8004d9e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	f043 0202 	orr.w	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2221      	movs	r2, #33	@ 0x21
 8004d88:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0a5      	b.n	8004eea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d01a      	beq.n	8004ddc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7ff f8f5 	bl	8003f94 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <HAL_DMA2D_PollForTransfer+0x9c>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2203      	movs	r2, #3
 8004dcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e086      	b.n	8004eea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ac      	beq.n	8004d44 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d061      	beq.n	8004ed0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7ff f8c2 	bl	8003f94 <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e12:	e056      	b.n	8004ec2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d02e      	beq.n	8004e84 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	f043 0204 	orr.w	r2, r3, #4
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	f043 0201 	orr.w	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2229      	movs	r2, #41	@ 0x29
 8004e6e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2204      	movs	r2, #4
 8004e74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e032      	b.n	8004eea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e8c:	f7ff f882 	bl	8003f94 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <HAL_DMA2D_PollForTransfer+0x182>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e013      	b.n	8004eea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0a1      	beq.n	8004e14 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2212      	movs	r2, #18
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_DMA2D_ConfigLayer+0x20>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e079      	b.n	8005008 <HAL_DMA2D_ConfigLayer+0x114>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	3318      	adds	r3, #24
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004f3e:	4b35      	ldr	r3, [pc, #212]	@ (8005014 <HAL_DMA2D_ConfigLayer+0x120>)
 8004f40:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b0a      	cmp	r3, #10
 8004f48:	d003      	beq.n	8004f52 <HAL_DMA2D_ConfigLayer+0x5e>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b09      	cmp	r3, #9
 8004f50:	d107      	bne.n	8004f62 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e005      	b.n	8004f6e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d120      	bne.n	8004fb6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	ea02 0103 	and.w	r1, r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b0a      	cmp	r3, #10
 8004f9c:	d003      	beq.n	8004fa6 <HAL_DMA2D_ConfigLayer+0xb2>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	d127      	bne.n	8004ff6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004fb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fb4:	e01f      	b.n	8004ff6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	ea02 0103 	and.w	r1, r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b0a      	cmp	r3, #10
 8004fde:	d003      	beq.n	8004fe8 <HAL_DMA2D_ConfigLayer+0xf4>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	d106      	bne.n	8004ff6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004ff4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	ff03000f 	.word	0xff03000f

08005018 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005018:	b480      	push	{r7}
 800501a:	b08b      	sub	sp, #44	@ 0x2c
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	041a      	lsls	r2, r3, #16
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005050:	d174      	bne.n	800513c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005058:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005060:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005068:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d108      	bne.n	800508a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	431a      	orrs	r2, r3
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	4313      	orrs	r3, r2
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
 8005088:	e053      	b.n	8005132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d106      	bne.n	80050a0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4313      	orrs	r3, r2
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
 800509e:	e048      	b.n	8005132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d111      	bne.n	80050cc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	0cdb      	lsrs	r3, r3, #19
 80050ac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	0a9b      	lsrs	r3, r3, #10
 80050b2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	08db      	lsrs	r3, r3, #3
 80050b8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	02db      	lsls	r3, r3, #11
 80050c2:	4313      	orrs	r3, r2
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ca:	e032      	b.n	8005132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d117      	bne.n	8005104 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	0fdb      	lsrs	r3, r3, #31
 80050d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	0cdb      	lsrs	r3, r3, #19
 80050de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	0adb      	lsrs	r3, r3, #11
 80050e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	431a      	orrs	r2, r3
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	03db      	lsls	r3, r3, #15
 80050fa:	4313      	orrs	r3, r2
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24
 8005102:	e016      	b.n	8005132 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	0f1b      	lsrs	r3, r3, #28
 8005108:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	0d1b      	lsrs	r3, r3, #20
 800510e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	0b1b      	lsrs	r3, r3, #12
 8005114:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	011a      	lsls	r2, r3, #4
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	431a      	orrs	r2, r3
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	4313      	orrs	r3, r2
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005138:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800513a:	e003      	b.n	8005144 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	60da      	str	r2, [r3, #12]
}
 8005144:	bf00      	nop
 8005146:	372c      	adds	r7, #44	@ 0x2c
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	@ 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	e177      	b.n	800545c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800516c:	2201      	movs	r2, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4013      	ands	r3, r2
 800517e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	f040 8166 	bne.w	8005456 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d005      	beq.n	80051a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d130      	bne.n	8005204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	2203      	movs	r2, #3
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051d8:	2201      	movs	r2, #1
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 0201 	and.w	r2, r3, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b03      	cmp	r3, #3
 800520e:	d017      	beq.n	8005240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d123      	bne.n	8005294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	08da      	lsrs	r2, r3, #3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3208      	adds	r2, #8
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	220f      	movs	r2, #15
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	08da      	lsrs	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3208      	adds	r2, #8
 800528e:	69b9      	ldr	r1, [r7, #24]
 8005290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	2203      	movs	r2, #3
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f003 0203 	and.w	r2, r3, #3
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80c0 	beq.w	8005456 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b66      	ldr	r3, [pc, #408]	@ (8005474 <HAL_GPIO_Init+0x324>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	4a65      	ldr	r2, [pc, #404]	@ (8005474 <HAL_GPIO_Init+0x324>)
 80052e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052e6:	4b63      	ldr	r3, [pc, #396]	@ (8005474 <HAL_GPIO_Init+0x324>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052f2:	4a61      	ldr	r2, [pc, #388]	@ (8005478 <HAL_GPIO_Init+0x328>)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	3302      	adds	r3, #2
 80052fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	220f      	movs	r2, #15
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a58      	ldr	r2, [pc, #352]	@ (800547c <HAL_GPIO_Init+0x32c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d037      	beq.n	800538e <HAL_GPIO_Init+0x23e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a57      	ldr	r2, [pc, #348]	@ (8005480 <HAL_GPIO_Init+0x330>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d031      	beq.n	800538a <HAL_GPIO_Init+0x23a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a56      	ldr	r2, [pc, #344]	@ (8005484 <HAL_GPIO_Init+0x334>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02b      	beq.n	8005386 <HAL_GPIO_Init+0x236>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a55      	ldr	r2, [pc, #340]	@ (8005488 <HAL_GPIO_Init+0x338>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d025      	beq.n	8005382 <HAL_GPIO_Init+0x232>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a54      	ldr	r2, [pc, #336]	@ (800548c <HAL_GPIO_Init+0x33c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01f      	beq.n	800537e <HAL_GPIO_Init+0x22e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a53      	ldr	r2, [pc, #332]	@ (8005490 <HAL_GPIO_Init+0x340>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d019      	beq.n	800537a <HAL_GPIO_Init+0x22a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a52      	ldr	r2, [pc, #328]	@ (8005494 <HAL_GPIO_Init+0x344>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_GPIO_Init+0x226>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a51      	ldr	r2, [pc, #324]	@ (8005498 <HAL_GPIO_Init+0x348>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00d      	beq.n	8005372 <HAL_GPIO_Init+0x222>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a50      	ldr	r2, [pc, #320]	@ (800549c <HAL_GPIO_Init+0x34c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <HAL_GPIO_Init+0x21e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4f      	ldr	r2, [pc, #316]	@ (80054a0 <HAL_GPIO_Init+0x350>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_GPIO_Init+0x21a>
 8005366:	2309      	movs	r3, #9
 8005368:	e012      	b.n	8005390 <HAL_GPIO_Init+0x240>
 800536a:	230a      	movs	r3, #10
 800536c:	e010      	b.n	8005390 <HAL_GPIO_Init+0x240>
 800536e:	2308      	movs	r3, #8
 8005370:	e00e      	b.n	8005390 <HAL_GPIO_Init+0x240>
 8005372:	2307      	movs	r3, #7
 8005374:	e00c      	b.n	8005390 <HAL_GPIO_Init+0x240>
 8005376:	2306      	movs	r3, #6
 8005378:	e00a      	b.n	8005390 <HAL_GPIO_Init+0x240>
 800537a:	2305      	movs	r3, #5
 800537c:	e008      	b.n	8005390 <HAL_GPIO_Init+0x240>
 800537e:	2304      	movs	r3, #4
 8005380:	e006      	b.n	8005390 <HAL_GPIO_Init+0x240>
 8005382:	2303      	movs	r3, #3
 8005384:	e004      	b.n	8005390 <HAL_GPIO_Init+0x240>
 8005386:	2302      	movs	r3, #2
 8005388:	e002      	b.n	8005390 <HAL_GPIO_Init+0x240>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_GPIO_Init+0x240>
 800538e:	2300      	movs	r3, #0
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	f002 0203 	and.w	r2, r2, #3
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	4093      	lsls	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a0:	4935      	ldr	r1, [pc, #212]	@ (8005478 <HAL_GPIO_Init+0x328>)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	3302      	adds	r3, #2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ae:	4b3d      	ldr	r3, [pc, #244]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053d2:	4a34      	ldr	r2, [pc, #208]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053d8:	4b32      	ldr	r3, [pc, #200]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053fc:	4a29      	ldr	r2, [pc, #164]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005402:	4b28      	ldr	r3, [pc, #160]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005426:	4a1f      	ldr	r2, [pc, #124]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800542c:	4b1d      	ldr	r3, [pc, #116]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005450:	4a14      	ldr	r2, [pc, #80]	@ (80054a4 <HAL_GPIO_Init+0x354>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	f67f ae84 	bls.w	800516c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	@ 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	40013800 	.word	0x40013800
 800547c:	40020000 	.word	0x40020000
 8005480:	40020400 	.word	0x40020400
 8005484:	40020800 	.word	0x40020800
 8005488:	40020c00 	.word	0x40020c00
 800548c:	40021000 	.word	0x40021000
 8005490:	40021400 	.word	0x40021400
 8005494:	40021800 	.word	0x40021800
 8005498:	40021c00 	.word	0x40021c00
 800549c:	40022000 	.word	0x40022000
 80054a0:	40022400 	.word	0x40022400
 80054a4:	40013c00 	.word	0x40013c00

080054a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e0d9      	b.n	8005678 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054c4:	2201      	movs	r2, #1
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	f040 80c9 	bne.w	8005672 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80054e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005690 <HAL_GPIO_DeInit+0x1e8>)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	3302      	adds	r3, #2
 80054e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	220f      	movs	r2, #15
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a63      	ldr	r2, [pc, #396]	@ (8005694 <HAL_GPIO_DeInit+0x1ec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d037      	beq.n	800557a <HAL_GPIO_DeInit+0xd2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a62      	ldr	r2, [pc, #392]	@ (8005698 <HAL_GPIO_DeInit+0x1f0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_GPIO_DeInit+0xce>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a61      	ldr	r2, [pc, #388]	@ (800569c <HAL_GPIO_DeInit+0x1f4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02b      	beq.n	8005572 <HAL_GPIO_DeInit+0xca>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a60      	ldr	r2, [pc, #384]	@ (80056a0 <HAL_GPIO_DeInit+0x1f8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d025      	beq.n	800556e <HAL_GPIO_DeInit+0xc6>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a5f      	ldr	r2, [pc, #380]	@ (80056a4 <HAL_GPIO_DeInit+0x1fc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <HAL_GPIO_DeInit+0xc2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a5e      	ldr	r2, [pc, #376]	@ (80056a8 <HAL_GPIO_DeInit+0x200>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d019      	beq.n	8005566 <HAL_GPIO_DeInit+0xbe>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a5d      	ldr	r2, [pc, #372]	@ (80056ac <HAL_GPIO_DeInit+0x204>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_GPIO_DeInit+0xba>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a5c      	ldr	r2, [pc, #368]	@ (80056b0 <HAL_GPIO_DeInit+0x208>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00d      	beq.n	800555e <HAL_GPIO_DeInit+0xb6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a5b      	ldr	r2, [pc, #364]	@ (80056b4 <HAL_GPIO_DeInit+0x20c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <HAL_GPIO_DeInit+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a5a      	ldr	r2, [pc, #360]	@ (80056b8 <HAL_GPIO_DeInit+0x210>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_GPIO_DeInit+0xae>
 8005552:	2309      	movs	r3, #9
 8005554:	e012      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 8005556:	230a      	movs	r3, #10
 8005558:	e010      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 800555a:	2308      	movs	r3, #8
 800555c:	e00e      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 800555e:	2307      	movs	r3, #7
 8005560:	e00c      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 8005562:	2306      	movs	r3, #6
 8005564:	e00a      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 8005566:	2305      	movs	r3, #5
 8005568:	e008      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 800556a:	2304      	movs	r3, #4
 800556c:	e006      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 800556e:	2303      	movs	r3, #3
 8005570:	e004      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 8005572:	2302      	movs	r3, #2
 8005574:	e002      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_GPIO_DeInit+0xd4>
 800557a:	2300      	movs	r3, #0
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	f002 0203 	and.w	r2, r2, #3
 8005582:	0092      	lsls	r2, r2, #2
 8005584:	4093      	lsls	r3, r2
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d132      	bne.n	80055f2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800558c:	4b4b      	ldr	r3, [pc, #300]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	43db      	mvns	r3, r3
 8005594:	4949      	ldr	r1, [pc, #292]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 8005596:	4013      	ands	r3, r2
 8005598:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800559a:	4b48      	ldr	r3, [pc, #288]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	4946      	ldr	r1, [pc, #280]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055a8:	4b44      	ldr	r3, [pc, #272]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	4942      	ldr	r1, [pc, #264]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055b6:	4b41      	ldr	r3, [pc, #260]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	43db      	mvns	r3, r3
 80055be:	493f      	ldr	r1, [pc, #252]	@ (80056bc <HAL_GPIO_DeInit+0x214>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	220f      	movs	r2, #15
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80055d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005690 <HAL_GPIO_DeInit+0x1e8>)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	3302      	adds	r3, #2
 80055dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	43da      	mvns	r2, r3
 80055e4:	482a      	ldr	r0, [pc, #168]	@ (8005690 <HAL_GPIO_DeInit+0x1e8>)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	400a      	ands	r2, r1
 80055ec:	3302      	adds	r3, #2
 80055ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2103      	movs	r1, #3
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	08da      	lsrs	r2, r3, #3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3208      	adds	r2, #8
 8005610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	220f      	movs	r2, #15
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	08d2      	lsrs	r2, r2, #3
 8005628:	4019      	ands	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3208      	adds	r2, #8
 800562e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	2103      	movs	r1, #3
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	2101      	movs	r1, #1
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	401a      	ands	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	2103      	movs	r1, #3
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	401a      	ands	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	3301      	adds	r3, #1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	f67f af22 	bls.w	80054c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40013800 	.word	0x40013800
 8005694:	40020000 	.word	0x40020000
 8005698:	40020400 	.word	0x40020400
 800569c:	40020800 	.word	0x40020800
 80056a0:	40020c00 	.word	0x40020c00
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40021400 	.word	0x40021400
 80056ac:	40021800 	.word	0x40021800
 80056b0:	40021c00 	.word	0x40021c00
 80056b4:	40022000 	.word	0x40022000
 80056b8:	40022400 	.word	0x40022400
 80056bc:	40013c00 	.word	0x40013c00

080056c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	887b      	ldrh	r3, [r7, #2]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e001      	b.n	80056e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
 80056fc:	4613      	mov	r3, r2
 80056fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005706:	887a      	ldrh	r2, [r7, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800570c:	e003      	b.n	8005716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	041a      	lsls	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619a      	str	r2, [r3, #24]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800572e:	4b08      	ldr	r3, [pc, #32]	@ (8005750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800573a:	4a05      	ldr	r2, [pc, #20]	@ (8005750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f806 	bl	8005754 <HAL_GPIO_EXTI_Callback>
  }
}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40013c00 	.word	0x40013c00

08005754 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e12b      	b.n	80059d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc fe36 	bl	8002404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	@ 0x24
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057d0:	f001 f8cc 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 80057d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4a81      	ldr	r2, [pc, #516]	@ (80059e0 <HAL_I2C_Init+0x274>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d807      	bhi.n	80057f0 <HAL_I2C_Init+0x84>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4a80      	ldr	r2, [pc, #512]	@ (80059e4 <HAL_I2C_Init+0x278>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	bf94      	ite	ls
 80057e8:	2301      	movls	r3, #1
 80057ea:	2300      	movhi	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	e006      	b.n	80057fe <HAL_I2C_Init+0x92>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4a7d      	ldr	r2, [pc, #500]	@ (80059e8 <HAL_I2C_Init+0x27c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	bf94      	ite	ls
 80057f8:	2301      	movls	r3, #1
 80057fa:	2300      	movhi	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0e7      	b.n	80059d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a78      	ldr	r2, [pc, #480]	@ (80059ec <HAL_I2C_Init+0x280>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	0c9b      	lsrs	r3, r3, #18
 8005810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a6a      	ldr	r2, [pc, #424]	@ (80059e0 <HAL_I2C_Init+0x274>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d802      	bhi.n	8005840 <HAL_I2C_Init+0xd4>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3301      	adds	r3, #1
 800583e:	e009      	b.n	8005854 <HAL_I2C_Init+0xe8>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	4a69      	ldr	r2, [pc, #420]	@ (80059f0 <HAL_I2C_Init+0x284>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	099b      	lsrs	r3, r3, #6
 8005852:	3301      	adds	r3, #1
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	430b      	orrs	r3, r1
 800585a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005866:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	495c      	ldr	r1, [pc, #368]	@ (80059e0 <HAL_I2C_Init+0x274>)
 8005870:	428b      	cmp	r3, r1
 8005872:	d819      	bhi.n	80058a8 <HAL_I2C_Init+0x13c>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1e59      	subs	r1, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005888:	400b      	ands	r3, r1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_I2C_Init+0x138>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1e59      	subs	r1, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	fbb1 f3f3 	udiv	r3, r1, r3
 800589c:	3301      	adds	r3, #1
 800589e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a2:	e051      	b.n	8005948 <HAL_I2C_Init+0x1dc>
 80058a4:	2304      	movs	r3, #4
 80058a6:	e04f      	b.n	8005948 <HAL_I2C_Init+0x1dc>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d111      	bne.n	80058d4 <HAL_I2C_Init+0x168>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1e58      	subs	r0, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	440b      	add	r3, r1
 80058be:	fbb0 f3f3 	udiv	r3, r0, r3
 80058c2:	3301      	adds	r3, #1
 80058c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e012      	b.n	80058fa <HAL_I2C_Init+0x18e>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1e58      	subs	r0, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6859      	ldr	r1, [r3, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	0099      	lsls	r1, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ea:	3301      	adds	r3, #1
 80058ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_I2C_Init+0x196>
 80058fe:	2301      	movs	r3, #1
 8005900:	e022      	b.n	8005948 <HAL_I2C_Init+0x1dc>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10e      	bne.n	8005928 <HAL_I2C_Init+0x1bc>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1e58      	subs	r0, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	440b      	add	r3, r1
 8005918:	fbb0 f3f3 	udiv	r3, r0, r3
 800591c:	3301      	adds	r3, #1
 800591e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005926:	e00f      	b.n	8005948 <HAL_I2C_Init+0x1dc>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	1e58      	subs	r0, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6859      	ldr	r1, [r3, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	0099      	lsls	r1, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	fbb0 f3f3 	udiv	r3, r0, r3
 800593e:	3301      	adds	r3, #1
 8005940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	6809      	ldr	r1, [r1, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6911      	ldr	r1, [r2, #16]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68d2      	ldr	r2, [r2, #12]
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	430b      	orrs	r3, r1
 800598a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	000186a0 	.word	0x000186a0
 80059e4:	001e847f 	.word	0x001e847f
 80059e8:	003d08ff 	.word	0x003d08ff
 80059ec:	431bde83 	.word	0x431bde83
 80059f0:	10624dd3 	.word	0x10624dd3

080059f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d129      	bne.n	8005a5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2224      	movs	r2, #36	@ 0x24
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0210 	bic.w	r2, r2, #16
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0201 	orr.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d12a      	bne.n	8005adc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	@ 0x24
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
 8005aa8:	f023 030f 	bic.w	r3, r3, #15
 8005aac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	89fb      	ldrh	r3, [r7, #14]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	89fa      	ldrh	r2, [r7, #14]
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0bf      	b.n	8005c7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fce0 	bl	80024d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005b2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c88 <HAL_LTDC_Init+0x19c>)
 8005b60:	400b      	ands	r3, r1
 8005b62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68d9      	ldr	r1, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c88 <HAL_LTDC_Init+0x19c>)
 8005b8e:	400b      	ands	r3, r1
 8005b90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68d9      	ldr	r1, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6919      	ldr	r1, [r3, #16]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b33      	ldr	r3, [pc, #204]	@ (8005c88 <HAL_LTDC_Init+0x19c>)
 8005bbc:	400b      	ands	r3, r1
 8005bbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6959      	ldr	r1, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b27      	ldr	r3, [pc, #156]	@ (8005c88 <HAL_LTDC_Init+0x19c>)
 8005bea:	400b      	ands	r3, r1
 8005bec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6959      	ldr	r1, [r3, #20]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0206 	orr.w	r2, r2, #6
 8005c5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	f000f800 	.word	0xf000f800

08005c8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c8c:	b5b0      	push	{r4, r5, r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_LTDC_ConfigLayer+0x1a>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e02c      	b.n	8005d00 <HAL_LTDC_ConfigLayer+0x74>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2134      	movs	r1, #52	@ 0x34
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4614      	mov	r4, r2
 8005cca:	461d      	mov	r5, r3
 8005ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f83b 	bl	8005d5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2201      	movs	r2, #1
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bdb0      	pop	{r4, r5, r7, pc}

08005d08 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_LTDC_EnableDither+0x16>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e016      	b.n	8005d4c <HAL_LTDC_EnableDither+0x44>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <HAL_LTDC_EnableDither+0x50>)
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <HAL_LTDC_EnableDither+0x50>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d38:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	40016800 	.word	0x40016800

08005d5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	@ 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d78:	4413      	add	r3, r2
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	01db      	lsls	r3, r3, #7
 8005d88:	4413      	add	r3, r2
 8005d8a:	3384      	adds	r3, #132	@ 0x84
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	4611      	mov	r1, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	01d2      	lsls	r2, r2, #7
 8005d98:	440a      	add	r2, r1
 8005d9a:	3284      	adds	r2, #132	@ 0x84
 8005d9c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005da0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005db2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005db4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	01db      	lsls	r3, r3, #7
 8005dc0:	440b      	add	r3, r1
 8005dc2:	3384      	adds	r3, #132	@ 0x84
 8005dc4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005dca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dda:	4413      	add	r3, r2
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	01db      	lsls	r3, r3, #7
 8005dea:	4413      	add	r3, r2
 8005dec:	3384      	adds	r3, #132	@ 0x84
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	4611      	mov	r1, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	01d2      	lsls	r2, r2, #7
 8005dfa:	440a      	add	r2, r1
 8005dfc:	3284      	adds	r2, #132	@ 0x84
 8005dfe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005e02:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e12:	4413      	add	r3, r2
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	01db      	lsls	r3, r3, #7
 8005e20:	440b      	add	r3, r1
 8005e22:	3384      	adds	r3, #132	@ 0x84
 8005e24:	4619      	mov	r1, r3
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	01db      	lsls	r3, r3, #7
 8005e36:	4413      	add	r3, r2
 8005e38:	3384      	adds	r3, #132	@ 0x84
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	4611      	mov	r1, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	01d2      	lsls	r2, r2, #7
 8005e46:	440a      	add	r2, r1
 8005e48:	3284      	adds	r2, #132	@ 0x84
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	01db      	lsls	r3, r3, #7
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3384      	adds	r3, #132	@ 0x84
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	061b      	lsls	r3, r3, #24
 8005e80:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	01db      	lsls	r3, r3, #7
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3384      	adds	r3, #132	@ 0x84
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	01db      	lsls	r3, r3, #7
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3384      	adds	r3, #132	@ 0x84
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005eac:	461a      	mov	r2, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	01db      	lsls	r3, r3, #7
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3384      	adds	r3, #132	@ 0x84
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	01db      	lsls	r3, r3, #7
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3384      	adds	r3, #132	@ 0x84
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	01d2      	lsls	r2, r2, #7
 8005ee6:	440a      	add	r2, r1
 8005ee8:	3284      	adds	r2, #132	@ 0x84
 8005eea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005eee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	01db      	lsls	r3, r3, #7
 8005efa:	4413      	add	r3, r2
 8005efc:	3384      	adds	r3, #132	@ 0x84
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	4413      	add	r3, r2
 8005f12:	3384      	adds	r3, #132	@ 0x84
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	01d2      	lsls	r2, r2, #7
 8005f20:	440a      	add	r2, r1
 8005f22:	3284      	adds	r2, #132	@ 0x84
 8005f24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6809      	ldr	r1, [r1, #0]
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	01c9      	lsls	r1, r1, #7
 8005f40:	4401      	add	r1, r0
 8005f42:	3184      	adds	r1, #132	@ 0x84
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	01db      	lsls	r3, r3, #7
 8005f52:	4413      	add	r3, r2
 8005f54:	3384      	adds	r3, #132	@ 0x84
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	01db      	lsls	r3, r3, #7
 8005f62:	4413      	add	r3, r2
 8005f64:	3384      	adds	r3, #132	@ 0x84
 8005f66:	461a      	mov	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	01db      	lsls	r3, r3, #7
 8005f76:	4413      	add	r3, r2
 8005f78:	3384      	adds	r3, #132	@ 0x84
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d102      	bne.n	8005f90 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	e01b      	b.n	8005fc8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d102      	bne.n	8005f9e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	e014      	b.n	8005fc8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d00b      	beq.n	8005fbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d007      	beq.n	8005fbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d003      	beq.n	8005fbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d102      	bne.n	8005fc4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	e001      	b.n	8005fc8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	01db      	lsls	r3, r3, #7
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3384      	adds	r3, #132	@ 0x84
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	4611      	mov	r1, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	01d2      	lsls	r2, r2, #7
 8005fe2:	440a      	add	r2, r1
 8005fe4:	3284      	adds	r2, #132	@ 0x84
 8005fe6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6859      	ldr	r1, [r3, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1acb      	subs	r3, r1, r3
 8006002:	69f9      	ldr	r1, [r7, #28]
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6809      	ldr	r1, [r1, #0]
 800600e:	4608      	mov	r0, r1
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	01c9      	lsls	r1, r1, #7
 8006014:	4401      	add	r1, r0
 8006016:	3184      	adds	r1, #132	@ 0x84
 8006018:	4313      	orrs	r3, r2
 800601a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4413      	add	r3, r2
 8006028:	3384      	adds	r3, #132	@ 0x84
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	4611      	mov	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	01d2      	lsls	r2, r2, #7
 8006036:	440a      	add	r2, r1
 8006038:	3284      	adds	r2, #132	@ 0x84
 800603a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800603e:	f023 0307 	bic.w	r3, r3, #7
 8006042:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	01db      	lsls	r3, r3, #7
 800604e:	4413      	add	r3, r2
 8006050:	3384      	adds	r3, #132	@ 0x84
 8006052:	461a      	mov	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006058:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4413      	add	r3, r2
 8006066:	3384      	adds	r3, #132	@ 0x84
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	4611      	mov	r1, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	01d2      	lsls	r2, r2, #7
 8006074:	440a      	add	r2, r1
 8006076:	3284      	adds	r2, #132	@ 0x84
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6013      	str	r3, [r2, #0]
}
 800607e:	bf00      	nop
 8006080:	3724      	adds	r7, #36	@ 0x24
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e267      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d075      	beq.n	8006196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060aa:	4b88      	ldr	r3, [pc, #544]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d00c      	beq.n	80060d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b6:	4b85      	ldr	r3, [pc, #532]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d112      	bne.n	80060e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060c2:	4b82      	ldr	r3, [pc, #520]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ce:	d10b      	bne.n	80060e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d0:	4b7e      	ldr	r3, [pc, #504]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d05b      	beq.n	8006194 <HAL_RCC_OscConfig+0x108>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d157      	bne.n	8006194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e242      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f0:	d106      	bne.n	8006100 <HAL_RCC_OscConfig+0x74>
 80060f2:	4b76      	ldr	r3, [pc, #472]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a75      	ldr	r2, [pc, #468]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80060f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e01d      	b.n	800613c <HAL_RCC_OscConfig+0xb0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006108:	d10c      	bne.n	8006124 <HAL_RCC_OscConfig+0x98>
 800610a:	4b70      	ldr	r3, [pc, #448]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a6f      	ldr	r2, [pc, #444]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	4b6d      	ldr	r3, [pc, #436]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a6c      	ldr	r2, [pc, #432]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e00b      	b.n	800613c <HAL_RCC_OscConfig+0xb0>
 8006124:	4b69      	ldr	r3, [pc, #420]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a68      	ldr	r2, [pc, #416]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 800612a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b66      	ldr	r3, [pc, #408]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a65      	ldr	r2, [pc, #404]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800613a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d013      	beq.n	800616c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fd ff26 	bl	8003f94 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800614c:	f7fd ff22 	bl	8003f94 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	@ 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e207      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615e:	4b5b      	ldr	r3, [pc, #364]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0xc0>
 800616a:	e014      	b.n	8006196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616c:	f7fd ff12 	bl	8003f94 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006174:	f7fd ff0e 	bl	8003f94 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b64      	cmp	r3, #100	@ 0x64
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e1f3      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006186:	4b51      	ldr	r3, [pc, #324]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0xe8>
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d063      	beq.n	800626a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061a2:	4b4a      	ldr	r3, [pc, #296]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ae:	4b47      	ldr	r3, [pc, #284]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d11c      	bne.n	80061f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ba:	4b44      	ldr	r3, [pc, #272]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d116      	bne.n	80061f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061c6:	4b41      	ldr	r3, [pc, #260]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_RCC_OscConfig+0x152>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d001      	beq.n	80061de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e1c7      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061de:	4b3b      	ldr	r3, [pc, #236]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4937      	ldr	r1, [pc, #220]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f2:	e03a      	b.n	800626a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d020      	beq.n	800623e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061fc:	4b34      	ldr	r3, [pc, #208]	@ (80062d0 <HAL_RCC_OscConfig+0x244>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006202:	f7fd fec7 	bl	8003f94 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800620a:	f7fd fec3 	bl	8003f94 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e1a8      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621c:	4b2b      	ldr	r3, [pc, #172]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006228:	4b28      	ldr	r3, [pc, #160]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4925      	ldr	r1, [pc, #148]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006238:	4313      	orrs	r3, r2
 800623a:	600b      	str	r3, [r1, #0]
 800623c:	e015      	b.n	800626a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800623e:	4b24      	ldr	r3, [pc, #144]	@ (80062d0 <HAL_RCC_OscConfig+0x244>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fd fea6 	bl	8003f94 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800624c:	f7fd fea2 	bl	8003f94 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e187      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800625e:	4b1b      	ldr	r3, [pc, #108]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d036      	beq.n	80062e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800627e:	4b15      	ldr	r3, [pc, #84]	@ (80062d4 <HAL_RCC_OscConfig+0x248>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006284:	f7fd fe86 	bl	8003f94 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800628c:	f7fd fe82 	bl	8003f94 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e167      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <HAL_RCC_OscConfig+0x240>)
 80062a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0x200>
 80062aa:	e01b      	b.n	80062e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ac:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <HAL_RCC_OscConfig+0x248>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062b2:	f7fd fe6f 	bl	8003f94 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b8:	e00e      	b.n	80062d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ba:	f7fd fe6b 	bl	8003f94 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d907      	bls.n	80062d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e150      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
 80062cc:	40023800 	.word	0x40023800
 80062d0:	42470000 	.word	0x42470000
 80062d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062d8:	4b88      	ldr	r3, [pc, #544]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80062da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ea      	bne.n	80062ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8097 	beq.w	8006420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062f6:	4b81      	ldr	r3, [pc, #516]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10f      	bne.n	8006322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	4b7d      	ldr	r3, [pc, #500]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	4a7c      	ldr	r2, [pc, #496]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800630c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006310:	6413      	str	r3, [r2, #64]	@ 0x40
 8006312:	4b7a      	ldr	r3, [pc, #488]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800631e:	2301      	movs	r3, #1
 8006320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006322:	4b77      	ldr	r3, [pc, #476]	@ (8006500 <HAL_RCC_OscConfig+0x474>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d118      	bne.n	8006360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800632e:	4b74      	ldr	r3, [pc, #464]	@ (8006500 <HAL_RCC_OscConfig+0x474>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a73      	ldr	r2, [pc, #460]	@ (8006500 <HAL_RCC_OscConfig+0x474>)
 8006334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800633a:	f7fd fe2b 	bl	8003f94 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006342:	f7fd fe27 	bl	8003f94 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e10c      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006354:	4b6a      	ldr	r3, [pc, #424]	@ (8006500 <HAL_RCC_OscConfig+0x474>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d106      	bne.n	8006376 <HAL_RCC_OscConfig+0x2ea>
 8006368:	4b64      	ldr	r3, [pc, #400]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636c:	4a63      	ldr	r2, [pc, #396]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	6713      	str	r3, [r2, #112]	@ 0x70
 8006374:	e01c      	b.n	80063b0 <HAL_RCC_OscConfig+0x324>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b05      	cmp	r3, #5
 800637c:	d10c      	bne.n	8006398 <HAL_RCC_OscConfig+0x30c>
 800637e:	4b5f      	ldr	r3, [pc, #380]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	4a5e      	ldr	r2, [pc, #376]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006384:	f043 0304 	orr.w	r3, r3, #4
 8006388:	6713      	str	r3, [r2, #112]	@ 0x70
 800638a:	4b5c      	ldr	r3, [pc, #368]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	4a5b      	ldr	r2, [pc, #364]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	6713      	str	r3, [r2, #112]	@ 0x70
 8006396:	e00b      	b.n	80063b0 <HAL_RCC_OscConfig+0x324>
 8006398:	4b58      	ldr	r3, [pc, #352]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639c:	4a57      	ldr	r2, [pc, #348]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a4:	4b55      	ldr	r3, [pc, #340]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a8:	4a54      	ldr	r2, [pc, #336]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80063aa:	f023 0304 	bic.w	r3, r3, #4
 80063ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d015      	beq.n	80063e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b8:	f7fd fdec 	bl	8003f94 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063be:	e00a      	b.n	80063d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c0:	f7fd fde8 	bl	8003f94 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e0cb      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d6:	4b49      	ldr	r3, [pc, #292]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0ee      	beq.n	80063c0 <HAL_RCC_OscConfig+0x334>
 80063e2:	e014      	b.n	800640e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e4:	f7fd fdd6 	bl	8003f94 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fd fdd2 	bl	8003f94 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0b5      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006402:	4b3e      	ldr	r3, [pc, #248]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1ee      	bne.n	80063ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d105      	bne.n	8006420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006414:	4b39      	ldr	r3, [pc, #228]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	4a38      	ldr	r2, [pc, #224]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800641a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800641e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80a1 	beq.w	800656c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800642a:	4b34      	ldr	r3, [pc, #208]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	2b08      	cmp	r3, #8
 8006434:	d05c      	beq.n	80064f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d141      	bne.n	80064c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800643e:	4b31      	ldr	r3, [pc, #196]	@ (8006504 <HAL_RCC_OscConfig+0x478>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006444:	f7fd fda6 	bl	8003f94 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644c:	f7fd fda2 	bl	8003f94 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e087      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645e:	4b27      	ldr	r3, [pc, #156]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69da      	ldr	r2, [r3, #28]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006478:	019b      	lsls	r3, r3, #6
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	3b01      	subs	r3, #1
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	061b      	lsls	r3, r3, #24
 800648e:	491b      	ldr	r1, [pc, #108]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 8006490:	4313      	orrs	r3, r2
 8006492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006494:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <HAL_RCC_OscConfig+0x478>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649a:	f7fd fd7b 	bl	8003f94 <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a2:	f7fd fd77 	bl	8003f94 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e05c      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b4:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f0      	beq.n	80064a2 <HAL_RCC_OscConfig+0x416>
 80064c0:	e054      	b.n	800656c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c2:	4b10      	ldr	r3, [pc, #64]	@ (8006504 <HAL_RCC_OscConfig+0x478>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c8:	f7fd fd64 	bl	8003f94 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d0:	f7fd fd60 	bl	8003f94 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e045      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e2:	4b06      	ldr	r3, [pc, #24]	@ (80064fc <HAL_RCC_OscConfig+0x470>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x444>
 80064ee:	e03d      	b.n	800656c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d107      	bne.n	8006508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e038      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
 80064fc:	40023800 	.word	0x40023800
 8006500:	40007000 	.word	0x40007000
 8006504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006508:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <HAL_RCC_OscConfig+0x4ec>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d028      	beq.n	8006568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006520:	429a      	cmp	r2, r3
 8006522:	d121      	bne.n	8006568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652e:	429a      	cmp	r2, r3
 8006530:	d11a      	bne.n	8006568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006538:	4013      	ands	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800653e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006540:	4293      	cmp	r3, r2
 8006542:	d111      	bne.n	8006568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	3b01      	subs	r3, #1
 8006552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006554:	429a      	cmp	r2, r3
 8006556:	d107      	bne.n	8006568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800

0800657c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0cc      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006590:	4b68      	ldr	r3, [pc, #416]	@ (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d90c      	bls.n	80065b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659e:	4b65      	ldr	r3, [pc, #404]	@ (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b63      	ldr	r3, [pc, #396]	@ (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0b8      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d020      	beq.n	8006606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065d0:	4b59      	ldr	r3, [pc, #356]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4a58      	ldr	r2, [pc, #352]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065e8:	4b53      	ldr	r3, [pc, #332]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4a52      	ldr	r2, [pc, #328]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f4:	4b50      	ldr	r3, [pc, #320]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	494d      	ldr	r1, [pc, #308]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	4313      	orrs	r3, r2
 8006604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d044      	beq.n	800669c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d107      	bne.n	800662a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b47      	ldr	r3, [pc, #284]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d119      	bne.n	800665a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e07f      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d003      	beq.n	800663a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006636:	2b03      	cmp	r3, #3
 8006638:	d107      	bne.n	800664a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663a:	4b3f      	ldr	r3, [pc, #252]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e06f      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664a:	4b3b      	ldr	r3, [pc, #236]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e067      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800665a:	4b37      	ldr	r3, [pc, #220]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f023 0203 	bic.w	r2, r3, #3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4934      	ldr	r1, [pc, #208]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	4313      	orrs	r3, r2
 800666a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800666c:	f7fd fc92 	bl	8003f94 <HAL_GetTick>
 8006670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006672:	e00a      	b.n	800668a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006674:	f7fd fc8e 	bl	8003f94 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e04f      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800668a:	4b2b      	ldr	r3, [pc, #172]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 020c 	and.w	r2, r3, #12
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	429a      	cmp	r2, r3
 800669a:	d1eb      	bne.n	8006674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800669c:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d20c      	bcs.n	80066c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b22      	ldr	r3, [pc, #136]	@ (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b2:	4b20      	ldr	r3, [pc, #128]	@ (8006734 <HAL_RCC_ClockConfig+0x1b8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e032      	b.n	800672a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d0:	4b19      	ldr	r3, [pc, #100]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4916      	ldr	r1, [pc, #88]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ee:	4b12      	ldr	r3, [pc, #72]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	490e      	ldr	r1, [pc, #56]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006702:	f000 f821 	bl	8006748 <HAL_RCC_GetSysClockFreq>
 8006706:	4602      	mov	r2, r0
 8006708:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	490a      	ldr	r1, [pc, #40]	@ (800673c <HAL_RCC_ClockConfig+0x1c0>)
 8006714:	5ccb      	ldrb	r3, [r1, r3]
 8006716:	fa22 f303 	lsr.w	r3, r2, r3
 800671a:	4a09      	ldr	r2, [pc, #36]	@ (8006740 <HAL_RCC_ClockConfig+0x1c4>)
 800671c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800671e:	4b09      	ldr	r3, [pc, #36]	@ (8006744 <HAL_RCC_ClockConfig+0x1c8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd fbf2 	bl	8003f0c <HAL_InitTick>

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40023c00 	.word	0x40023c00
 8006738:	40023800 	.word	0x40023800
 800673c:	08009014 	.word	0x08009014
 8006740:	20000000 	.word	0x20000000
 8006744:	2000004c 	.word	0x2000004c

08006748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800674c:	b094      	sub	sp, #80	@ 0x50
 800674e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006760:	4b79      	ldr	r3, [pc, #484]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b08      	cmp	r3, #8
 800676a:	d00d      	beq.n	8006788 <HAL_RCC_GetSysClockFreq+0x40>
 800676c:	2b08      	cmp	r3, #8
 800676e:	f200 80e1 	bhi.w	8006934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0x34>
 8006776:	2b04      	cmp	r3, #4
 8006778:	d003      	beq.n	8006782 <HAL_RCC_GetSysClockFreq+0x3a>
 800677a:	e0db      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800677c:	4b73      	ldr	r3, [pc, #460]	@ (800694c <HAL_RCC_GetSysClockFreq+0x204>)
 800677e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006780:	e0db      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006782:	4b73      	ldr	r3, [pc, #460]	@ (8006950 <HAL_RCC_GetSysClockFreq+0x208>)
 8006784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006786:	e0d8      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006788:	4b6f      	ldr	r3, [pc, #444]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006790:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006792:	4b6d      	ldr	r3, [pc, #436]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d063      	beq.n	8006866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800679e:	4b6a      	ldr	r3, [pc, #424]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	099b      	lsrs	r3, r3, #6
 80067a4:	2200      	movs	r2, #0
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f04f 0000 	mov.w	r0, #0
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	0159      	lsls	r1, r3, #5
 80067c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067cc:	0150      	lsls	r0, r2, #5
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4621      	mov	r1, r4
 80067d4:	1a51      	subs	r1, r2, r1
 80067d6:	6139      	str	r1, [r7, #16]
 80067d8:	4629      	mov	r1, r5
 80067da:	eb63 0301 	sbc.w	r3, r3, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ec:	4659      	mov	r1, fp
 80067ee:	018b      	lsls	r3, r1, #6
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067f6:	4651      	mov	r1, sl
 80067f8:	018a      	lsls	r2, r1, #6
 80067fa:	4651      	mov	r1, sl
 80067fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006800:	4659      	mov	r1, fp
 8006802:	eb63 0901 	sbc.w	r9, r3, r1
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800681a:	4690      	mov	r8, r2
 800681c:	4699      	mov	r9, r3
 800681e:	4623      	mov	r3, r4
 8006820:	eb18 0303 	adds.w	r3, r8, r3
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	462b      	mov	r3, r5
 8006828:	eb49 0303 	adc.w	r3, r9, r3
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800683a:	4629      	mov	r1, r5
 800683c:	024b      	lsls	r3, r1, #9
 800683e:	4621      	mov	r1, r4
 8006840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006844:	4621      	mov	r1, r4
 8006846:	024a      	lsls	r2, r1, #9
 8006848:	4610      	mov	r0, r2
 800684a:	4619      	mov	r1, r3
 800684c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684e:	2200      	movs	r2, #0
 8006850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006858:	f7f9 ffce 	bl	80007f8 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006864:	e058      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006866:	4b38      	ldr	r3, [pc, #224]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	2200      	movs	r2, #0
 800686e:	4618      	mov	r0, r3
 8006870:	4611      	mov	r1, r2
 8006872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	2300      	movs	r3, #0
 800687a:	627b      	str	r3, [r7, #36]	@ 0x24
 800687c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	0159      	lsls	r1, r3, #5
 800688e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006892:	0150      	lsls	r0, r2, #5
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4641      	mov	r1, r8
 800689a:	ebb2 0a01 	subs.w	sl, r2, r1
 800689e:	4649      	mov	r1, r9
 80068a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068b8:	ebb2 040a 	subs.w	r4, r2, sl
 80068bc:	eb63 050b 	sbc.w	r5, r3, fp
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	00eb      	lsls	r3, r5, #3
 80068ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ce:	00e2      	lsls	r2, r4, #3
 80068d0:	4614      	mov	r4, r2
 80068d2:	461d      	mov	r5, r3
 80068d4:	4643      	mov	r3, r8
 80068d6:	18e3      	adds	r3, r4, r3
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	464b      	mov	r3, r9
 80068dc:	eb45 0303 	adc.w	r3, r5, r3
 80068e0:	607b      	str	r3, [r7, #4]
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ee:	4629      	mov	r1, r5
 80068f0:	028b      	lsls	r3, r1, #10
 80068f2:	4621      	mov	r1, r4
 80068f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068f8:	4621      	mov	r1, r4
 80068fa:	028a      	lsls	r2, r1, #10
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006902:	2200      	movs	r2, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800690c:	f7f9 ff74 	bl	80007f8 <__aeabi_uldivmod>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4613      	mov	r3, r2
 8006916:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006918:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x200>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	0c1b      	lsrs	r3, r3, #16
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	3301      	adds	r3, #1
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800692a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006932:	e002      	b.n	800693a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_RCC_GetSysClockFreq+0x204>)
 8006936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800693a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800693c:	4618      	mov	r0, r3
 800693e:	3750      	adds	r7, #80	@ 0x50
 8006940:	46bd      	mov	sp, r7
 8006942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006946:	bf00      	nop
 8006948:	40023800 	.word	0x40023800
 800694c:	00f42400 	.word	0x00f42400
 8006950:	007a1200 	.word	0x007a1200

08006954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006958:	4b03      	ldr	r3, [pc, #12]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x14>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000000 	.word	0x20000000

0800696c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006970:	f7ff fff0 	bl	8006954 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b05      	ldr	r3, [pc, #20]	@ (800698c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	0a9b      	lsrs	r3, r3, #10
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4903      	ldr	r1, [pc, #12]	@ (8006990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40023800 	.word	0x40023800
 8006990:	08009024 	.word	0x08009024

08006994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d075      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069c8:	4b91      	ldr	r3, [pc, #580]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ce:	f7fd fae1 	bl	8003f94 <HAL_GetTick>
 80069d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069d4:	e008      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069d6:	f7fd fadd 	bl	8003f94 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e189      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069e8:	4b8a      	ldr	r3, [pc, #552]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f0      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	019a      	lsls	r2, r3, #6
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	071b      	lsls	r3, r3, #28
 8006a0c:	4981      	ldr	r1, [pc, #516]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01f      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a20:	4b7c      	ldr	r3, [pc, #496]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a26:	0f1b      	lsrs	r3, r3, #28
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	019a      	lsls	r2, r3, #6
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	071b      	lsls	r3, r3, #28
 8006a40:	4974      	ldr	r1, [pc, #464]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a48:	4b72      	ldr	r3, [pc, #456]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a4e:	f023 021f 	bic.w	r2, r3, #31
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	496e      	ldr	r1, [pc, #440]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00d      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	019a      	lsls	r2, r3, #6
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	061b      	lsls	r3, r3, #24
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	071b      	lsls	r3, r3, #28
 8006a80:	4964      	ldr	r1, [pc, #400]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a88:	4b61      	ldr	r3, [pc, #388]	@ (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a8e:	f7fd fa81 	bl	8003f94 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a96:	f7fd fa7d 	bl	8003f94 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e129      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d079      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006acc:	4b52      	ldr	r3, [pc, #328]	@ (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ad2:	f7fd fa5f 	bl	8003f94 <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad8:	e008      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ada:	f7fd fa5b 	bl	8003f94 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e107      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006aec:	4b49      	ldr	r3, [pc, #292]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af8:	d0ef      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d020      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b06:	4b43      	ldr	r3, [pc, #268]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0c:	0f1b      	lsrs	r3, r3, #28
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	019a      	lsls	r2, r3, #6
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	061b      	lsls	r3, r3, #24
 8006b20:	431a      	orrs	r2, r3
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	071b      	lsls	r3, r3, #28
 8006b26:	493b      	ldr	r1, [pc, #236]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b2e:	4b39      	ldr	r3, [pc, #228]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b34:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	4934      	ldr	r1, [pc, #208]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01e      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b54:	4b2f      	ldr	r3, [pc, #188]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b5a:	0e1b      	lsrs	r3, r3, #24
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	019a      	lsls	r2, r3, #6
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	061b      	lsls	r3, r3, #24
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	071b      	lsls	r3, r3, #28
 8006b74:	4927      	ldr	r1, [pc, #156]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b7c:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	4922      	ldr	r1, [pc, #136]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b92:	4b21      	ldr	r3, [pc, #132]	@ (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b94:	2201      	movs	r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b98:	f7fd f9fc 	bl	8003f94 <HAL_GetTick>
 8006b9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ba0:	f7fd f9f8 	bl	8003f94 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e0a4      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bb2:	4b18      	ldr	r3, [pc, #96]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bbe:	d1ef      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 808b 	beq.w	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	4b10      	ldr	r3, [pc, #64]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bea:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a0b      	ldr	r2, [pc, #44]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bf6:	f7fd f9cd 	bl	8003f94 <HAL_GetTick>
 8006bfa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bfc:	e010      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfe:	f7fd f9c9 	bl	8003f94 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d909      	bls.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e075      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006c10:	42470068 	.word	0x42470068
 8006c14:	40023800 	.word	0x40023800
 8006c18:	42470070 	.word	0x42470070
 8006c1c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c20:	4b38      	ldr	r3, [pc, #224]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0e8      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c2c:	4b36      	ldr	r3, [pc, #216]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c34:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d02f      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d028      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c54:	4b2d      	ldr	r3, [pc, #180]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c60:	4a29      	ldr	r2, [pc, #164]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c66:	4b28      	ldr	r3, [pc, #160]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d114      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c72:	f7fd f98f 	bl	8003f94 <HAL_GetTick>
 8006c76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c78:	e00a      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c7a:	f7fd f98b 	bl	8003f94 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e035      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c90:	4b1d      	ldr	r3, [pc, #116]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0ee      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca8:	d10d      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006caa:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cbe:	4912      	ldr	r1, [pc, #72]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	608b      	str	r3, [r1, #8]
 8006cc4:	e005      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006cc6:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	4a0f      	ldr	r2, [pc, #60]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ccc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006cd0:	6093      	str	r3, [r2, #8]
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cde:	490a      	ldr	r1, [pc, #40]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006cf8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40007000 	.word	0x40007000
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	42470e40 	.word	0x42470e40
 8006d10:	424711e0 	.word	0x424711e0

08006d14 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e025      	b.n	8006d74 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fb fe8d 	bl	8002a5c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f001 fea3 	bl	8008aa0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	461a      	mov	r2, r3
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	f001 fef8 	bl	8008b5a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d8e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d101      	bne.n	8006d9a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
 8006d98:	e021      	b.n	8006dde <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d002      	beq.n	8006da6 <HAL_SDRAM_SendCommand+0x2a>
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d118      	bne.n	8006dd8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 ff38 	bl	8008c2c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d104      	bne.n	8006dce <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2205      	movs	r2, #5
 8006dc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dcc:	e006      	b.n	8006ddc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dd6:	e001      	b.n	8006ddc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d101      	bne.n	8006e00 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e016      	b.n	8006e2e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d10f      	bne.n	8006e2c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 ff43 	bl	8008ca6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e07b      	b.n	8006f40 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e58:	d009      	beq.n	8006e6e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	61da      	str	r2, [r3, #28]
 8006e60:	e005      	b.n	8006e6e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7fb fc4d 	bl	8002728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef2:	ea42 0103 	orr.w	r1, r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	f003 0104 	and.w	r1, r3, #4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	f003 0210 	and.w	r2, r3, #16
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01a      	b.n	8006f90 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fc20 	bl	80027b8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa8:	f7fc fff4 	bl	8003f94 <HAL_GetTick>
 8006fac:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d001      	beq.n	8006fc2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e12a      	b.n	8007218 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Transmit+0x36>
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e122      	b.n	8007218 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_SPI_Transmit+0x48>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e11b      	b.n	8007218 <HAL_SPI_Transmit+0x280>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2203      	movs	r2, #3
 8006fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	88fa      	ldrh	r2, [r7, #6]
 8007006:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702e:	d10f      	bne.n	8007050 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800703e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800704e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d007      	beq.n	800706e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007076:	d152      	bne.n	800711e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_SPI_Transmit+0xee>
 8007080:	8b7b      	ldrh	r3, [r7, #26]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d145      	bne.n	8007112 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	881a      	ldrh	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	1c9a      	adds	r2, r3, #2
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070aa:	e032      	b.n	8007112 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d112      	bne.n	80070e0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	881a      	ldrh	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070de:	e018      	b.n	8007112 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070e0:	f7fc ff58 	bl	8003f94 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d803      	bhi.n	80070f8 <HAL_SPI_Transmit+0x160>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f6:	d102      	bne.n	80070fe <HAL_SPI_Transmit+0x166>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e082      	b.n	8007218 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1c7      	bne.n	80070ac <HAL_SPI_Transmit+0x114>
 800711c:	e053      	b.n	80071c6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <HAL_SPI_Transmit+0x194>
 8007126:	8b7b      	ldrh	r3, [r7, #26]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d147      	bne.n	80071bc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	7812      	ldrb	r2, [r2, #0]
 8007138:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007152:	e033      	b.n	80071bc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b02      	cmp	r3, #2
 8007160:	d113      	bne.n	800718a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	330c      	adds	r3, #12
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007188:	e018      	b.n	80071bc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800718a:	f7fc ff03 	bl	8003f94 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d803      	bhi.n	80071a2 <HAL_SPI_Transmit+0x20a>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d102      	bne.n	80071a8 <HAL_SPI_Transmit+0x210>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d109      	bne.n	80071bc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e02d      	b.n	8007218 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1c6      	bne.n	8007154 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 fbe6 	bl	800799c <SPI_EndRxTxTransaction>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007216:	2300      	movs	r3, #0
  }
}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	d001      	beq.n	8007240 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
 800723e:	e104      	b.n	800744a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007248:	d112      	bne.n	8007270 <HAL_SPI_Receive+0x50>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10e      	bne.n	8007270 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2204      	movs	r2, #4
 8007256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f8f3 	bl	8007452 <HAL_SPI_TransmitReceive>
 800726c:	4603      	mov	r3, r0
 800726e:	e0ec      	b.n	800744a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007270:	f7fc fe90 	bl	8003f94 <HAL_GetTick>
 8007274:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_SPI_Receive+0x62>
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0e1      	b.n	800744a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_SPI_Receive+0x74>
 8007290:	2302      	movs	r3, #2
 8007292:	e0da      	b.n	800744a <HAL_SPI_Receive+0x22a>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2204      	movs	r2, #4
 80072a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072e2:	d10f      	bne.n	8007304 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007302:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730e:	2b40      	cmp	r3, #64	@ 0x40
 8007310:	d007      	beq.n	8007322 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007320:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d170      	bne.n	800740c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800732a:	e035      	b.n	8007398 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b01      	cmp	r3, #1
 8007338:	d115      	bne.n	8007366 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f103 020c 	add.w	r2, r3, #12
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007364:	e018      	b.n	8007398 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007366:	f7fc fe15 	bl	8003f94 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d803      	bhi.n	800737e <HAL_SPI_Receive+0x15e>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d102      	bne.n	8007384 <HAL_SPI_Receive+0x164>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e058      	b.n	800744a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1c4      	bne.n	800732c <HAL_SPI_Receive+0x10c>
 80073a2:	e038      	b.n	8007416 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d113      	bne.n	80073da <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	b292      	uxth	r2, r2
 80073be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	1c9a      	adds	r2, r3, #2
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073d8:	e018      	b.n	800740c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073da:	f7fc fddb 	bl	8003f94 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d803      	bhi.n	80073f2 <HAL_SPI_Receive+0x1d2>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d102      	bne.n	80073f8 <HAL_SPI_Receive+0x1d8>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e01e      	b.n	800744a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1c6      	bne.n	80073a4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fa58 	bl	80078d0 <SPI_EndRxTransaction>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007448:	2300      	movs	r3, #0
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08a      	sub	sp, #40	@ 0x28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007460:	2301      	movs	r3, #1
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007464:	f7fc fd96 	bl	8003f94 <HAL_GetTick>
 8007468:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007470:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007478:	887b      	ldrh	r3, [r7, #2]
 800747a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800747c:	7ffb      	ldrb	r3, [r7, #31]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d00c      	beq.n	800749c <HAL_SPI_TransmitReceive+0x4a>
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007488:	d106      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x46>
 8007492:	7ffb      	ldrb	r3, [r7, #31]
 8007494:	2b04      	cmp	r3, #4
 8007496:	d001      	beq.n	800749c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007498:	2302      	movs	r3, #2
 800749a:	e17f      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_SPI_TransmitReceive+0x5c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_SPI_TransmitReceive+0x5c>
 80074a8:	887b      	ldrh	r3, [r7, #2]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e174      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x6e>
 80074bc:	2302      	movs	r3, #2
 80074be:	e16d      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d003      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2205      	movs	r2, #5
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	887a      	ldrh	r2, [r7, #2]
 80074ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	887a      	ldrh	r2, [r7, #2]
 80074f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	887a      	ldrh	r2, [r7, #2]
 80074fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	887a      	ldrh	r2, [r7, #2]
 8007504:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751c:	2b40      	cmp	r3, #64	@ 0x40
 800751e:	d007      	beq.n	8007530 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800752e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007538:	d17e      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_TransmitReceive+0xf6>
 8007542:	8afb      	ldrh	r3, [r7, #22]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d16c      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754c:	881a      	ldrh	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007558:	1c9a      	adds	r2, r3, #2
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007562:	b29b      	uxth	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756c:	e059      	b.n	8007622 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b02      	cmp	r3, #2
 800757a:	d11b      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x162>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d016      	beq.n	80075b4 <HAL_SPI_TransmitReceive+0x162>
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	2b01      	cmp	r3, #1
 800758a:	d113      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007590:	881a      	ldrh	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759c:	1c9a      	adds	r2, r3, #2
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d119      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x1a4>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d014      	beq.n	80075f6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	b292      	uxth	r2, r2
 80075d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	1c9a      	adds	r2, r3, #2
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f2:	2301      	movs	r3, #1
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075f6:	f7fc fccd 	bl	8003f94 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007602:	429a      	cmp	r2, r3
 8007604:	d80d      	bhi.n	8007622 <HAL_SPI_TransmitReceive+0x1d0>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760c:	d009      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e0bc      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1a0      	bne.n	800756e <HAL_SPI_TransmitReceive+0x11c>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d19b      	bne.n	800756e <HAL_SPI_TransmitReceive+0x11c>
 8007636:	e082      	b.n	800773e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <HAL_SPI_TransmitReceive+0x1f4>
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d171      	bne.n	800772a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800766c:	e05d      	b.n	800772a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d11c      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x264>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x264>
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	2b01      	cmp	r3, #1
 800768a:	d114      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d119      	bne.n	80076f8 <HAL_SPI_TransmitReceive+0x2a6>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d014      	beq.n	80076f8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076f4:	2301      	movs	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076f8:	f7fc fc4c 	bl	8003f94 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007704:	429a      	cmp	r2, r3
 8007706:	d803      	bhi.n	8007710 <HAL_SPI_TransmitReceive+0x2be>
 8007708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d102      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x2c4>
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e038      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d19c      	bne.n	800766e <HAL_SPI_TransmitReceive+0x21c>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d197      	bne.n	800766e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f92a 	bl	800799c <SPI_EndRxTxTransaction>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d008      	beq.n	8007760 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e01d      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800779a:	2300      	movs	r3, #0
  }
}
 800779c:	4618      	mov	r0, r3
 800779e:	3728      	adds	r7, #40	@ 0x28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077b2:	b2db      	uxtb	r3, r3
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077d0:	f7fc fbe0 	bl	8003f94 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	1a9b      	subs	r3, r3, r2
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077e0:	f7fc fbd8 	bl	8003f94 <HAL_GetTick>
 80077e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077e6:	4b39      	ldr	r3, [pc, #228]	@ (80078cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	015b      	lsls	r3, r3, #5
 80077ec:	0d1b      	lsrs	r3, r3, #20
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077f6:	e054      	b.n	80078a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fe:	d050      	beq.n	80078a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007800:	f7fc fbc8 	bl	8003f94 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	429a      	cmp	r2, r3
 800780e:	d902      	bls.n	8007816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d13d      	bne.n	8007892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782e:	d111      	bne.n	8007854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007838:	d004      	beq.n	8007844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007842:	d107      	bne.n	8007854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785c:	d10f      	bne.n	800787e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800787c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e017      	b.n	80078c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	3b01      	subs	r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4013      	ands	r3, r2
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	bf0c      	ite	eq
 80078b2:	2301      	moveq	r3, #1
 80078b4:	2300      	movne	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d19b      	bne.n	80077f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000000 	.word	0x20000000

080078d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078e4:	d111      	bne.n	800790a <SPI_EndRxTransaction+0x3a>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ee:	d004      	beq.n	80078fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078f8:	d107      	bne.n	800790a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007908:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007912:	d12a      	bne.n	800796a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791c:	d012      	beq.n	8007944 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	2180      	movs	r1, #128	@ 0x80
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff ff49 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02d      	beq.n	8007990 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007938:	f043 0220 	orr.w	r2, r3, #32
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e026      	b.n	8007992 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	2101      	movs	r1, #1
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff ff36 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01a      	beq.n	8007990 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795e:	f043 0220 	orr.w	r2, r3, #32
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e013      	b.n	8007992 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	2101      	movs	r1, #1
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f7ff ff23 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e000      	b.n	8007992 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2201      	movs	r2, #1
 80079b0:	2102      	movs	r1, #2
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff ff04 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e032      	b.n	8007a34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <SPI_EndRxTxTransaction+0xa0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007a40 <SPI_EndRxTxTransaction+0xa4>)
 80079d4:	fba2 2303 	umull	r2, r3, r2, r3
 80079d8:	0d5b      	lsrs	r3, r3, #21
 80079da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ec:	d112      	bne.n	8007a14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	2180      	movs	r1, #128	@ 0x80
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7ff fee1 	bl	80077c0 <SPI_WaitFlagStateUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d016      	beq.n	8007a32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a08:	f043 0220 	orr.w	r2, r3, #32
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e00f      	b.n	8007a34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2a:	2b80      	cmp	r3, #128	@ 0x80
 8007a2c:	d0f2      	beq.n	8007a14 <SPI_EndRxTxTransaction+0x78>
 8007a2e:	e000      	b.n	8007a32 <SPI_EndRxTxTransaction+0x96>
        break;
 8007a30:	bf00      	nop
  }

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000000 	.word	0x20000000
 8007a40:	165e9f81 	.word	0x165e9f81

08007a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e041      	b.n	8007ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fa fee4 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4610      	mov	r0, r2
 8007a84:	f000 fc60 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e041      	b.n	8007b78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d106      	bne.n	8007b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fa fe73 	bl	80027f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f000 fc11 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <HAL_TIM_PWM_Start+0x24>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	bf14      	ite	ne
 8007b9c:	2301      	movne	r3, #1
 8007b9e:	2300      	moveq	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	e022      	b.n	8007bea <HAL_TIM_PWM_Start+0x6a>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d109      	bne.n	8007bbe <HAL_TIM_PWM_Start+0x3e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	bf14      	ite	ne
 8007bb6:	2301      	movne	r3, #1
 8007bb8:	2300      	moveq	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	e015      	b.n	8007bea <HAL_TIM_PWM_Start+0x6a>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d109      	bne.n	8007bd8 <HAL_TIM_PWM_Start+0x58>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	e008      	b.n	8007bea <HAL_TIM_PWM_Start+0x6a>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	bf14      	ite	ne
 8007be4:	2301      	movne	r3, #1
 8007be6:	2300      	moveq	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e07c      	b.n	8007cec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_PWM_Start+0x82>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c00:	e013      	b.n	8007c2a <HAL_TIM_PWM_Start+0xaa>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d104      	bne.n	8007c12 <HAL_TIM_PWM_Start+0x92>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c10:	e00b      	b.n	8007c2a <HAL_TIM_PWM_Start+0xaa>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_PWM_Start+0xa2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c20:	e003      	b.n	8007c2a <HAL_TIM_PWM_Start+0xaa>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fe7e 	bl	8008934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf4 <HAL_TIM_PWM_Start+0x174>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIM_PWM_Start+0xcc>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf8 <HAL_TIM_PWM_Start+0x178>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d101      	bne.n	8007c50 <HAL_TIM_PWM_Start+0xd0>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <HAL_TIM_PWM_Start+0xd2>
 8007c50:	2300      	movs	r3, #0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a22      	ldr	r2, [pc, #136]	@ (8007cf4 <HAL_TIM_PWM_Start+0x174>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d022      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c78:	d01d      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cfc <HAL_TIM_PWM_Start+0x17c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d018      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1d      	ldr	r2, [pc, #116]	@ (8007d00 <HAL_TIM_PWM_Start+0x180>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1c      	ldr	r2, [pc, #112]	@ (8007d04 <HAL_TIM_PWM_Start+0x184>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a16      	ldr	r2, [pc, #88]	@ (8007cf8 <HAL_TIM_PWM_Start+0x178>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a18      	ldr	r2, [pc, #96]	@ (8007d08 <HAL_TIM_PWM_Start+0x188>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x136>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a16      	ldr	r2, [pc, #88]	@ (8007d0c <HAL_TIM_PWM_Start+0x18c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d111      	bne.n	8007cda <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	d010      	beq.n	8007cea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd8:	e007      	b.n	8007cea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0201 	orr.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40010400 	.word	0x40010400
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800
 8007d04:	40000c00 	.word	0x40000c00
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40001800 	.word	0x40001800

08007d10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fe06 	bl	8008934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8007de8 <HAL_TIM_PWM_Stop+0xd8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIM_PWM_Stop+0x2c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a2d      	ldr	r2, [pc, #180]	@ (8007dec <HAL_TIM_PWM_Stop+0xdc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIM_PWM_Stop+0x30>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <HAL_TIM_PWM_Stop+0x32>
 8007d40:	2300      	movs	r3, #0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d017      	beq.n	8007d76 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10f      	bne.n	8007d76 <HAL_TIM_PWM_Stop+0x66>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6a1a      	ldr	r2, [r3, #32]
 8007d5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d107      	bne.n	8007d76 <HAL_TIM_PWM_Stop+0x66>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6a1a      	ldr	r2, [r3, #32]
 8007d7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10f      	bne.n	8007da6 <HAL_TIM_PWM_Stop+0x96>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6a1a      	ldr	r2, [r3, #32]
 8007d8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_PWM_Stop+0x96>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0201 	bic.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <HAL_TIM_PWM_Stop+0xa6>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db4:	e013      	b.n	8007dde <HAL_TIM_PWM_Stop+0xce>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d104      	bne.n	8007dc6 <HAL_TIM_PWM_Stop+0xb6>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc4:	e00b      	b.n	8007dde <HAL_TIM_PWM_Stop+0xce>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIM_PWM_Stop+0xc6>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dd4:	e003      	b.n	8007dde <HAL_TIM_PWM_Stop+0xce>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40010400 	.word	0x40010400

08007df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d020      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0202 	mvn.w	r2, #2
 8007e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa65 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa57 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fa68 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d020      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01b      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0204 	mvn.w	r2, #4
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa3f 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa31 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa42 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d020      	beq.n	8007eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0208 	mvn.w	r2, #8
 8007ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa19 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa0b 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa1c 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d020      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01b      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0210 	mvn.w	r2, #16
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f9f3 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9e5 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f9f6 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00c      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0201 	mvn.w	r2, #1
 8007f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9c3 	bl	80082e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fd86 	bl	8008a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00c      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9c7 	bl	8008332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0220 	mvn.w	r2, #32
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fd58 	bl	8008a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e0ae      	b.n	800814c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b0c      	cmp	r3, #12
 8007ffa:	f200 809f 	bhi.w	800813c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8008004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008039 	.word	0x08008039
 8008008:	0800813d 	.word	0x0800813d
 800800c:	0800813d 	.word	0x0800813d
 8008010:	0800813d 	.word	0x0800813d
 8008014:	08008079 	.word	0x08008079
 8008018:	0800813d 	.word	0x0800813d
 800801c:	0800813d 	.word	0x0800813d
 8008020:	0800813d 	.word	0x0800813d
 8008024:	080080bb 	.word	0x080080bb
 8008028:	0800813d 	.word	0x0800813d
 800802c:	0800813d 	.word	0x0800813d
 8008030:	0800813d 	.word	0x0800813d
 8008034:	080080fb 	.word	0x080080fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fa2e 	bl	80084a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0208 	orr.w	r2, r2, #8
 8008052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0204 	bic.w	r2, r2, #4
 8008062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6999      	ldr	r1, [r3, #24]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	619a      	str	r2, [r3, #24]
      break;
 8008076:	e064      	b.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68b9      	ldr	r1, [r7, #8]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fa7e 	bl	8008580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699a      	ldr	r2, [r3, #24]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6999      	ldr	r1, [r3, #24]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	021a      	lsls	r2, r3, #8
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	619a      	str	r2, [r3, #24]
      break;
 80080b8:	e043      	b.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fad3 	bl	800866c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0208 	orr.w	r2, r2, #8
 80080d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0204 	bic.w	r2, r2, #4
 80080e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69d9      	ldr	r1, [r3, #28]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	61da      	str	r2, [r3, #28]
      break;
 80080f8:	e023      	b.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fb27 	bl	8008754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69da      	ldr	r2, [r3, #28]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69d9      	ldr	r1, [r3, #28]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	021a      	lsls	r2, r3, #8
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	61da      	str	r2, [r3, #28]
      break;
 800813a:	e002      	b.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	75fb      	strb	r3, [r7, #23]
      break;
 8008140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIM_ConfigClockSource+0x1c>
 800816c:	2302      	movs	r3, #2
 800816e:	e0b4      	b.n	80082da <HAL_TIM_ConfigClockSource+0x186>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800818e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a8:	d03e      	beq.n	8008228 <HAL_TIM_ConfigClockSource+0xd4>
 80081aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ae:	f200 8087 	bhi.w	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b6:	f000 8086 	beq.w	80082c6 <HAL_TIM_ConfigClockSource+0x172>
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081be:	d87f      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081c0:	2b70      	cmp	r3, #112	@ 0x70
 80081c2:	d01a      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0xa6>
 80081c4:	2b70      	cmp	r3, #112	@ 0x70
 80081c6:	d87b      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081c8:	2b60      	cmp	r3, #96	@ 0x60
 80081ca:	d050      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x11a>
 80081cc:	2b60      	cmp	r3, #96	@ 0x60
 80081ce:	d877      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081d0:	2b50      	cmp	r3, #80	@ 0x50
 80081d2:	d03c      	beq.n	800824e <HAL_TIM_ConfigClockSource+0xfa>
 80081d4:	2b50      	cmp	r3, #80	@ 0x50
 80081d6:	d873      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081d8:	2b40      	cmp	r3, #64	@ 0x40
 80081da:	d058      	beq.n	800828e <HAL_TIM_ConfigClockSource+0x13a>
 80081dc:	2b40      	cmp	r3, #64	@ 0x40
 80081de:	d86f      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081e0:	2b30      	cmp	r3, #48	@ 0x30
 80081e2:	d064      	beq.n	80082ae <HAL_TIM_ConfigClockSource+0x15a>
 80081e4:	2b30      	cmp	r3, #48	@ 0x30
 80081e6:	d86b      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d060      	beq.n	80082ae <HAL_TIM_ConfigClockSource+0x15a>
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	d867      	bhi.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d05c      	beq.n	80082ae <HAL_TIM_ConfigClockSource+0x15a>
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d05a      	beq.n	80082ae <HAL_TIM_ConfigClockSource+0x15a>
 80081f8:	e062      	b.n	80082c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800820a:	f000 fb73 	bl	80088f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800821c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	609a      	str	r2, [r3, #8]
      break;
 8008226:	e04f      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008238:	f000 fb5c 	bl	80088f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800824a:	609a      	str	r2, [r3, #8]
      break;
 800824c:	e03c      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800825a:	461a      	mov	r2, r3
 800825c:	f000 fad0 	bl	8008800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2150      	movs	r1, #80	@ 0x50
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fb29 	bl	80088be <TIM_ITRx_SetConfig>
      break;
 800826c:	e02c      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800827a:	461a      	mov	r2, r3
 800827c:	f000 faef 	bl	800885e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2160      	movs	r1, #96	@ 0x60
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fb19 	bl	80088be <TIM_ITRx_SetConfig>
      break;
 800828c:	e01c      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800829a:	461a      	mov	r2, r3
 800829c:	f000 fab0 	bl	8008800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2140      	movs	r1, #64	@ 0x40
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fb09 	bl	80088be <TIM_ITRx_SetConfig>
      break;
 80082ac:	e00c      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4619      	mov	r1, r3
 80082b8:	4610      	mov	r0, r2
 80082ba:	f000 fb00 	bl	80088be <TIM_ITRx_SetConfig>
      break;
 80082be:	e003      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
      break;
 80082c4:	e000      	b.n	80082c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a46      	ldr	r2, [pc, #280]	@ (8008474 <TIM_Base_SetConfig+0x12c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008366:	d00f      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a43      	ldr	r2, [pc, #268]	@ (8008478 <TIM_Base_SetConfig+0x130>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00b      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a42      	ldr	r2, [pc, #264]	@ (800847c <TIM_Base_SetConfig+0x134>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d007      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a41      	ldr	r2, [pc, #260]	@ (8008480 <TIM_Base_SetConfig+0x138>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a40      	ldr	r2, [pc, #256]	@ (8008484 <TIM_Base_SetConfig+0x13c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d108      	bne.n	800839a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800838e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a35      	ldr	r2, [pc, #212]	@ (8008474 <TIM_Base_SetConfig+0x12c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d02b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a8:	d027      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a32      	ldr	r2, [pc, #200]	@ (8008478 <TIM_Base_SetConfig+0x130>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d023      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a31      	ldr	r2, [pc, #196]	@ (800847c <TIM_Base_SetConfig+0x134>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d01f      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a30      	ldr	r2, [pc, #192]	@ (8008480 <TIM_Base_SetConfig+0x138>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d01b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008484 <TIM_Base_SetConfig+0x13c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d017      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008488 <TIM_Base_SetConfig+0x140>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2d      	ldr	r2, [pc, #180]	@ (800848c <TIM_Base_SetConfig+0x144>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00f      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008490 <TIM_Base_SetConfig+0x148>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008494 <TIM_Base_SetConfig+0x14c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d007      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008498 <TIM_Base_SetConfig+0x150>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a29      	ldr	r2, [pc, #164]	@ (800849c <TIM_Base_SetConfig+0x154>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d108      	bne.n	800840c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a10      	ldr	r2, [pc, #64]	@ (8008474 <TIM_Base_SetConfig+0x12c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a12      	ldr	r2, [pc, #72]	@ (8008484 <TIM_Base_SetConfig+0x13c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d103      	bne.n	8008448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b01      	cmp	r3, #1
 8008458:	d105      	bne.n	8008466 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f023 0201 	bic.w	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	611a      	str	r2, [r3, #16]
  }
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	40000400 	.word	0x40000400
 800847c:	40000800 	.word	0x40000800
 8008480:	40000c00 	.word	0x40000c00
 8008484:	40010400 	.word	0x40010400
 8008488:	40014000 	.word	0x40014000
 800848c:	40014400 	.word	0x40014400
 8008490:	40014800 	.word	0x40014800
 8008494:	40001800 	.word	0x40001800
 8008498:	40001c00 	.word	0x40001c00
 800849c:	40002000 	.word	0x40002000

080084a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f023 0201 	bic.w	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0303 	bic.w	r3, r3, #3
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f023 0302 	bic.w	r3, r3, #2
 80084e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a20      	ldr	r2, [pc, #128]	@ (8008578 <TIM_OC1_SetConfig+0xd8>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_OC1_SetConfig+0x64>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a1f      	ldr	r2, [pc, #124]	@ (800857c <TIM_OC1_SetConfig+0xdc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d10c      	bne.n	800851e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 0308 	bic.w	r3, r3, #8
 800850a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 0304 	bic.w	r3, r3, #4
 800851c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <TIM_OC1_SetConfig+0xd8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d003      	beq.n	800852e <TIM_OC1_SetConfig+0x8e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a14      	ldr	r2, [pc, #80]	@ (800857c <TIM_OC1_SetConfig+0xdc>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d111      	bne.n	8008552 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800853c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	621a      	str	r2, [r3, #32]
}
 800856c:	bf00      	nop
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	40010000 	.word	0x40010000
 800857c:	40010400 	.word	0x40010400

08008580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f023 0210 	bic.w	r2, r3, #16
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0320 	bic.w	r3, r3, #32
 80085ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a22      	ldr	r2, [pc, #136]	@ (8008664 <TIM_OC2_SetConfig+0xe4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_OC2_SetConfig+0x68>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a21      	ldr	r2, [pc, #132]	@ (8008668 <TIM_OC2_SetConfig+0xe8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d10d      	bne.n	8008604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008602:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a17      	ldr	r2, [pc, #92]	@ (8008664 <TIM_OC2_SetConfig+0xe4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_OC2_SetConfig+0x94>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a16      	ldr	r2, [pc, #88]	@ (8008668 <TIM_OC2_SetConfig+0xe8>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d113      	bne.n	800863c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800861a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	40010000 	.word	0x40010000
 8008668:	40010400 	.word	0x40010400

0800866c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	021b      	lsls	r3, r3, #8
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	4313      	orrs	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a21      	ldr	r2, [pc, #132]	@ (800874c <TIM_OC3_SetConfig+0xe0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d003      	beq.n	80086d2 <TIM_OC3_SetConfig+0x66>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a20      	ldr	r2, [pc, #128]	@ (8008750 <TIM_OC3_SetConfig+0xe4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d10d      	bne.n	80086ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	021b      	lsls	r3, r3, #8
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a16      	ldr	r2, [pc, #88]	@ (800874c <TIM_OC3_SetConfig+0xe0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d003      	beq.n	80086fe <TIM_OC3_SetConfig+0x92>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a15      	ldr	r2, [pc, #84]	@ (8008750 <TIM_OC3_SetConfig+0xe4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d113      	bne.n	8008726 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800870c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	621a      	str	r2, [r3, #32]
}
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	40010000 	.word	0x40010000
 8008750:	40010400 	.word	0x40010400

08008754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800878a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800879e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a12      	ldr	r2, [pc, #72]	@ (80087f8 <TIM_OC4_SetConfig+0xa4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_OC4_SetConfig+0x68>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a11      	ldr	r2, [pc, #68]	@ (80087fc <TIM_OC4_SetConfig+0xa8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d109      	bne.n	80087d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	019b      	lsls	r3, r3, #6
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	621a      	str	r2, [r3, #32]
}
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400

08008800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0201 	bic.w	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800882a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f023 030a 	bic.w	r3, r3, #10
 800883c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800885e:	b480      	push	{r7}
 8008860:	b087      	sub	sp, #28
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	f023 0210 	bic.w	r2, r3, #16
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	031b      	lsls	r3, r3, #12
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800889a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	f043 0307 	orr.w	r3, r3, #7
 80088e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	609a      	str	r2, [r3, #8]
}
 80088e8:	bf00      	nop
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800890e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	431a      	orrs	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4313      	orrs	r3, r2
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	609a      	str	r2, [r3, #8]
}
 8008928:	bf00      	nop
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	2201      	movs	r2, #1
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a1a      	ldr	r2, [r3, #32]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	43db      	mvns	r3, r3
 8008956:	401a      	ands	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6a1a      	ldr	r2, [r3, #32]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f003 031f 	and.w	r3, r3, #31
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	fa01 f303 	lsl.w	r3, r1, r3
 800896c:	431a      	orrs	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
	...

08008980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008994:	2302      	movs	r3, #2
 8008996:	e05a      	b.n	8008a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a21      	ldr	r2, [pc, #132]	@ (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d022      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089e4:	d01d      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d018      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d013      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00e      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a18      	ldr	r2, [pc, #96]	@ (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d009      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a17      	ldr	r2, [pc, #92]	@ (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d004      	beq.n	8008a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a15      	ldr	r2, [pc, #84]	@ (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d10c      	bne.n	8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40000400 	.word	0x40000400
 8008a64:	40000800 	.word	0x40000800
 8008a68:	40000c00 	.word	0x40000c00
 8008a6c:	40010400 	.word	0x40010400
 8008a70:	40014000 	.word	0x40014000
 8008a74:	40001800 	.word	0x40001800

08008a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d123      	bne.n	8008afa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008aba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	6851      	ldr	r1, [r2, #4]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	6892      	ldr	r2, [r2, #8]
 8008ac6:	4311      	orrs	r1, r2
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	68d2      	ldr	r2, [r2, #12]
 8008acc:	4311      	orrs	r1, r2
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	6912      	ldr	r2, [r2, #16]
 8008ad2:	4311      	orrs	r1, r2
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	6952      	ldr	r2, [r2, #20]
 8008ad8:	4311      	orrs	r1, r2
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	6992      	ldr	r2, [r2, #24]
 8008ade:	4311      	orrs	r1, r2
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	69d2      	ldr	r2, [r2, #28]
 8008ae4:	4311      	orrs	r1, r2
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	6a12      	ldr	r2, [r2, #32]
 8008aea:	4311      	orrs	r1, r2
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008af0:	430a      	orrs	r2, r1
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	e028      	b.n	8008b4c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	69d9      	ldr	r1, [r3, #28]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	4319      	orrs	r1, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	430b      	orrs	r3, r1
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008b20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	6851      	ldr	r1, [r2, #4]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	6892      	ldr	r2, [r2, #8]
 8008b2c:	4311      	orrs	r1, r2
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	68d2      	ldr	r2, [r2, #12]
 8008b32:	4311      	orrs	r1, r2
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	6912      	ldr	r2, [r2, #16]
 8008b38:	4311      	orrs	r1, r2
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	6952      	ldr	r2, [r2, #20]
 8008b3e:	4311      	orrs	r1, r2
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	6992      	ldr	r2, [r2, #24]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d128      	bne.n	8008bbe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	1e59      	subs	r1, r3, #1
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	4319      	orrs	r1, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	4319      	orrs	r1, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	4319      	orrs	r1, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	4319      	orrs	r1, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	051b      	lsls	r3, r3, #20
 8008baa:	4319      	orrs	r1, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	061b      	lsls	r3, r3, #24
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	e02f      	b.n	8008c1e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008bc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	68d2      	ldr	r2, [r2, #12]
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	0311      	lsls	r1, r2, #12
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	6952      	ldr	r2, [r2, #20]
 8008bd6:	3a01      	subs	r2, #1
 8008bd8:	0512      	lsls	r2, r2, #20
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	1e59      	subs	r1, r3, #1
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	4319      	orrs	r1, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	4319      	orrs	r1, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	041b      	lsls	r3, r3, #16
 8008c0c:	4319      	orrs	r1, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	061b      	lsls	r3, r3, #24
 8008c16:	430b      	orrs	r3, r1
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	0d9b      	lsrs	r3, r3, #22
 8008c42:	059b      	lsls	r3, r3, #22
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	6811      	ldr	r1, [r2, #0]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	6852      	ldr	r2, [r2, #4]
 8008c4c:	4311      	orrs	r1, r2
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	6892      	ldr	r2, [r2, #8]
 8008c52:	3a01      	subs	r2, #1
 8008c54:	0152      	lsls	r2, r2, #5
 8008c56:	4311      	orrs	r1, r2
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	68d2      	ldr	r2, [r2, #12]
 8008c5c:	0252      	lsls	r2, r2, #9
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	431a      	orrs	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008c66:	f7fb f995 	bl	8003f94 <HAL_GetTick>
 8008c6a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008c6c:	e010      	b.n	8008c90 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d00c      	beq.n	8008c90 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <FMC_SDRAM_SendCommand+0x60>
 8008c7c:	f7fb f98a 	bl	8003f94 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d201      	bcs.n	8008c90 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e006      	b.n	8008c9e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d0e8      	beq.n	8008c6e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008cb8:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	0052      	lsls	r2, r2, #1
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <memset>:
 8008cd4:	4402      	add	r2, r0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d100      	bne.n	8008cde <memset+0xa>
 8008cdc:	4770      	bx	lr
 8008cde:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce2:	e7f9      	b.n	8008cd8 <memset+0x4>

08008ce4 <__libc_init_array>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8008d1c <__libc_init_array+0x38>)
 8008ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8008d20 <__libc_init_array+0x3c>)
 8008cea:	1b64      	subs	r4, r4, r5
 8008cec:	10a4      	asrs	r4, r4, #2
 8008cee:	2600      	movs	r6, #0
 8008cf0:	42a6      	cmp	r6, r4
 8008cf2:	d109      	bne.n	8008d08 <__libc_init_array+0x24>
 8008cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8008d24 <__libc_init_array+0x40>)
 8008cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8008d28 <__libc_init_array+0x44>)
 8008cf8:	f000 f826 	bl	8008d48 <_init>
 8008cfc:	1b64      	subs	r4, r4, r5
 8008cfe:	10a4      	asrs	r4, r4, #2
 8008d00:	2600      	movs	r6, #0
 8008d02:	42a6      	cmp	r6, r4
 8008d04:	d105      	bne.n	8008d12 <__libc_init_array+0x2e>
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d0c:	4798      	blx	r3
 8008d0e:	3601      	adds	r6, #1
 8008d10:	e7ee      	b.n	8008cf0 <__libc_init_array+0xc>
 8008d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d16:	4798      	blx	r3
 8008d18:	3601      	adds	r6, #1
 8008d1a:	e7f2      	b.n	8008d02 <__libc_init_array+0x1e>
 8008d1c:	0800aaf4 	.word	0x0800aaf4
 8008d20:	0800aaf4 	.word	0x0800aaf4
 8008d24:	0800aaf4 	.word	0x0800aaf4
 8008d28:	0800aaf8 	.word	0x0800aaf8

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d42:	4291      	cmp	r1, r2
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	bf00      	nop
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
